-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/input-output-hk/plutus-apps#readme</a>
@package marconi-sidechain
@version 1.2.0.0


-- | Defines REST and JSON-RPC routes
module Marconi.Sidechain.Api.Routes

-- | marconi-sidechain APIs
type API = JsonRpcAPI :<|> RestAPI

-- | JSON-RPC API, endpoint
type JsonRpcAPI = "json-rpc" :> RawJsonRpc RpcAPI

-- | RPC routes
type RpcAPI = RpcEchoMethod :<|> RpcTargetAddressesMethod :<|> RpcCurrentSyncedPointMethod :<|> RpcPastAddressUtxoMethod :<|> RpcMintingPolicyHashTxMethod :<|> RpcEpochStakePoolDelegationMethod :<|> RpcEpochNonceMethod
type RpcEchoMethod = JsonRpc "echo" String String String
type RpcTargetAddressesMethod = JsonRpc "getTargetAddresses" String String [Text]
type RpcCurrentSyncedPointMethod = JsonRpc "getCurrentSyncedPoint" String String CurrentSyncedPointResult
type RpcPastAddressUtxoMethod = JsonRpc "getUtxoFromAddress" TxOutAtQuery String AddressUtxoResult
type RpcMintingPolicyHashTxMethod = JsonRpc "getTxWithMintingPolicy" String String MintingPolicyHashTxResult
type RpcEpochStakePoolDelegationMethod = JsonRpc "getStakePoolDelegationByEpoch" Word64 String EpochStakePoolDelegationResult
type RpcEpochNonceMethod = JsonRpc "getNonceByEpoch" Word64 String EpochNonceResult

-- | REST API, endpoints
type RestAPI = "rest" :> (GetTime :<|> GetTargetAddresses)
type GetTime = "time" :> Get '[PlainText] String
type GetTargetAddresses = "addresses" :> Get '[JSON] [Text]
newtype CurrentSyncedPointResult
CurrentSyncedPointResult :: ChainPoint -> CurrentSyncedPointResult
newtype AddressUtxoResult
AddressUtxoResult :: [UtxoRow] -> AddressUtxoResult
newtype MintingPolicyHashTxResult
MintingPolicyHashTxResult :: [TxMintRow] -> MintingPolicyHashTxResult
newtype EpochStakePoolDelegationResult
EpochStakePoolDelegationResult :: [EpochSDDRow] -> EpochStakePoolDelegationResult
newtype EpochNonceResult
EpochNonceResult :: Maybe EpochNonceRow -> EpochNonceResult
data TxOutAtQuery
TxOutAtQuery :: !String -> !Maybe Word64 -> TxOutAtQuery
[queryAddress] :: TxOutAtQuery -> !String
[querySlot] :: TxOutAtQuery -> !Maybe Word64
instance GHC.Show.Show Marconi.Sidechain.Api.Routes.CurrentSyncedPointResult
instance GHC.Generics.Generic Marconi.Sidechain.Api.Routes.CurrentSyncedPointResult
instance GHC.Classes.Ord Marconi.Sidechain.Api.Routes.CurrentSyncedPointResult
instance GHC.Classes.Eq Marconi.Sidechain.Api.Routes.CurrentSyncedPointResult
instance Data.Aeson.Types.FromJSON.FromJSON Marconi.Sidechain.Api.Routes.AddressUtxoResult
instance Data.Aeson.Types.ToJSON.ToJSON Marconi.Sidechain.Api.Routes.AddressUtxoResult
instance GHC.Generics.Generic Marconi.Sidechain.Api.Routes.AddressUtxoResult
instance GHC.Show.Show Marconi.Sidechain.Api.Routes.AddressUtxoResult
instance GHC.Classes.Ord Marconi.Sidechain.Api.Routes.AddressUtxoResult
instance GHC.Classes.Eq Marconi.Sidechain.Api.Routes.AddressUtxoResult
instance Data.Aeson.Types.FromJSON.FromJSON Marconi.Sidechain.Api.Routes.MintingPolicyHashTxResult
instance Data.Aeson.Types.ToJSON.ToJSON Marconi.Sidechain.Api.Routes.MintingPolicyHashTxResult
instance GHC.Generics.Generic Marconi.Sidechain.Api.Routes.MintingPolicyHashTxResult
instance GHC.Show.Show Marconi.Sidechain.Api.Routes.MintingPolicyHashTxResult
instance GHC.Classes.Ord Marconi.Sidechain.Api.Routes.MintingPolicyHashTxResult
instance GHC.Classes.Eq Marconi.Sidechain.Api.Routes.MintingPolicyHashTxResult
instance Data.Aeson.Types.FromJSON.FromJSON Marconi.Sidechain.Api.Routes.EpochStakePoolDelegationResult
instance Data.Aeson.Types.ToJSON.ToJSON Marconi.Sidechain.Api.Routes.EpochStakePoolDelegationResult
instance GHC.Generics.Generic Marconi.Sidechain.Api.Routes.EpochStakePoolDelegationResult
instance GHC.Show.Show Marconi.Sidechain.Api.Routes.EpochStakePoolDelegationResult
instance GHC.Classes.Ord Marconi.Sidechain.Api.Routes.EpochStakePoolDelegationResult
instance GHC.Classes.Eq Marconi.Sidechain.Api.Routes.EpochStakePoolDelegationResult
instance Data.Aeson.Types.FromJSON.FromJSON Marconi.Sidechain.Api.Routes.EpochNonceResult
instance Data.Aeson.Types.ToJSON.ToJSON Marconi.Sidechain.Api.Routes.EpochNonceResult
instance GHC.Generics.Generic Marconi.Sidechain.Api.Routes.EpochNonceResult
instance GHC.Show.Show Marconi.Sidechain.Api.Routes.EpochNonceResult
instance GHC.Classes.Ord Marconi.Sidechain.Api.Routes.EpochNonceResult
instance GHC.Classes.Eq Marconi.Sidechain.Api.Routes.EpochNonceResult
instance GHC.Show.Show Marconi.Sidechain.Api.Routes.TxOutAtQuery
instance Data.Aeson.Types.FromJSON.FromJSON Marconi.Sidechain.Api.Routes.TxOutAtQuery
instance Data.Aeson.Types.ToJSON.ToJSON Marconi.Sidechain.Api.Routes.TxOutAtQuery
instance Data.Aeson.Types.ToJSON.ToJSON Marconi.Sidechain.Api.Routes.CurrentSyncedPointResult
instance Data.Aeson.Types.FromJSON.FromJSON Marconi.Sidechain.Api.Routes.CurrentSyncedPointResult


-- | This module provides support for writing handlers for JSON-RPC
--   endpoints.
module Marconi.Sidechain.Api.Types

-- | Type represents http port for JSON-RPC
data CliArgs
CliArgs :: !FilePath -> !FilePath -> !FilePath -> !Maybe Int -> !NetworkId -> !Maybe TargetAddresses -> CliArgs

-- | POSIX socket file to communicate with cardano node
[socket] :: CliArgs -> !FilePath

-- | Path to the node config
[nodeConfigPath] :: CliArgs -> !FilePath

-- | Directory path containing the SQLite database files
[dbDir] :: CliArgs -> !FilePath

-- | optional tcp/ip port number for JSON-RPC http server
[httpPort] :: CliArgs -> !Maybe Int

-- | cardano network id
[networkId] :: CliArgs -> !NetworkId

-- | white-space sepparated list of Bech32 Cardano Shelley addresses
[targetAddresses] :: CliArgs -> !Maybe TargetAddresses

-- | JSON-RPC as well as the Query Indexer Env
data SidechainEnv
SidechainEnv :: !Settings -> !SidechainIndexers -> SidechainEnv

-- | HTTP server setting
[_sidechainEnvHttpSettings] :: SidechainEnv -> !Settings

-- | Used for query the indexers
[_sidechainEnvIndexers] :: SidechainEnv -> !SidechainIndexers

-- | Should contain all the indexers required by Sidechain.
data SidechainIndexers
SidechainIndexers :: !AddressUtxoIndexerEnv -> !EpochStateIndexerEnv -> SidechainIndexers

-- | For query thread to access in-memory utxos
[_sidechainAddressUtxoIndexer] :: SidechainIndexers -> !AddressUtxoIndexerEnv

-- | For query thread to access in-memory epoch state data
[_sidechainEpochStateIndexer] :: SidechainIndexers -> !EpochStateIndexerEnv
data AddressUtxoIndexerEnv
AddressUtxoIndexerEnv :: !Maybe TargetAddresses -> !TMVar (State UtxoHandle) -> AddressUtxoIndexerEnv
[_addressUtxoIndexerEnvTargetAddresses] :: AddressUtxoIndexerEnv -> !Maybe TargetAddresses
[_addressUtxoIndexerEnvIndexer] :: AddressUtxoIndexerEnv -> !TMVar (State UtxoHandle)
newtype EpochStateIndexerEnv
EpochStateIndexerEnv :: TMVar (State EpochStateHandle) -> EpochStateIndexerEnv
[_epochStateIndexerEnvIndexer] :: EpochStateIndexerEnv -> TMVar (State EpochStateHandle)
data QueryExceptions
AddressConversionError :: !QueryExceptions -> QueryExceptions
QueryError :: !String -> QueryExceptions
UnexpectedQueryResult :: !StorableQuery UtxoHandle -> QueryExceptions
sidechainEnvIndexers :: Lens' SidechainEnv SidechainIndexers
sidechainEnvHttpSettings :: Lens' SidechainEnv Settings
sidechainEpochStateIndexer :: Lens' SidechainIndexers EpochStateIndexerEnv
sidechainAddressUtxoIndexer :: Lens' SidechainIndexers AddressUtxoIndexerEnv
addressUtxoIndexerEnvTargetAddresses :: Lens' AddressUtxoIndexerEnv (Maybe TargetAddresses)
addressUtxoIndexerEnvIndexer :: Lens' AddressUtxoIndexerEnv (TMVar (State UtxoHandle))
epochStateIndexerEnvIndexer :: Iso' EpochStateIndexerEnv (TMVar (State EpochStateHandle))
instance GHC.Show.Show Marconi.Sidechain.Api.Types.CliArgs
instance GHC.Exception.Type.Exception Marconi.Sidechain.Api.Types.QueryExceptions
instance GHC.Show.Show Marconi.Sidechain.Api.Types.QueryExceptions

module Marconi.Sidechain.CLI
parseCli :: IO CliArgs
programParser :: String -> ParserInfo CliArgs
parserCliArgs :: Parser CliArgs

module Marconi.Sidechain.Utils

-- | Non-blocking write of a new value to a <a>TMVar</a> Puts if empty.
--   Replaces if populated.
--   
--   Only exists in GHC9, but we're on GHC8. TODO: Remove once we migrate
--   to GHC9.
writeTMVar :: TMVar a -> a -> STM ()

module Marconi.Sidechain.Api.Query.Indexers.Utxo

-- | Bootstraps the utxo query environment. The module is responsible for
--   accessing SQLite for quries. The main issue we try to avoid here is
--   mixing inserts and quries in SQLite to avoid locking the database
initializeEnv :: Maybe TargetAddresses -> IO AddressUtxoIndexerEnv

-- | Retrieve the current synced point of the utxo indexer
currentSyncedPoint :: AddressUtxoIndexerEnv -> IO (Either QueryExceptions CurrentSyncedPointResult)

-- | Query utxos by Address Address conversion error from Bech32 may occur
findByAddress :: AddressUtxoIndexerEnv -> AddressAny -> Maybe SlotNo -> IO (Either QueryExceptions [UtxoRow])

-- | Retrieve Utxos associated with the given address We return an empty
--   list if no address is not found
findByBech32Address :: AddressUtxoIndexerEnv -> Text -> IO (Either QueryExceptions AddressUtxoResult)

-- | Retrieve Utxos associated with the given address We return an empty
--   list if no address is not found
findByBech32AddressAtSlot :: AddressUtxoIndexerEnv -> Text -> Maybe Word64 -> IO (Either QueryExceptions AddressUtxoResult)

-- | report target addresses Used by JSON-RPC
reportQueryAddresses :: AddressUtxoIndexerEnv -> IO [Address ShelleyAddr]
data UtxoRow
UtxoRow :: !Utxo -> !SlotNo -> !Hash BlockHeader -> UtxoRow
[_urUtxo] :: UtxoRow -> !Utxo
[_urSlotNo] :: UtxoRow -> !SlotNo
[_urBlockHash] :: UtxoRow -> !Hash BlockHeader
type UtxoIndexer = State UtxoHandle
reportBech32Addresses :: AddressUtxoIndexerEnv -> [Text]

-- | Execute the query function We must stop the utxo inserts before doing
--   the query
withQueryAction :: AddressUtxoIndexerEnv -> StorableQuery UtxoHandle -> IO (Either QueryExceptions [UtxoRow])
updateEnvState :: AddressUtxoIndexerEnv -> UtxoIndexer -> STM ()

module Marconi.Sidechain.Api.Query.Indexers.EpochState

-- | Bootstraps the EpochState query environment. The module is responsible
--   for accessing SQLite for queries. The main issue we try to avoid here
--   is mixing inserts and quries in SQLite to avoid locking the database
initializeEnv :: IO EpochStateIndexerEnv
updateEnvState :: TMVar (State EpochStateHandle) -> State EpochStateHandle -> STM ()

-- | Retrieve SDD (stakepool delegation distribution) associated at the
--   given <tt>EpochNo</tt>. We return an empty list if the
--   <tt>EpochNo</tt> is not found.
querySDDByEpochNo :: SidechainEnv -> Word64 -> IO (Either QueryExceptions EpochStakePoolDelegationResult)

-- | Retrieve the nonce associated at the given <tt>EpochNo</tt> We return
--   an empty list if the <tt>EpochNo</tt> is not found.
queryNonceByEpochNo :: SidechainEnv -> Word64 -> IO (Either QueryExceptions EpochNonceResult)


-- | This module bootstraps the marconi-sidechain JSON RPC server, it acts
--   as a glue conntecting the JSON-RPC, HttpServer, marconiIndexer, and
--   marconi cache
module Marconi.Sidechain.Bootstrap

-- | Bootstraps the JSON-RPC http server with appropriate settings and
--   marconi cache this is just a wrapper for the bootstrapHttp in json-rpc
--   package
initializeSidechainEnv :: Maybe Port -> Maybe TargetAddresses -> IO SidechainEnv

-- | Marconi cardano blockchain indexer
bootstrapIndexers :: CliArgs -> SidechainEnv -> IO ()

module Marconi.Sidechain.Api.HttpServer

-- | Bootstraps the HTTP server
bootstrap :: SidechainEnv -> IO ()
marconiApp :: SidechainEnv -> Application
jsonRpcServer :: SidechainEnv -> Server JsonRpcAPI
restApiServer :: SidechainEnv -> Server RestAPI
httpRpcServer :: SidechainEnv -> Server API

-- | Echos message back as a Jsonrpc response. Used for testing the server.
echo :: String -> Handler (Either (JsonRpcErr String) String)

-- | Echos current time as REST response. Used for testing the http server
--   outside of jsonrpc protocol.
getTimeHandler :: Handler String

-- | Prints TargetAddresses Bech32 representation to the console
getTargetAddressesHandler :: SidechainEnv -> Handler [Text]

-- | prints TargetAddresses Bech32 representation as thru JsonRpc
getTargetAddressesQueryHandler :: SidechainEnv -> String -> Handler (Either (JsonRpcErr String) [Text])

-- | Handler for retrieving current synced chain point.
getCurrentSyncedPointHandler :: SidechainEnv -> String -> Handler (Either (JsonRpcErr String) CurrentSyncedPointResult)

-- | Handler for retrieving UTXOs by Address
getAddressUtxoHandler :: SidechainEnv -> TxOutAtQuery -> Handler (Either (JsonRpcErr String) AddressUtxoResult)

-- | Handler for retrieving Txs by Minting Policy Hash.
getMintingPolicyHashTxHandler :: SidechainEnv -> String -> Handler (Either (JsonRpcErr String) MintingPolicyHashTxResult)

-- | Handler for retrieving stake pool delegation per epoch
getEpochStakePoolDelegationHandler :: SidechainEnv -> Word64 -> Handler (Either (JsonRpcErr String) EpochStakePoolDelegationResult)

-- | Handler for retrieving stake pool delegation per epoch
getEpochNonceHandler :: SidechainEnv -> Word64 -> Handler (Either (JsonRpcErr String) EpochNonceResult)

-- | Convert to JSON-RPC protocol error.
toRpcErr :: QueryExceptions -> JsonRpcErr String
