-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/input-output-hk/plutus-apps#readme</a>
@package plutus-contract-certification
@version 1.2.0.0

module Plutus.Contract.Test.Certification
data Instance c m
[Instance] :: c m => Instance c m

-- | A certification object specifies what tests should be run by the
--   <a>certify</a> function.
data Certification m
Certification :: CoverageIndex -> Maybe (NoLockedFundsProof m) -> Maybe (NoLockedFundsProofLight m) -> Maybe (Instance CrashTolerance m) -> Maybe Whitelist -> Maybe (CoverageRef -> TestTree) -> [(String, DL m ())] -> Certification m

-- | Coverage locations for on-chain test coverage.
[certCoverageIndex] :: Certification m -> CoverageIndex
[certNoLockedFunds] :: Certification m -> Maybe (NoLockedFundsProof m)
[certNoLockedFundsLight] :: Certification m -> Maybe (NoLockedFundsProofLight m)

-- | Contract model for testing robustness against off-chain code crashes.
[certCrashTolerance] :: Certification m -> Maybe (Instance CrashTolerance m)

-- | List of allowed exceptions from on-chain code. Usually `Just
--   <tt>defaultWhiteList</tt>`.
[certWhitelist] :: Certification m -> Maybe Whitelist

-- | Unit tests using <a>Test.Tasty</a>. See e.g.
--   <a>checkPredicateCoverage</a>.
[certUnitTests] :: Certification m -> Maybe (CoverageRef -> TestTree)

-- | Unit tests using <a>DL</a>.
[certDLTests] :: Certification m -> [(String, DL m ())]
defaultCertification :: Certification m

module Plutus.Contract.Test.Certification.Run
data CertificationReport m
certResJSON :: CertificationReport m -> String
certRes_standardPropertyResult :: forall m_aQY4 m_a1r5G. Lens (CertificationReport m_aQY4) (CertificationReport m_a1r5G) Result Result
certRes_noLockedFundsResult :: forall m_aQY4 m_a1r5E. Lens (CertificationReport m_aQY4) (CertificationReport m_a1r5E) (Maybe Result) (Maybe Result)
certRes_noLockedFundsLightResult :: forall m_aQY4 m_a1r5D. Lens (CertificationReport m_aQY4) (CertificationReport m_a1r5D) (Maybe Result) (Maybe Result)
certRes_standardCrashToleranceResult :: forall m_aQY4 m_a1r5F. Lens (CertificationReport m_aQY4) (CertificationReport m_a1r5F) (Maybe Result) (Maybe Result)
certRes_unitTestResults :: forall m_aQY4 m_a1r5H. Lens (CertificationReport m_aQY4) (CertificationReport m_a1r5H) [Result] [Result]
certRes_coverageReport :: forall m_aQY4 m_a1r5C. Lens (CertificationReport m_aQY4) (CertificationReport m_a1r5C) CoverageReport CoverageReport
certRes_whitelistOk :: forall m_aQY4 m_a1r5I. Lens (CertificationReport m_aQY4) (CertificationReport m_a1r5I) (Maybe Bool) (Maybe Bool)
certRes_whitelistResult :: forall m_aQY4 m_a1r5J. Lens (CertificationReport m_aQY4) (CertificationReport m_a1r5J) (Maybe Result) (Maybe Result)
certRes_DLTests :: forall m_aQY4 m_a1r5B. Lens (CertificationReport m_aQY4) (CertificationReport m_a1r5B) [(String, Result)] [(String, Result)]
data CertificationOptions
CertificationOptions :: Int -> Bool -> Maybe (Chan CertificationEvent) -> CertificationOptions
[certOptNumTests] :: CertificationOptions -> Int
[certOptOutput] :: CertificationOptions -> Bool
[certEventChannel] :: CertificationOptions -> Maybe (Chan CertificationEvent)
data CertificationEvent

-- | Nothing if discarded, otherwise test result
QuickCheckTestEvent :: Maybe Bool -> CertificationEvent
QuickCheckNumTestsEvent :: Int -> CertificationEvent
StartCertificationTask :: CertificationTask -> CertificationEvent
FinishedTask :: Bool -> CertificationEvent
CertificationDone :: CertificationEvent
data CertificationTask
UnitTestsTask :: CertificationTask
StandardPropertyTask :: CertificationTask

-- | DoubleSatisfactionTask
NoLockedFundsTask :: CertificationTask
NoLockedFundsLightTask :: CertificationTask
CrashToleranceTask :: CertificationTask
WhitelistTask :: CertificationTask
DLTestsTask :: CertificationTask

-- | The list of certification tasks that will be run for a given
--   certification object.
certificationTasks :: Certification m -> [CertificationTask]
hasQuickCheckTests :: CertificationTask -> Bool
defaultCertificationOptions :: CertificationOptions
certify :: forall m. ContractModel m => Certification m -> IO (CertificationReport m)
certifyWithOptions :: forall m. ContractModel m => CertificationOptions -> Certification m -> IO (CertificationReport m)
instance GHC.Classes.Ord Plutus.Contract.Test.Certification.Run.CertificationTask
instance GHC.Enum.Bounded Plutus.Contract.Test.Certification.Run.CertificationTask
instance GHC.Enum.Enum Plutus.Contract.Test.Certification.Run.CertificationTask
instance GHC.Show.Show Plutus.Contract.Test.Certification.Run.CertificationTask
instance GHC.Classes.Eq Plutus.Contract.Test.Certification.Run.CertificationTask
instance GHC.Show.Show Plutus.Contract.Test.Certification.Run.CertificationEvent
instance GHC.Classes.Eq Plutus.Contract.Test.Certification.Run.CertificationEvent
instance Data.Aeson.Types.ToJSON.ToJSON Plutus.Contract.Test.Certification.Run.TastyResult
instance GHC.Generics.Generic Plutus.Contract.Test.Certification.Run.TastyResult
instance Data.Aeson.Types.ToJSON.ToJSON (Plutus.Contract.Test.Certification.Run.CertificationReport m)
instance GHC.Generics.Generic (Plutus.Contract.Test.Certification.Run.CertificationReport m)
instance GHC.Show.Show (Plutus.Contract.Test.Certification.Run.CertificationReport m)
instance Data.Aeson.Types.FromJSON.FromJSON System.Random.SplitMix.SMGen
instance Data.Aeson.Types.ToJSON.ToJSON System.Random.SplitMix.SMGen
instance Data.Aeson.Types.FromJSON.FromJSON Test.QuickCheck.Random.QCGen
instance Data.Aeson.Types.ToJSON.ToJSON Test.QuickCheck.Random.QCGen
instance GHC.Generics.Generic Test.QuickCheck.Test.Result
instance Data.Aeson.Types.ToJSON.ToJSON Test.QuickCheck.Test.Result
instance Data.Aeson.Types.FromJSON.FromJSON Test.QuickCheck.Test.Result
instance GHC.Generics.Generic Test.Tasty.Core.FailureReason
instance Data.Aeson.Types.ToJSON.ToJSON Test.Tasty.Core.FailureReason
instance Data.Aeson.Types.ToJSON.ToJSON Test.Tasty.Core.Outcome
instance Data.Aeson.Types.ToJSON.ToJSON Test.Tasty.Core.Result
instance GHC.Show.Show a => Data.Aeson.Types.ToJSON.ToJSON (Plutus.Contract.Test.Certification.Run.JSONShowRead a)
instance GHC.Read.Read a => Data.Aeson.Types.FromJSON.FromJSON (Plutus.Contract.Test.Certification.Run.JSONShowRead a)
instance Data.Aeson.Types.ToJSON.ToJSON GHC.Exception.Type.SomeException
instance Data.Aeson.Types.FromJSON.FromJSON GHC.Exception.Type.SomeException
