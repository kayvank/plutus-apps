-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | blockfrost.io basic client
--   
--   Simple Blockfrost clients for use with transformers or mtl
@package blockfrost-client
@version 0.4.0.1


-- | Client Types
module Blockfrost.Client.Types
type BlockfrostClient = BlockfrostClientT IO
data BlockfrostError
BlockfrostError :: Text -> BlockfrostError
BlockfrostBadRequest :: Text -> BlockfrostError
BlockfrostTokenMissing :: Text -> BlockfrostError
BlockfrostNotFound :: BlockfrostError
BlockfrostIPBanned :: BlockfrostError
BlockfrostUsageLimitReached :: BlockfrostError
BlockfrostFatal :: Text -> BlockfrostError
ServantClientError :: ClientError -> BlockfrostError
type ClientConfig = (ClientEnv, Project)

-- | Run <tt>BlockfrostClientT</tt> monad in <tt>IO</tt>, using provided
--   <tt>Project</tt>
runBlockfrost :: Project -> BlockfrostClientT IO a -> IO (Either BlockfrostError a)
apiClient :: MonadBlockfrost m => BlockfrostAPI (AsClientT m)
api0Client :: MonadBlockfrost m => Project -> BlockfrostV0API (AsClientT m)
commonClient :: MonadBlockfrost m => Project -> CommonAPI (AsClientT m)
cardanoClient :: MonadBlockfrost m => Project -> CardanoAPI (AsClientT m)
ipfsClient :: MonadBlockfrost m => Project -> IPFSAPI (AsClientT m)
nutLinkClient :: MonadBlockfrost m => Project -> NutLinkAPI (AsClientT m)
data Project
Project :: Env -> Text -> Project
[projectEnv] :: Project -> Env
[projectId] :: Project -> Text

-- | Pagination parameters
data Paged
Paged :: Int -> Int -> Paged

-- | Count of results per page
[countPerPage] :: Paged -> Int

-- | Page number
[pageNumber] :: Paged -> Int
data SortOrder
Ascending :: SortOrder
Descending :: SortOrder

-- | Helper
go :: MonadBlockfrost m => (Project -> m a) -> m a

-- | A type that specifies that an API record contains a client
--   implementation.
data AsClientT (m :: Type -> Type)

-- | Inverse of <a>toServant</a>.
--   
--   This can be used to turn <tt>generated</tt> values such as client
--   functions into records.
--   
--   You may need to provide a type signature for the <i>output</i> type
--   (your record type).
fromServant :: GenericServant routes mode => ToServant routes mode -> routes mode

-- | <a>MonadError</a> analogue to the <a>try</a> function.
tryError :: MonadError e m => m a -> m (Either e a)

-- | The default value for this type.
def :: Default a => a
newtype BlockfrostClientT m a
BlockfrostClientT :: ExceptT BlockfrostError (ReaderT ClientConfig m) a -> BlockfrostClientT m a
[unBlockfrostClientT] :: BlockfrostClientT m a -> ExceptT BlockfrostError (ReaderT ClientConfig m) a
class MonadIO m => MonadBlockfrost m
liftBlockfrostClient :: MonadBlockfrost m => ClientM a -> m a
getConf :: MonadBlockfrost m => m ClientConfig

-- | Run <tt>BlockfrostClientT</tt>, using provided <tt>Project</tt>
runBlockfrostClientT :: MonadIO m => Project -> BlockfrostClientT m a -> m (Either BlockfrostError a)

-- | Build default <a>ClientConfig</a> using BLOCKFROST_TOKEN_PATH
--   environment variable
newClientConfig :: MonadIO m => m ClientConfig
instance GHC.Base.Monad m => Control.Monad.Error.Class.MonadError Blockfrost.Client.Core.BlockfrostError (Blockfrost.Client.Types.BlockfrostClientT m)
instance GHC.Base.Monad m => Control.Monad.Reader.Class.MonadReader Blockfrost.Client.Types.ClientConfig (Blockfrost.Client.Types.BlockfrostClientT m)
instance Control.Monad.IO.Class.MonadIO m => Control.Monad.IO.Class.MonadIO (Blockfrost.Client.Types.BlockfrostClientT m)
instance GHC.Base.Monad m => GHC.Base.Monad (Blockfrost.Client.Types.BlockfrostClientT m)
instance GHC.Base.Monad m => GHC.Base.Applicative (Blockfrost.Client.Types.BlockfrostClientT m)
instance GHC.Base.Functor m => GHC.Base.Functor (Blockfrost.Client.Types.BlockfrostClientT m)
instance Control.Monad.IO.Class.MonadIO m => Blockfrost.Client.Types.MonadBlockfrost (Blockfrost.Client.Types.BlockfrostClientT m)
instance Blockfrost.Client.Types.MonadBlockfrost Servant.Client.Internal.HttpClient.ClientM
instance Blockfrost.Client.Types.MonadBlockfrost GHC.Types.IO


-- | Nut.link client functions
module Blockfrost.Client.NutLink

-- | List of records of a specific ticker
nutlinkAddressTickers :: MonadBlockfrost m => Address -> Text -> m [NutlinkTicker]

-- | List of records of a specific ticker Allows custom paging and ordering
--   using <tt>Paged</tt> and <tt>SortOrder</tt>.
nutlinkAddressTickers' :: MonadBlockfrost m => Address -> Text -> Paged -> SortOrder -> m [NutlinkTicker]

-- | List metadata about specific address
nutlinkListAddress :: MonadBlockfrost m => Address -> m NutlinkAddress

-- | List tickers for a specific metadata oracle
nutlinkListAddressTickers :: MonadBlockfrost m => Address -> m [NutlinkAddressTicker]

-- | List tickers for a specific metadata oracle Allows custom paging and
--   ordering using <tt>Paged</tt> and <tt>SortOrder</tt>.
nutlinkListAddressTickers' :: MonadBlockfrost m => Address -> Paged -> SortOrder -> m [NutlinkAddressTicker]

-- | List of records of a specific ticker
nutlinkTickers :: MonadBlockfrost m => Text -> m [(Address, NutlinkTicker)]

-- | List of records of a specific ticker Allows custom paging and ordering
--   using <tt>Paged</tt> and <tt>SortOrder</tt>.
nutlinkTickers' :: MonadBlockfrost m => Text -> Paged -> SortOrder -> m [(Address, NutlinkTicker)]


-- | IPFS client functions
module Blockfrost.Client.IPFS

-- | Add a file or directory to IPFS
ipfsAdd :: (MonadError BlockfrostError m, MonadBlockfrost m) => FilePath -> m IPFSAdd

-- | Fetch file via API
ipfsGateway :: MonadBlockfrost m => Text -> m IPFSData

-- | Get pinned object details
ipfsGetPin :: MonadBlockfrost m => Text -> m IPFSPin

-- | List objects pinned to local storage
ipfsListPins :: MonadBlockfrost m => m [IPFSPin]

-- | List objects pinned to local storage Allows custom paging and ordering
--   using <tt>Paged</tt> and <tt>SortOrder</tt>.
ipfsListPins' :: MonadBlockfrost m => Paged -> SortOrder -> m [IPFSPin]

-- | Pin an object
ipfsPin :: MonadBlockfrost m => Text -> m IPFSPinChange

-- | Remove pinned object from local storage
ipfsRemovePin :: MonadBlockfrost m => Text -> m IPFSPinChange


-- | Transaction queries
module Blockfrost.Client.Cardano.Transactions

-- | Get specific transaction
getTx :: MonadBlockfrost m => TxHash -> m Transaction

-- | Get transaction UTXOs
getTxUtxos :: MonadBlockfrost m => TxHash -> m TransactionUtxos

-- | Get transaction redeemers
getTxRedeemers :: MonadBlockfrost m => TxHash -> m [TransactionRedeemer]

-- | Get transaction UTXOs
getTxStakes :: MonadBlockfrost m => TxHash -> m [TransactionStake]

-- | Get transaction delegation certificates
getTxDelegations :: MonadBlockfrost m => TxHash -> m [TransactionDelegation]

-- | Get transaction withdrawals
getTxWithdrawals :: MonadBlockfrost m => TxHash -> m [TransactionWithdrawal]

-- | Get transaction MIRs (Move Instantaneous Rewards)
getTxMirs :: MonadBlockfrost m => TxHash -> m [TransactionMir]

-- | Get transaction stake pool registration and update certificates
getTxPoolUpdates :: MonadBlockfrost m => TxHash -> m [TransactionPoolUpdate]

-- | Get transaction stake pool retirement certificates
getTxPoolRetiring :: MonadBlockfrost m => TxHash -> m [TransactionPoolRetiring]

-- | Get transaction metadata in JSON
getTxMetadataJSON :: MonadBlockfrost m => TxHash -> m [TransactionMetaJSON]

-- | Get transaction metadata in CBOR
getTxMetadataCBOR :: MonadBlockfrost m => TxHash -> m [TransactionMetaCBOR]

-- | Submit an already serialized transaction to the network.
submitTx :: MonadBlockfrost m => CBORString -> m TxHash


-- | Script queries
module Blockfrost.Client.Cardano.Scripts

-- | List scripts
listScripts :: MonadBlockfrost m => m [ScriptHash]

-- | List scripts Allows custom paging and ordering using <tt>Paged</tt>
--   and <tt>SortOrder</tt>.
listScripts' :: MonadBlockfrost m => Paged -> SortOrder -> m [ScriptHash]

-- | Get specific script information
getScript :: MonadBlockfrost m => ScriptHash -> m Script

-- | Get redeemers of a specific script
getScriptRedeemers :: MonadBlockfrost m => ScriptHash -> m [ScriptRedeemer]

-- | Get redeemers of a specific script Allows custom paging and ordering
--   using <tt>Paged</tt> and <tt>SortOrder</tt>.
getScriptRedeemers' :: MonadBlockfrost m => ScriptHash -> Paged -> SortOrder -> m [ScriptRedeemer]

-- | Get specific datum
getScriptDatum :: MonadBlockfrost m => DatumHash -> m ScriptDatum

-- | Get a JSON representation of a <tt>timelock</tt> script
getScriptJSON :: MonadBlockfrost m => ScriptHash -> m ScriptJSON

-- | Get a CBOR representation of a <tt>plutus</tt> script
getScriptCBOR :: MonadBlockfrost m => ScriptHash -> m ScriptCBOR


-- | Pool queries
module Blockfrost.Client.Cardano.Pools

-- | List registered stake pools.
listPools :: MonadBlockfrost m => m [PoolId]

-- | List registered stake pools. Allows custom paging and ordering using
--   <tt>Paged</tt> and <tt>SortOrder</tt>.
listPools' :: MonadBlockfrost m => Paged -> SortOrder -> m [PoolId]

-- | List retired stake pools.
listRetiredPools :: MonadBlockfrost m => m [PoolEpoch]

-- | List retired stake pools. Allows custom paging and ordering using
--   <tt>Paged</tt> and <tt>SortOrder</tt>.
listRetiredPools' :: MonadBlockfrost m => Paged -> SortOrder -> m [PoolEpoch]

-- | List retiring stake pools.
listRetiringPools :: MonadBlockfrost m => m [PoolEpoch]

-- | List retiring stake pools. Allows custom paging and ordering using
--   <tt>Paged</tt> and <tt>SortOrder</tt>.
listRetiringPools' :: MonadBlockfrost m => Paged -> SortOrder -> m [PoolEpoch]

-- | Get specific stake pool information
getPool :: MonadBlockfrost m => PoolId -> m PoolInfo

-- | Get stake pool history
getPoolHistory :: MonadBlockfrost m => PoolId -> m [PoolHistory]

-- | Get stake pool history Allows custom paging and ordering using
--   <tt>Paged</tt> and <tt>SortOrder</tt>.
getPoolHistory' :: MonadBlockfrost m => PoolId -> Paged -> SortOrder -> m [PoolHistory]

-- | Get stake pool metadata
getPoolMetadata :: MonadBlockfrost m => PoolId -> m (Maybe PoolMetadata)

-- | Get stake pool relays
getPoolRelays :: MonadBlockfrost m => PoolId -> m [PoolRelay]

-- | Get stake pool delegators
getPoolDelegators :: MonadBlockfrost m => PoolId -> m [PoolDelegator]

-- | Get stake pool delegators Allows custom paging and ordering using
--   <tt>Paged</tt> and <tt>SortOrder</tt>.
getPoolDelegators' :: MonadBlockfrost m => PoolId -> Paged -> SortOrder -> m [PoolDelegator]

-- | Get stake pool blocks
getPoolBlocks :: MonadBlockfrost m => PoolId -> m [BlockHash]

-- | Get stake pool blocks Allows custom paging and ordering using
--   <tt>Paged</tt> and <tt>SortOrder</tt>.
getPoolBlocks' :: MonadBlockfrost m => PoolId -> Paged -> SortOrder -> m [BlockHash]

-- | Get stake pool updates
getPoolUpdates :: MonadBlockfrost m => PoolId -> m [PoolUpdate]

-- | Get stake pool updates Allows custom paging and ordering using
--   <tt>Paged</tt> and <tt>SortOrder</tt>.
getPoolUpdates' :: MonadBlockfrost m => PoolId -> Paged -> SortOrder -> m [PoolUpdate]


-- | Network queries
module Blockfrost.Client.Cardano.Network

-- | Get detailed network information.
getNetworkInfo :: MonadBlockfrost m => m Network


-- | Metadata queries
module Blockfrost.Client.Cardano.Metadata

-- | List of all used transaction metadata labels.
getTxMetadataLabels :: MonadBlockfrost m => m [TxMeta]

-- | List of all used transaction metadata labels. Allows custom paging and
--   ordering using <tt>Paged</tt> and <tt>SortOrder</tt>.
getTxMetadataLabels' :: MonadBlockfrost m => Paged -> SortOrder -> m [TxMeta]

-- | Transaction metadata per label (JSON <tt>Value</tt>)
getTxMetadataByLabelJSON :: MonadBlockfrost m => Text -> m [TxMetaJSON]

-- | Transaction metadata per label (JSON <tt>Value</tt>) Allows custom
--   paging and ordering using <tt>Paged</tt> and <tt>SortOrder</tt>.
getTxMetadataByLabelJSON' :: MonadBlockfrost m => Text -> Paged -> SortOrder -> m [TxMetaJSON]

-- | Transaction metadata per label (CBOR <tt>ByteString</tt>)
getTxMetadataByLabelCBOR :: MonadBlockfrost m => Text -> m [TxMetaCBOR]

-- | Transaction metadata per label (CBOR <tt>ByteString</tt>) Allows
--   custom paging and ordering using <tt>Paged</tt> and
--   <tt>SortOrder</tt>.
getTxMetadataByLabelCBOR' :: MonadBlockfrost m => Text -> Paged -> SortOrder -> m [TxMetaCBOR]


-- | Ledger queries
module Blockfrost.Client.Cardano.Ledger

-- | Get the information about blockchain genesis.
getLedgerGenesis :: MonadBlockfrost m => m Genesis


-- | Epoch queries
module Blockfrost.Client.Cardano.Epochs

-- | Get the information about the latest, therefore current, epoch.
getLatestEpoch :: MonadBlockfrost m => m EpochInfo

-- | Get the protocol parameters for the latest epoch.
getLatestEpochProtocolParams :: MonadBlockfrost m => m ProtocolParams

-- | Get the information about specific epoch.
getEpoch :: MonadBlockfrost m => Epoch -> m EpochInfo

-- | Return the list of epochs following a specific epoch.
getNextEpochs :: MonadBlockfrost m => Epoch -> m [EpochInfo]

-- | Return the list of epochs following a specific epoch. Allows custom
--   paging using <tt>Paged</tt>.
getNextEpochs' :: MonadBlockfrost m => Epoch -> Paged -> m [EpochInfo]

-- | Return the list of epochs preceding a specific epoch.
getPreviousEpochs :: MonadBlockfrost m => Epoch -> m [EpochInfo]

-- | Return the list of epochs preceding a specific epoch. Allows custom
--   paging using <tt>Paged</tt>.
getPreviousEpochs' :: MonadBlockfrost m => Epoch -> Paged -> m [EpochInfo]

-- | Return the active stake distribution for the specified epoch.
getEpochStake :: MonadBlockfrost m => Epoch -> m [StakeDistribution]

-- | Return the active stake distribution for the specified epoch. Allows
--   custom paging using <tt>Paged</tt>.
getEpochStake' :: MonadBlockfrost m => Epoch -> Paged -> m [StakeDistribution]

-- | Return the active stake distribution for the epoch specified by stake
--   pool.
getEpochStakeByPool :: MonadBlockfrost m => Epoch -> PoolId -> m [StakeDistribution]

-- | Return the active stake distribution for the epoch specified by stake
--   pool. Allows custom paging using <tt>Paged</tt>.
getEpochStakeByPool' :: MonadBlockfrost m => Epoch -> PoolId -> Paged -> m [StakeDistribution]

-- | Return the blocks minted for the epoch specified.
getEpochBlocks :: MonadBlockfrost m => Epoch -> m [BlockHash]

-- | Return the blocks minted for the epoch specified. Allows custom paging
--   and ordering using <tt>Paged</tt> and <tt>SortOrder</tt>.
getEpochBlocks' :: MonadBlockfrost m => Epoch -> Paged -> SortOrder -> m [BlockHash]

-- | Return the block minted for the epoch specified by stake pool.
getEpochBlocksByPool :: MonadBlockfrost m => Epoch -> PoolId -> m [BlockHash]

-- | Return the block minted for the epoch specified by stake pool. Allows
--   custom paging and ordering using <tt>Paged</tt> and
--   <tt>SortOrder</tt>.
getEpochBlocksByPool' :: MonadBlockfrost m => Epoch -> PoolId -> Paged -> SortOrder -> m [BlockHash]

-- | Return the protocol parameters for the specified epoch.
getEpochProtocolParams :: MonadBlockfrost m => Epoch -> m ProtocolParams


-- | Block queries
module Blockfrost.Client.Cardano.Blocks

-- | Return the latest block available to the backends, also known as the
--   tip of the blockchain.
getLatestBlock :: MonadBlockfrost m => m Block
getLatestBlockTxs :: MonadBlockfrost m => m [TxHash]

-- | Return the transactions within the latest block. Allows custom paging
--   and ordering using <tt>Paged</tt> and <tt>SortOrder</tt>.
getLatestBlockTxs' :: MonadBlockfrost m => Paged -> SortOrder -> m [TxHash]

-- | Return the content of a requested block.
getBlock :: MonadBlockfrost m => Either Integer BlockHash -> m Block

-- | Return the content of a requested block for a specific slot.
getBlockSlot :: MonadBlockfrost m => Slot -> m Block

-- | Return the content of a requested block for a specific slot in an
--   epoch.
getBlockEpochSlot :: MonadBlockfrost m => Epoch -> Slot -> m Block

-- | Return the list of blocks following a specific block.
getNextBlocks :: MonadBlockfrost m => Either Integer BlockHash -> m [Block]

-- | Return the list of blocks following a specific block. Allows custom
--   paging using <tt>Paged</tt>.
getNextBlocks' :: MonadBlockfrost m => Either Integer BlockHash -> Paged -> m [Block]

-- | Return the list of blocks preceding a specific block.
getPreviousBlocks :: MonadBlockfrost m => Either Integer BlockHash -> m [Block]

-- | Return the list of blocks preceding a specific block. Allows custom
--   paging using <tt>Paged</tt>.
getPreviousBlocks' :: MonadBlockfrost m => Either Integer BlockHash -> Paged -> m [Block]

-- | Return the transactions within the block.
getBlockTxs :: MonadBlockfrost m => Either Integer BlockHash -> m [TxHash]

-- | Return the transactions within the block. Allows custom paging and
--   ordering using <tt>Paged</tt> and <tt>SortOrder</tt>.
getBlockTxs' :: MonadBlockfrost m => Either Integer BlockHash -> Paged -> SortOrder -> m [TxHash]

-- | Return list of addresses affected in the specified block with
--   additional information, sorted by the bech32 address, ascending.
--   Allows custom paging using <tt>Paged</tt>.
getBlockAffectedAddresses' :: MonadBlockfrost m => Either Integer BlockHash -> Paged -> m [(Address, [TxHash])]

-- | Return list of addresses affected in the specified block with
--   additional information, sorted by the bech32 address, ascending.
getBlockAffectedAddresses :: MonadBlockfrost m => Either Integer BlockHash -> m [(Address, [TxHash])]


-- | Asset queries
module Blockfrost.Client.Cardano.Assets

-- | List all assets
getAssets :: MonadBlockfrost m => m [AssetInfo]

-- | List all assets Allows custom paging and ordering using <tt>Paged</tt>
--   and <tt>SortOrder</tt>.
getAssets' :: MonadBlockfrost m => Paged -> SortOrder -> m [AssetInfo]

-- | Information about a specific asset
getAssetDetails :: MonadBlockfrost m => AssetId -> m AssetDetails

-- | History of a specific asset
getAssetHistory :: MonadBlockfrost m => AssetId -> m [AssetHistory]

-- | History of a specific asset Allows custom paging and ordering using
--   <tt>Paged</tt> and <tt>SortOrder</tt>.
getAssetHistory' :: MonadBlockfrost m => AssetId -> Paged -> SortOrder -> m [AssetHistory]

-- | List of a specific asset transactions
getAssetTransactions :: MonadBlockfrost m => AssetId -> m [AssetTransaction]

-- | List of a specific asset transactions Allows custom paging and
--   ordering using <tt>Paged</tt> and <tt>SortOrder</tt>.
getAssetTransactions' :: MonadBlockfrost m => AssetId -> Paged -> SortOrder -> m [AssetTransaction]

-- | List of a addresses containing a specific asset
getAssetAddresses :: MonadBlockfrost m => AssetId -> m [AssetAddress]

-- | List of a addresses containing a specific asset Allows custom paging
--   and ordering using <tt>Paged</tt> and <tt>SortOrder</tt>.
getAssetAddresses' :: MonadBlockfrost m => AssetId -> Paged -> SortOrder -> m [AssetAddress]

-- | List of asset minted under a specific policy
getAssetsByPolicy :: MonadBlockfrost m => PolicyId -> m [AssetInfo]

-- | List of asset minted under a specific policy Allows custom paging and
--   ordering using <tt>Paged</tt> and <tt>SortOrder</tt>.
getAssetsByPolicy' :: MonadBlockfrost m => PolicyId -> Paged -> SortOrder -> m [AssetInfo]


-- | Address queries
module Blockfrost.Client.Cardano.Addresses

-- | Obtain information about a specific address.
getAddressInfo :: MonadBlockfrost m => Address -> m AddressInfo

-- | Obtain details about an address.
getAddressDetails :: MonadBlockfrost m => Address -> m AddressDetails

-- | UTXOs of the address.
getAddressUtxos :: MonadBlockfrost m => Address -> m [AddressUtxo]

-- | UTXOs of the address. Allows custom paging and ordering using
--   <tt>Paged</tt> and <tt>SortOrder</tt>.
getAddressUtxos' :: MonadBlockfrost m => Address -> Paged -> SortOrder -> m [AddressUtxo]

-- | UTXOs of the address containing specific asset.
getAddressUtxosAsset :: MonadBlockfrost m => Address -> AssetId -> m [AddressUtxo]

-- | UTXOs of the address containing specific asset. Allows custom paging
--   and ordering using <tt>Paged</tt> and <tt>SortOrder</tt>.
getAddressUtxosAsset' :: MonadBlockfrost m => Address -> AssetId -> Paged -> SortOrder -> m [AddressUtxo]

-- | Transactions on the address.
getAddressTransactions :: MonadBlockfrost m => Address -> m [AddressTransaction]

-- | Transactions on the address. Allows custom paging and ordering using
--   <tt>Paged</tt> and <tt>SortOrder</tt>. Also allows support for
--   limiting block ranges using <tt>from</tt>/<tt>to</tt>
--   <tt>BlockIndex</tt>es.
getAddressTransactions' :: MonadBlockfrost m => Address -> Paged -> SortOrder -> Maybe BlockIndex -> Maybe BlockIndex -> m [AddressTransaction]


-- | Account queries
module Blockfrost.Client.Cardano.Accounts

-- | Obtain information about a specific stake account.
getAccount :: MonadBlockfrost m => Address -> m AccountInfo

-- | Obtain information about the history of a specific account.
getAccountRewards :: MonadBlockfrost m => Address -> m [AccountReward]

-- | Obtain information about the history of a specific account. Allows
--   custom paging and ordering using <tt>Paged</tt> and
--   <tt>SortOrder</tt>.
getAccountRewards' :: MonadBlockfrost m => Address -> Paged -> SortOrder -> m [AccountReward]

-- | Obtain information about the history of a specific account.
getAccountHistory :: MonadBlockfrost m => Address -> m [AccountHistory]

-- | Obtain information about the history of a specific account. Allows
--   custom paging and ordering using <tt>Paged</tt> and
--   <tt>SortOrder</tt>.
getAccountHistory' :: MonadBlockfrost m => Address -> Paged -> SortOrder -> m [AccountHistory]

-- | Obtain information about the delegation of a specific account.
getAccountDelegations :: MonadBlockfrost m => Address -> m [AccountDelegation]

-- | Obtain information about the delegation of a specific account. Allows
--   custom paging and ordering using <tt>Paged</tt> and
--   <tt>SortOrder</tt>.
getAccountDelegations' :: MonadBlockfrost m => Address -> Paged -> SortOrder -> m [AccountDelegation]

-- | Obtain information about the registrations and deregistrations of a
--   specific account.
getAccountRegistrations :: MonadBlockfrost m => Address -> m [AccountRegistration]

-- | Obtain information about the registrations and deregistrations of a
--   specific account. Allows custom paging and ordering using
--   <tt>Paged</tt> and <tt>SortOrder</tt>.
getAccountRegistrations' :: MonadBlockfrost m => Address -> Paged -> SortOrder -> m [AccountRegistration]

-- | Obtain information about the withdrawals of a specific account.
getAccountWithdrawals :: MonadBlockfrost m => Address -> m [AccountWithdrawal]

-- | Obtain information about the withdrawals of a specific account. Allows
--   custom paging and ordering using <tt>Paged</tt> and
--   <tt>SortOrder</tt>.
getAccountWithdrawals' :: MonadBlockfrost m => Address -> Paged -> SortOrder -> m [AccountWithdrawal]

-- | Obtain information about the MIRs of a specific account.
getAccountMirs :: MonadBlockfrost m => Address -> m [AccountMir]

-- | Obtain information about the MIRs of a specific account. Allows custom
--   paging and ordering using <tt>Paged</tt> and <tt>SortOrder</tt>.
getAccountMirs' :: MonadBlockfrost m => Address -> Paged -> SortOrder -> m [AccountMir]

-- | Obtain information about the addresses of a specific account.
getAccountAssociatedAddresses :: MonadBlockfrost m => Address -> m [AddressAssociated]

-- | Obtain information about the addresses of a specific account. Allows
--   custom paging and ordering using <tt>Paged</tt> and
--   <tt>SortOrder</tt>.
getAccountAssociatedAddresses' :: MonadBlockfrost m => Address -> Paged -> SortOrder -> m [AddressAssociated]

-- | Obtain information about assets associated with addresses of a
--   specific account.
getAccountAssociatedAssets :: MonadBlockfrost m => Address -> m [Amount]

-- | Obtain information about assets associated with addresses of a
--   specific account. Allows custom paging and ordering using
--   <tt>Paged</tt> and <tt>SortOrder</tt>.
getAccountAssociatedAssets' :: MonadBlockfrost m => Address -> Paged -> SortOrder -> m [Amount]


-- | Blockfrost client
module Blockfrost.Client

-- | Root endpoint has no other function than to point end users to
--   documentation
getRoot :: MonadBlockfrost m => m URLVersion

-- | Return backend status. Your application should handle situations when
--   backend for the given chain is unavailable.
getHealth :: MonadBlockfrost m => m Healthy

-- | Get current backend time
getClock :: MonadBlockfrost m => m ServerTime

-- | Get Blockfrost usage metrics over last 30 days
getMetrics :: MonadBlockfrost m => m [Metric]

-- | Get Blockfrost endpoint usage metrics over last 30 days
getMetricsEndpoints :: MonadBlockfrost m => m [(Text, Metric)]

-- | Obtain information about a specific stake account.
getAccount :: MonadBlockfrost m => Address -> m AccountInfo

-- | Obtain information about the history of a specific account.
getAccountRewards :: MonadBlockfrost m => Address -> m [AccountReward]

-- | Obtain information about the history of a specific account. Allows
--   custom paging and ordering using <tt>Paged</tt> and
--   <tt>SortOrder</tt>.
getAccountRewards' :: MonadBlockfrost m => Address -> Paged -> SortOrder -> m [AccountReward]

-- | Obtain information about the history of a specific account.
getAccountHistory :: MonadBlockfrost m => Address -> m [AccountHistory]

-- | Obtain information about the history of a specific account. Allows
--   custom paging and ordering using <tt>Paged</tt> and
--   <tt>SortOrder</tt>.
getAccountHistory' :: MonadBlockfrost m => Address -> Paged -> SortOrder -> m [AccountHistory]

-- | Obtain information about the delegation of a specific account.
getAccountDelegations :: MonadBlockfrost m => Address -> m [AccountDelegation]

-- | Obtain information about the delegation of a specific account. Allows
--   custom paging and ordering using <tt>Paged</tt> and
--   <tt>SortOrder</tt>.
getAccountDelegations' :: MonadBlockfrost m => Address -> Paged -> SortOrder -> m [AccountDelegation]

-- | Obtain information about the registrations and deregistrations of a
--   specific account.
getAccountRegistrations :: MonadBlockfrost m => Address -> m [AccountRegistration]

-- | Obtain information about the registrations and deregistrations of a
--   specific account. Allows custom paging and ordering using
--   <tt>Paged</tt> and <tt>SortOrder</tt>.
getAccountRegistrations' :: MonadBlockfrost m => Address -> Paged -> SortOrder -> m [AccountRegistration]

-- | Obtain information about the withdrawals of a specific account.
getAccountWithdrawals :: MonadBlockfrost m => Address -> m [AccountWithdrawal]

-- | Obtain information about the withdrawals of a specific account. Allows
--   custom paging and ordering using <tt>Paged</tt> and
--   <tt>SortOrder</tt>.
getAccountWithdrawals' :: MonadBlockfrost m => Address -> Paged -> SortOrder -> m [AccountWithdrawal]

-- | Obtain information about the MIRs of a specific account.
getAccountMirs :: MonadBlockfrost m => Address -> m [AccountMir]

-- | Obtain information about the MIRs of a specific account. Allows custom
--   paging and ordering using <tt>Paged</tt> and <tt>SortOrder</tt>.
getAccountMirs' :: MonadBlockfrost m => Address -> Paged -> SortOrder -> m [AccountMir]

-- | Obtain information about the addresses of a specific account.
getAccountAssociatedAddresses :: MonadBlockfrost m => Address -> m [AddressAssociated]

-- | Obtain information about the addresses of a specific account. Allows
--   custom paging and ordering using <tt>Paged</tt> and
--   <tt>SortOrder</tt>.
getAccountAssociatedAddresses' :: MonadBlockfrost m => Address -> Paged -> SortOrder -> m [AddressAssociated]

-- | Obtain information about assets associated with addresses of a
--   specific account.
getAccountAssociatedAssets :: MonadBlockfrost m => Address -> m [Amount]

-- | Obtain information about assets associated with addresses of a
--   specific account. Allows custom paging and ordering using
--   <tt>Paged</tt> and <tt>SortOrder</tt>.
getAccountAssociatedAssets' :: MonadBlockfrost m => Address -> Paged -> SortOrder -> m [Amount]

-- | Obtain information about a specific address.
getAddressInfo :: MonadBlockfrost m => Address -> m AddressInfo

-- | Obtain details about an address.
getAddressDetails :: MonadBlockfrost m => Address -> m AddressDetails

-- | UTXOs of the address.
getAddressUtxos :: MonadBlockfrost m => Address -> m [AddressUtxo]

-- | UTXOs of the address. Allows custom paging and ordering using
--   <tt>Paged</tt> and <tt>SortOrder</tt>.
getAddressUtxos' :: MonadBlockfrost m => Address -> Paged -> SortOrder -> m [AddressUtxo]

-- | UTXOs of the address containing specific asset.
getAddressUtxosAsset :: MonadBlockfrost m => Address -> AssetId -> m [AddressUtxo]

-- | UTXOs of the address containing specific asset. Allows custom paging
--   and ordering using <tt>Paged</tt> and <tt>SortOrder</tt>.
getAddressUtxosAsset' :: MonadBlockfrost m => Address -> AssetId -> Paged -> SortOrder -> m [AddressUtxo]

-- | Transactions on the address.
getAddressTransactions :: MonadBlockfrost m => Address -> m [AddressTransaction]

-- | Transactions on the address. Allows custom paging and ordering using
--   <tt>Paged</tt> and <tt>SortOrder</tt>. Also allows support for
--   limiting block ranges using <tt>from</tt>/<tt>to</tt>
--   <tt>BlockIndex</tt>es.
getAddressTransactions' :: MonadBlockfrost m => Address -> Paged -> SortOrder -> Maybe BlockIndex -> Maybe BlockIndex -> m [AddressTransaction]

-- | List all assets
getAssets :: MonadBlockfrost m => m [AssetInfo]

-- | List all assets Allows custom paging and ordering using <tt>Paged</tt>
--   and <tt>SortOrder</tt>.
getAssets' :: MonadBlockfrost m => Paged -> SortOrder -> m [AssetInfo]

-- | Information about a specific asset
getAssetDetails :: MonadBlockfrost m => AssetId -> m AssetDetails

-- | History of a specific asset
getAssetHistory :: MonadBlockfrost m => AssetId -> m [AssetHistory]

-- | History of a specific asset Allows custom paging and ordering using
--   <tt>Paged</tt> and <tt>SortOrder</tt>.
getAssetHistory' :: MonadBlockfrost m => AssetId -> Paged -> SortOrder -> m [AssetHistory]

-- | List of a specific asset transactions
getAssetTransactions :: MonadBlockfrost m => AssetId -> m [AssetTransaction]

-- | List of a specific asset transactions Allows custom paging and
--   ordering using <tt>Paged</tt> and <tt>SortOrder</tt>.
getAssetTransactions' :: MonadBlockfrost m => AssetId -> Paged -> SortOrder -> m [AssetTransaction]

-- | List of a addresses containing a specific asset
getAssetAddresses :: MonadBlockfrost m => AssetId -> m [AssetAddress]

-- | List of a addresses containing a specific asset Allows custom paging
--   and ordering using <tt>Paged</tt> and <tt>SortOrder</tt>.
getAssetAddresses' :: MonadBlockfrost m => AssetId -> Paged -> SortOrder -> m [AssetAddress]

-- | List of asset minted under a specific policy
getAssetsByPolicy :: MonadBlockfrost m => PolicyId -> m [AssetInfo]

-- | List of asset minted under a specific policy Allows custom paging and
--   ordering using <tt>Paged</tt> and <tt>SortOrder</tt>.
getAssetsByPolicy' :: MonadBlockfrost m => PolicyId -> Paged -> SortOrder -> m [AssetInfo]

-- | Return the latest block available to the backends, also known as the
--   tip of the blockchain.
getLatestBlock :: MonadBlockfrost m => m Block
getLatestBlockTxs :: MonadBlockfrost m => m [TxHash]

-- | Return the transactions within the latest block. Allows custom paging
--   and ordering using <tt>Paged</tt> and <tt>SortOrder</tt>.
getLatestBlockTxs' :: MonadBlockfrost m => Paged -> SortOrder -> m [TxHash]

-- | Return the content of a requested block.
getBlock :: MonadBlockfrost m => Either Integer BlockHash -> m Block

-- | Return the content of a requested block for a specific slot.
getBlockSlot :: MonadBlockfrost m => Slot -> m Block

-- | Return the content of a requested block for a specific slot in an
--   epoch.
getBlockEpochSlot :: MonadBlockfrost m => Epoch -> Slot -> m Block

-- | Return the list of blocks following a specific block.
getNextBlocks :: MonadBlockfrost m => Either Integer BlockHash -> m [Block]

-- | Return the list of blocks following a specific block. Allows custom
--   paging using <tt>Paged</tt>.
getNextBlocks' :: MonadBlockfrost m => Either Integer BlockHash -> Paged -> m [Block]

-- | Return the list of blocks preceding a specific block.
getPreviousBlocks :: MonadBlockfrost m => Either Integer BlockHash -> m [Block]

-- | Return the list of blocks preceding a specific block. Allows custom
--   paging using <tt>Paged</tt>.
getPreviousBlocks' :: MonadBlockfrost m => Either Integer BlockHash -> Paged -> m [Block]

-- | Return the transactions within the block.
getBlockTxs :: MonadBlockfrost m => Either Integer BlockHash -> m [TxHash]

-- | Return the transactions within the block. Allows custom paging and
--   ordering using <tt>Paged</tt> and <tt>SortOrder</tt>.
getBlockTxs' :: MonadBlockfrost m => Either Integer BlockHash -> Paged -> SortOrder -> m [TxHash]

-- | Return list of addresses affected in the specified block with
--   additional information, sorted by the bech32 address, ascending.
--   Allows custom paging using <tt>Paged</tt>.
getBlockAffectedAddresses' :: MonadBlockfrost m => Either Integer BlockHash -> Paged -> m [(Address, [TxHash])]

-- | Return list of addresses affected in the specified block with
--   additional information, sorted by the bech32 address, ascending.
getBlockAffectedAddresses :: MonadBlockfrost m => Either Integer BlockHash -> m [(Address, [TxHash])]

-- | Get the information about the latest, therefore current, epoch.
getLatestEpoch :: MonadBlockfrost m => m EpochInfo

-- | Get the protocol parameters for the latest epoch.
getLatestEpochProtocolParams :: MonadBlockfrost m => m ProtocolParams

-- | Get the information about specific epoch.
getEpoch :: MonadBlockfrost m => Epoch -> m EpochInfo

-- | Return the list of epochs following a specific epoch.
getNextEpochs :: MonadBlockfrost m => Epoch -> m [EpochInfo]

-- | Return the list of epochs following a specific epoch. Allows custom
--   paging using <tt>Paged</tt>.
getNextEpochs' :: MonadBlockfrost m => Epoch -> Paged -> m [EpochInfo]

-- | Return the list of epochs preceding a specific epoch.
getPreviousEpochs :: MonadBlockfrost m => Epoch -> m [EpochInfo]

-- | Return the list of epochs preceding a specific epoch. Allows custom
--   paging using <tt>Paged</tt>.
getPreviousEpochs' :: MonadBlockfrost m => Epoch -> Paged -> m [EpochInfo]

-- | Return the active stake distribution for the specified epoch.
getEpochStake :: MonadBlockfrost m => Epoch -> m [StakeDistribution]

-- | Return the active stake distribution for the specified epoch. Allows
--   custom paging using <tt>Paged</tt>.
getEpochStake' :: MonadBlockfrost m => Epoch -> Paged -> m [StakeDistribution]

-- | Return the active stake distribution for the epoch specified by stake
--   pool.
getEpochStakeByPool :: MonadBlockfrost m => Epoch -> PoolId -> m [StakeDistribution]

-- | Return the active stake distribution for the epoch specified by stake
--   pool. Allows custom paging using <tt>Paged</tt>.
getEpochStakeByPool' :: MonadBlockfrost m => Epoch -> PoolId -> Paged -> m [StakeDistribution]

-- | Return the blocks minted for the epoch specified.
getEpochBlocks :: MonadBlockfrost m => Epoch -> m [BlockHash]

-- | Return the blocks minted for the epoch specified. Allows custom paging
--   and ordering using <tt>Paged</tt> and <tt>SortOrder</tt>.
getEpochBlocks' :: MonadBlockfrost m => Epoch -> Paged -> SortOrder -> m [BlockHash]

-- | Return the block minted for the epoch specified by stake pool.
getEpochBlocksByPool :: MonadBlockfrost m => Epoch -> PoolId -> m [BlockHash]

-- | Return the block minted for the epoch specified by stake pool. Allows
--   custom paging and ordering using <tt>Paged</tt> and
--   <tt>SortOrder</tt>.
getEpochBlocksByPool' :: MonadBlockfrost m => Epoch -> PoolId -> Paged -> SortOrder -> m [BlockHash]

-- | Return the protocol parameters for the specified epoch.
getEpochProtocolParams :: MonadBlockfrost m => Epoch -> m ProtocolParams

-- | Get the information about blockchain genesis.
getLedgerGenesis :: MonadBlockfrost m => m Genesis

-- | List of all used transaction metadata labels.
getTxMetadataLabels :: MonadBlockfrost m => m [TxMeta]

-- | List of all used transaction metadata labels. Allows custom paging and
--   ordering using <tt>Paged</tt> and <tt>SortOrder</tt>.
getTxMetadataLabels' :: MonadBlockfrost m => Paged -> SortOrder -> m [TxMeta]

-- | Transaction metadata per label (JSON <tt>Value</tt>)
getTxMetadataByLabelJSON :: MonadBlockfrost m => Text -> m [TxMetaJSON]

-- | Transaction metadata per label (JSON <tt>Value</tt>) Allows custom
--   paging and ordering using <tt>Paged</tt> and <tt>SortOrder</tt>.
getTxMetadataByLabelJSON' :: MonadBlockfrost m => Text -> Paged -> SortOrder -> m [TxMetaJSON]

-- | Transaction metadata per label (CBOR <tt>ByteString</tt>)
getTxMetadataByLabelCBOR :: MonadBlockfrost m => Text -> m [TxMetaCBOR]

-- | Transaction metadata per label (CBOR <tt>ByteString</tt>) Allows
--   custom paging and ordering using <tt>Paged</tt> and
--   <tt>SortOrder</tt>.
getTxMetadataByLabelCBOR' :: MonadBlockfrost m => Text -> Paged -> SortOrder -> m [TxMetaCBOR]

-- | Get detailed network information.
getNetworkInfo :: MonadBlockfrost m => m Network

-- | List registered stake pools.
listPools :: MonadBlockfrost m => m [PoolId]

-- | List registered stake pools. Allows custom paging and ordering using
--   <tt>Paged</tt> and <tt>SortOrder</tt>.
listPools' :: MonadBlockfrost m => Paged -> SortOrder -> m [PoolId]

-- | List retired stake pools.
listRetiredPools :: MonadBlockfrost m => m [PoolEpoch]

-- | List retired stake pools. Allows custom paging and ordering using
--   <tt>Paged</tt> and <tt>SortOrder</tt>.
listRetiredPools' :: MonadBlockfrost m => Paged -> SortOrder -> m [PoolEpoch]

-- | List retiring stake pools.
listRetiringPools :: MonadBlockfrost m => m [PoolEpoch]

-- | List retiring stake pools. Allows custom paging and ordering using
--   <tt>Paged</tt> and <tt>SortOrder</tt>.
listRetiringPools' :: MonadBlockfrost m => Paged -> SortOrder -> m [PoolEpoch]

-- | Get specific stake pool information
getPool :: MonadBlockfrost m => PoolId -> m PoolInfo

-- | Get stake pool history
getPoolHistory :: MonadBlockfrost m => PoolId -> m [PoolHistory]

-- | Get stake pool history Allows custom paging and ordering using
--   <tt>Paged</tt> and <tt>SortOrder</tt>.
getPoolHistory' :: MonadBlockfrost m => PoolId -> Paged -> SortOrder -> m [PoolHistory]

-- | Get stake pool metadata
getPoolMetadata :: MonadBlockfrost m => PoolId -> m (Maybe PoolMetadata)

-- | Get stake pool relays
getPoolRelays :: MonadBlockfrost m => PoolId -> m [PoolRelay]

-- | Get stake pool delegators
getPoolDelegators :: MonadBlockfrost m => PoolId -> m [PoolDelegator]

-- | Get stake pool delegators Allows custom paging and ordering using
--   <tt>Paged</tt> and <tt>SortOrder</tt>.
getPoolDelegators' :: MonadBlockfrost m => PoolId -> Paged -> SortOrder -> m [PoolDelegator]

-- | Get stake pool blocks
getPoolBlocks :: MonadBlockfrost m => PoolId -> m [BlockHash]

-- | Get stake pool blocks Allows custom paging and ordering using
--   <tt>Paged</tt> and <tt>SortOrder</tt>.
getPoolBlocks' :: MonadBlockfrost m => PoolId -> Paged -> SortOrder -> m [BlockHash]

-- | Get stake pool updates
getPoolUpdates :: MonadBlockfrost m => PoolId -> m [PoolUpdate]

-- | Get stake pool updates Allows custom paging and ordering using
--   <tt>Paged</tt> and <tt>SortOrder</tt>.
getPoolUpdates' :: MonadBlockfrost m => PoolId -> Paged -> SortOrder -> m [PoolUpdate]

-- | List scripts
listScripts :: MonadBlockfrost m => m [ScriptHash]

-- | List scripts Allows custom paging and ordering using <tt>Paged</tt>
--   and <tt>SortOrder</tt>.
listScripts' :: MonadBlockfrost m => Paged -> SortOrder -> m [ScriptHash]

-- | Get specific script information
getScript :: MonadBlockfrost m => ScriptHash -> m Script

-- | Get redeemers of a specific script
getScriptRedeemers :: MonadBlockfrost m => ScriptHash -> m [ScriptRedeemer]

-- | Get redeemers of a specific script Allows custom paging and ordering
--   using <tt>Paged</tt> and <tt>SortOrder</tt>.
getScriptRedeemers' :: MonadBlockfrost m => ScriptHash -> Paged -> SortOrder -> m [ScriptRedeemer]

-- | Get specific datum
getScriptDatum :: MonadBlockfrost m => DatumHash -> m ScriptDatum

-- | Get a JSON representation of a <tt>timelock</tt> script
getScriptJSON :: MonadBlockfrost m => ScriptHash -> m ScriptJSON

-- | Get a CBOR representation of a <tt>plutus</tt> script
getScriptCBOR :: MonadBlockfrost m => ScriptHash -> m ScriptCBOR

-- | Get specific transaction
getTx :: MonadBlockfrost m => TxHash -> m Transaction

-- | Get transaction UTXOs
getTxUtxos :: MonadBlockfrost m => TxHash -> m TransactionUtxos

-- | Get transaction UTXOs
getTxStakes :: MonadBlockfrost m => TxHash -> m [TransactionStake]

-- | Get transaction delegation certificates
getTxDelegations :: MonadBlockfrost m => TxHash -> m [TransactionDelegation]

-- | Get transaction withdrawals
getTxWithdrawals :: MonadBlockfrost m => TxHash -> m [TransactionWithdrawal]

-- | Get transaction MIRs (Move Instantaneous Rewards)
getTxMirs :: MonadBlockfrost m => TxHash -> m [TransactionMir]

-- | Get transaction stake pool registration and update certificates
getTxPoolUpdates :: MonadBlockfrost m => TxHash -> m [TransactionPoolUpdate]

-- | Get transaction stake pool retirement certificates
getTxPoolRetiring :: MonadBlockfrost m => TxHash -> m [TransactionPoolRetiring]

-- | Get transaction metadata in JSON
getTxMetadataJSON :: MonadBlockfrost m => TxHash -> m [TransactionMetaJSON]

-- | Get transaction metadata in CBOR
getTxMetadataCBOR :: MonadBlockfrost m => TxHash -> m [TransactionMetaCBOR]

-- | Get transaction redeemers
getTxRedeemers :: MonadBlockfrost m => TxHash -> m [TransactionRedeemer]

-- | Submit an already serialized transaction to the network.
submitTx :: MonadBlockfrost m => CBORString -> m TxHash

-- | Add a file or directory to IPFS
ipfsAdd :: (MonadError BlockfrostError m, MonadBlockfrost m) => FilePath -> m IPFSAdd

-- | Fetch file via API
ipfsGateway :: MonadBlockfrost m => Text -> m IPFSData

-- | Get pinned object details
ipfsGetPin :: MonadBlockfrost m => Text -> m IPFSPin

-- | List objects pinned to local storage
ipfsListPins :: MonadBlockfrost m => m [IPFSPin]

-- | List objects pinned to local storage Allows custom paging and ordering
--   using <tt>Paged</tt> and <tt>SortOrder</tt>.
ipfsListPins' :: MonadBlockfrost m => Paged -> SortOrder -> m [IPFSPin]

-- | Pin an object
ipfsPin :: MonadBlockfrost m => Text -> m IPFSPinChange

-- | Remove pinned object from local storage
ipfsRemovePin :: MonadBlockfrost m => Text -> m IPFSPinChange

-- | List metadata about specific address
nutlinkListAddress :: MonadBlockfrost m => Address -> m NutlinkAddress

-- | List tickers for a specific metadata oracle
nutlinkListAddressTickers :: MonadBlockfrost m => Address -> m [NutlinkAddressTicker]

-- | List tickers for a specific metadata oracle Allows custom paging and
--   ordering using <tt>Paged</tt> and <tt>SortOrder</tt>.
nutlinkListAddressTickers' :: MonadBlockfrost m => Address -> Paged -> SortOrder -> m [NutlinkAddressTicker]

-- | List of records of a specific ticker
nutlinkAddressTickers :: MonadBlockfrost m => Address -> Text -> m [NutlinkTicker]

-- | List of records of a specific ticker Allows custom paging and ordering
--   using <tt>Paged</tt> and <tt>SortOrder</tt>.
nutlinkAddressTickers' :: MonadBlockfrost m => Address -> Text -> Paged -> SortOrder -> m [NutlinkTicker]

-- | List of records of a specific ticker
nutlinkTickers :: MonadBlockfrost m => Text -> m [(Address, NutlinkTicker)]

-- | List of records of a specific ticker Allows custom paging and ordering
--   using <tt>Paged</tt> and <tt>SortOrder</tt>.
nutlinkTickers' :: MonadBlockfrost m => Text -> Paged -> SortOrder -> m [(Address, NutlinkTicker)]
