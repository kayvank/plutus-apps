-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Test helpers from cardano-ledger exposed to other packages
--   
--   Test helpers from cardano-ledger exposed to other packages
@package cardano-ledger-byron-test
@version 1.3.0


-- | Module containing the imports needed to test that a given abstract
--   trace passes the concrete validation. This is useful when debugging
--   counterexamples.
--   
--   Usage from the ghci repl:
--   
--   <pre>
--   import Hedgehog
--   Hedgehog.check $ property $ passConcreteValidation trace0
--   </pre>
--   
--   Replace <tt>trace0</tt> by the trace under analysis.
module Test.Cardano.Chain.Block.Model.Examples

-- | A trace example. When debugging conformance tests you can add such a
--   trace, and use it in the repl. <b>NOTE</b>: Do not commit such trace.
trace0 :: Trace CHAIN

module Test.Cardano.Chain.Common.Example
exampleAddress :: Address
exampleAddress1 :: Address
exampleAddress2 :: Address
exampleAddress3 :: Address
exampleAddress4 :: Address
exampleAttributes :: Attributes ()
exampleAddrSpendingData_VerKey :: AddrSpendingData
exampleChainDifficulty :: ChainDifficulty
exampleKeyHash :: KeyHash

module Test.Cardano.Chain.Common.Gen
genAddrAttributes :: Gen AddrAttributes
genAddrAttributesWithNM :: NetworkMagic -> Gen AddrAttributes
genAddress :: Gen Address
genAddressWithNM :: NetworkMagic -> Gen Address
genAddrType :: Gen AddrType
genAddrSpendingData :: Gen AddrSpendingData
genAttributes :: Gen a -> Gen (Attributes a)
genBlockCount :: Gen BlockCount
genCanonicalTxFeePolicy :: Gen TxFeePolicy
genChainDifficulty :: Gen ChainDifficulty
genCompactAddress :: Gen CompactAddress
genCustomLovelace :: Word64 -> Gen Lovelace
genLovelace :: Gen Lovelace
genLovelaceError :: Gen LovelaceError
genLovelaceWithRange :: Range Word64 -> Gen Lovelace
genLovelacePortion :: Gen LovelacePortion
genMerkleRoot :: ToCBOR a => Gen a -> Gen (MerkleRoot a)
genMerkleTree :: ToCBOR a => Gen a -> Gen (MerkleTree a)
genNetworkMagic :: Gen NetworkMagic
genScriptVersion :: Gen Word16
genKeyHash :: Gen KeyHash
genTxFeePolicy :: Gen TxFeePolicy
genTxSizeLinear :: Gen TxSizeLinear

module Test.Cardano.Chain.Config

-- | Read the test mainnet configuration file from the <tt>test</tt>
--   directory.
--   
--   An error is thrown if it is not possible to elaborate a genesis
--   configuration from the genesis file.
--   
--   We use <a>RequiresNoMagic</a>, as it indicates mainnet
readMainetCfg :: MonadIO m => m Config

module Test.Cardano.Chain.Delegation.Example
exampleCertificates :: [Certificate]

module Test.Cardano.Chain.Elaboration.Keys
elaborateKeyPair :: KeyPair -> (VerificationKey, SigningKey)
elaborateVKey :: VKey -> VerificationKey
elaborateVKeyGenesis :: VKeyGenesis -> VerificationKey
elaborateVKeyGenesisHash :: VKeyGenesis -> KeyHash
vKeyPair :: VKey -> KeyPair
vKeyToSKey :: VKey -> SigningKey
vKeyToSafeSigner :: VKey -> SafeSigner

module Test.Cardano.Chain.Genesis.Dummy
dummyConfig :: Config
dummyK :: BlockCount
dummyEpochSlots :: EpochSlots
dummySlotSecurityParam :: SlotCount
dummyGenesisInitializer :: GenesisInitializer
dummyGenesisAvvmBalances :: GenesisAvvmBalances
dummyGeneratedSecrets :: GeneratedSecrets
dummyGenesisSigningKeys :: [SigningKey]
dummyGenesisSigningKeysRich :: [SigningKey]
dummyGenesisSigningKeysPoor :: [SigningKey]
dummyGenesisSecretsRich :: [SigningKey]
dummyGenesisSecretsPoor :: [PoorSecret]
dummyGenesisSpec :: GenesisSpec
dummyProtocolParameters :: ProtocolParameters
dummyGenesisData :: GenesisData
dummyGenesisHash :: GenesisHash

module Test.Cardano.Chain.Elaboration.Update
elaboratePParams :: PParams -> ProtocolParameters
elaborateProtocolVersion :: ProtVer -> ProtocolVersion
elaborateSoftwareVersion :: SwVer -> SoftwareVersion
elaborateUpdateProposal :: ProtocolMagicId -> UProp -> AProposal ()
elaborateVote :: ProtocolMagicId -> Map UpId UpId -> Vote -> AVote ()

module Test.Cardano.Chain.Elaboration.UTxO
elaborateUTxOEnv :: UTxOEnv -> Environment
elaborateUTxO :: (TxId -> TxId) -> UTxO -> UTxO
elaborateTxBody :: (TxId -> TxId) -> TxBody -> Tx
elaborateTxBS :: (TxId -> TxId) -> Tx -> ATxAux ByteString
elaborateTxOut :: TxOut -> TxOut

module Test.Cardano.Chain.Slotting.Example
exampleEpochNumber :: EpochNumber
exampleEpochAndSlotCount :: EpochAndSlotCount
exampleSlotNumber :: EpochSlots -> SlotNumber

module Test.Cardano.Chain.Slotting.Gen
genEpochNumber :: Gen EpochNumber
genSlotNumber :: Gen SlotNumber

-- | Generator for slots-per-epoch. This will generate a positive number of
--   slots per-epoch, and it will have an upper bound of <tt>maxBound ::
--   Word16 = 2^16</tt>. The reason for this upper bound is that when
--   converting a slot number (which is an absolute value) to a pair of
--   epoch and slot-count, this slot-count, which represents a local index
--   of a slot within the epoch and is represented using a <a>Word16</a>,
--   is calculated taking the reminder of dividing the slot number by the
--   number of slots-per-epoch (<a>EpochSlots</a>). So if the generated
--   epoch would be greater than <tt>2^16</tt> we couldn't guarantee that
--   the local-index would fit inside its representation.
genEpochSlots :: Gen EpochSlots

-- | Generate a value wrapped on a <a>WithEpochSlots</a> context, using the
--   given generator functions, and its arguments
genWithEpochSlots :: (ProtocolMagicId -> EpochSlots -> Gen a) -> ProtocolMagicId -> EpochSlots -> Gen (WithEpochSlots a)
genSlotCount :: Gen SlotCount
genEpochAndSlotCount :: EpochSlots -> Gen EpochAndSlotCount
genConsistentEpochAndSlotCountEpochSlots :: Gen (EpochAndSlotCount, EpochSlots)
feedPMEpochSlots :: (ProtocolMagicId -> EpochSlots -> Gen a) -> Gen a

module Test.Cardano.Chain.Delegation.Gen
genCanonicalCertificate :: ProtocolMagicId -> Gen Certificate
genCertificate :: ProtocolMagicId -> Gen Certificate
genCanonicalCertificateDistinctList :: ProtocolMagicId -> Gen [Certificate]
genCertificateDistinctList :: ProtocolMagicId -> Gen [Certificate]
genError :: Gen Error
genPayload :: ProtocolMagicId -> Gen Payload

module Test.Cardano.Chain.Delegation.Certificate
tests :: Group

module Test.Cardano.Chain.UTxO.Example
exampleTxAux :: TxAux
exampleTxAux1 :: TxAux
exampleTxId :: TxId
exampleTxInList :: NonEmpty TxIn
exampleTxInUtxo :: TxIn
exampleTxPayload :: TxPayload
exampleTxPayload1 :: TxPayload
exampleTxProof :: TxProof
exampleTxOut :: TxOut
exampleTxOut1 :: TxOut
exampleTxOutList :: NonEmpty TxOut
exampleTxSig :: TxSig
exampleTxSigData :: TxSigData
exampleTxWitness :: TxWitness
exampleRedeemSignature :: RedeemSignature TxSigData
exampleHashTx :: Hash Tx

module Test.Cardano.Chain.UTxO.Gen
genCompactTxId :: Gen CompactTxId
genCompactTxIn :: Gen CompactTxIn
genCompactTxOut :: Gen CompactTxOut
genVKWitness :: ProtocolMagicId -> Gen TxInWitness
genRedeemWitness :: ProtocolMagicId -> Gen TxInWitness
genTx :: Gen Tx
genTxAttributes :: Gen TxAttributes
genTxAux :: ProtocolMagicId -> Gen TxAux
genTxHash :: Gen (Hash Tx)
genTxId :: Gen TxId
genTxIn :: Gen TxIn
genTxInList :: Gen (NonEmpty TxIn)
genTxInWitness :: ProtocolMagicId -> Gen TxInWitness
genTxOut :: Gen TxOut
genTxOutList :: Gen (NonEmpty TxOut)
genTxPayload :: ProtocolMagicId -> Gen TxPayload
genUTxOConfiguration :: Gen UTxOConfiguration
genTxProof :: ProtocolMagicId -> Gen TxProof
genTxSig :: ProtocolMagicId -> Gen TxSig
genTxSigData :: Gen TxSigData
genTxValidationError :: Gen TxValidationError
genTxWitness :: ProtocolMagicId -> Gen TxWitness
genUTxO :: Gen UTxO
genUTxOError :: Gen UTxOError
genUTxOValidationError :: Gen UTxOValidationError

module Test.Cardano.Chain.Update.Example
exampleApplicationName :: ApplicationName
exampleProtocolVersion :: ProtocolVersion
exampleProtocolParameters :: ProtocolParameters
exampleProtocolParametersUpdate :: ProtocolParametersUpdate
exampleSoftwareVersion :: SoftwareVersion
exampleSystemTag :: SystemTag
exampleInstallerHash :: InstallerHash
examplePayload :: Payload
exampleProof :: Proof
exampleProposal :: Proposal
exampleProposalBody :: ProposalBody
exampleUpId :: UpId
exampleVote :: Vote

module Test.Cardano.Chain.MempoolPayload.Example
exampleMempoolPayload :: MempoolPayload
exampleMempoolPayload1 :: MempoolPayload
exampleMempoolPayload2 :: MempoolPayload
exampleMempoolPayload3 :: MempoolPayload

module Test.Cardano.Chain.Genesis.Example
exampleGenesisAvvmBalances :: GenesisAvvmBalances
exampleGenesisData0 :: GenesisData
exampleGenesisDelegation :: GenesisDelegation
exampleGenesisInitializer :: GenesisInitializer
exampleGenesisSpec :: GenesisSpec

module Test.Cardano.Chain.Update.Gen
genCanonicalProtocolParameters :: Gen ProtocolParameters
genApplicationName :: Gen ApplicationName
genError :: ProtocolMagicId -> Gen Error
genProtocolVersion :: Gen ProtocolVersion
genProtocolParameters :: Gen ProtocolParameters
genProtocolParametersUpdate :: Gen ProtocolParametersUpdate
genSoftforkRule :: Gen SoftforkRule
genSoftwareVersion :: Gen SoftwareVersion
genSystemTag :: Gen SystemTag
genInstallerHash :: Gen InstallerHash
genPayload :: ProtocolMagicId -> Gen Payload
genProof :: ProtocolMagicId -> Gen Proof
genProposal :: ProtocolMagicId -> Gen Proposal
genProposalBody :: Gen ProposalBody
genUpId :: ProtocolMagicId -> Gen UpId
genUpsData :: Gen (Map SystemTag InstallerHash)
genVote :: ProtocolMagicId -> Gen Vote

module Test.Cardano.Chain.MempoolPayload.Gen
genMempoolPayload :: ProtocolMagicId -> Gen MempoolPayload

module Test.Cardano.Chain.Genesis.Gen
genCanonicalGenesisData :: ProtocolMagicId -> Gen GenesisData
genCanonicalGenesisDelegation :: ProtocolMagicId -> Gen GenesisDelegation
genGenesisData :: ProtocolMagicId -> Gen GenesisData
genGenesisHash :: Gen GenesisHash
genConfig :: ProtocolMagicId -> Gen Config
genFakeAvvmOptions :: Gen FakeAvvmOptions
genGenesisAvvmBalances :: Gen GenesisAvvmBalances
genGenesisDelegation :: ProtocolMagicId -> Gen GenesisDelegation
genGenesisInitializer :: Gen GenesisInitializer
genGenesisNonAvvmBalances :: Gen GenesisNonAvvmBalances
genGenesisSpec :: ProtocolMagicId -> Gen GenesisSpec
genGenesisKeyHashes :: Gen GenesisKeyHashes
genSignatureEpochNumber :: Gen (Signature EpochNumber)
genTestnetBalanceOptions :: Gen TestnetBalanceOptions

module Test.Cardano.Chain.Block.Gen
genBlockSignature :: ProtocolMagicId -> EpochSlots -> Gen BlockSignature
genHeaderHash :: Gen HeaderHash
genHeader :: ProtocolMagicId -> EpochSlots -> Gen Header
genBody :: ProtocolMagicId -> Gen Body
genProof :: ProtocolMagicId -> Gen Proof
genToSign :: ProtocolMagicId -> EpochSlots -> Gen ToSign
genBlock :: ProtocolMagicId -> EpochSlots -> Gen Block
genBlockWithEpochSlots :: ProtocolMagicId -> Gen (WithEpochSlots Block)
genBoundaryBlock :: Gen (ABoundaryBlock ())
genBoundaryHeader :: Gen (ABoundaryHeader ())
genABlockOrBoundaryHdr :: ProtocolMagicId -> EpochSlots -> Gen (ABlockOrBoundaryHdr ByteString)

module Test.Cardano.Mirror
mainnetEpochFiles :: IO [FilePath]

module Test.Cardano.Chain.Epoch.File
tests :: Group

module Test.Options
data TestScenario
ContinuousIntegration :: TestScenario
Development :: TestScenario
QualityAssurance :: TestScenario
mainWithTestScenario :: TestTree -> IO ()

-- | Multiply the default scenario values by a scalar
scenarioScaled :: TestLimit -> TestScenario -> TestLimit

-- | Return an Int number of tests, using the above-defined defaults
scenarioScaleDefault :: TestScenario -> Ratio TestLimit

-- | A modified <a>eachOf</a> which uses the default TestScenario values,
--   multiplied by a scalar
eachOfTS :: (Show a, HasCallStack) => TestLimit -> Gen a -> (a -> PropertyT IO ()) -> TestScenario -> Property

-- | A modified <a>withTests</a> which uses the default TestScenario
--   values, multiplied by a scalar
withTestsTS :: TestLimit -> Property -> TestScenario -> Property

-- | Convenient alias for TestScenario-dependent <tt>Property</tt>s
type TSProperty = TestScenario -> Property

-- | Convenient alias for TestScenario-dependent <tt>Group</tt>s
type TSGroup = TestScenario -> Group
concatGroups :: [Group] -> Group
concatTSGroups :: [TSGroup] -> TSGroup
tsGroupToTree :: TSGroup -> TestTree
data ShouldAssertNF
AssertNF :: ShouldAssertNF
NoAssertNF :: ShouldAssertNF
instance GHC.Show.Show Test.Options.TestScenario
instance GHC.Read.Read Test.Options.TestScenario
instance GHC.Show.Show Test.Options.ShouldAssertNF
instance GHC.Classes.Eq Test.Options.ShouldAssertNF
instance Test.Tasty.Options.IsOption Test.Options.TestScenario

module Test.Cardano.Chain.Update.Properties
tests :: TSGroup

module Test.Cardano.Chain.Update.CBOR
tests :: TSGroup

module Test.Cardano.Chain.UTxO.Model
tests :: TSGroup

-- | Elaborate a single transaction, apply it to the UTxO, and update the
--   TxId map with the new concrete TxId
elaborateAndUpdate :: UTxOEnv -> (UTxO, Map TxId TxId) -> Tx -> Either UTxOValidationError (UTxO, Map TxId TxId)

-- | Create the initial concrete UTxO by elaborating the outputs and
--   updating the map from abstract TxIds to concrete TxIds
elaborateInitialUTxO :: UTxO -> (UTxO, Map TxId TxId)
elaborateTxWitnesses :: Map TxId TxId -> [Tx] -> ([ATxAux ByteString], Map TxId TxId)
elaborateTxWitsBSWithMap :: Map TxId TxId -> Tx -> (ATxAux ByteString, Map TxId TxId)

module Test.Cardano.Chain.UTxO.ValidationMode
tests :: TSGroup
instance GHC.Show.Show Test.Cardano.Chain.UTxO.ValidationMode.PParamsAddrsAndUTxO

module Test.Cardano.Chain.UTxO.Compact
tests :: TSGroup

module Test.Cardano.Chain.UTxO.CBOR
tests :: TSGroup

module Test.Cardano.Chain.Ssc.CBOR
tests :: Group

module Test.Cardano.Chain.Slotting.Properties
tests :: TSGroup

module Test.Cardano.Chain.Slotting.CBOR
tests :: TSGroup

module Test.Cardano.Chain.MempoolPayload.CBOR
tests :: TSGroup

module Test.Cardano.Chain.Genesis.Json
tests :: TSGroup

module Test.Cardano.Chain.Genesis.CBOR
tests :: TSGroup

module Test.Cardano.Chain.Elaboration.Delegation
elaborateDCert :: ProtocolMagicId -> DCert -> Certificate
elaborateDCertAnnotated :: ProtocolMagicId -> DCert -> ACertificate ByteString
elaborateDSEnv :: DSEnv -> Environment
tests :: TSGroup


-- | This module provides functionality for translating abstract blocks
--   into concrete blocks. The abstract blocks are generated according the
--   small-step rules for the blockchain (also called the blockchain
--   specification).
module Test.Cardano.Chain.Elaboration.Block

-- | Make a genesis configuration from an initial abstract environment of
--   the trace.
abEnvToCfg :: Environment CHAIN -> Config

-- | Elaborate an abstract block into a concrete block (without
--   annotations).
elaborate :: AbstractToConcreteIdMaps -> Config -> DCert -> ChainValidationState -> Block -> (Block, AbstractToConcreteIdMaps)
elaborateBS :: AbstractToConcreteIdMaps -> Config -> DCert -> ChainValidationState -> Block -> (ABlock ByteString, AbstractToConcreteIdMaps)

-- | Re-construct an abstract delegation certificate from the abstract
--   state.
--   
--   We need to do this because the delegation certificate is included in
--   the block.
rcDCert :: HasCallStack => VKey -> BlockCount -> State CHAIN -> DCert
data AbstractToConcreteIdMaps
AbstractToConcreteIdMaps :: !Map TxId TxId -> !Map UpId UpId -> AbstractToConcreteIdMaps
[transactionIds] :: AbstractToConcreteIdMaps -> !Map TxId TxId
[proposalIds] :: AbstractToConcreteIdMaps -> !Map UpId UpId
instance GHC.Base.Monoid Test.Cardano.Chain.Elaboration.Block.AbstractToConcreteIdMaps
instance GHC.Base.Semigroup Test.Cardano.Chain.Elaboration.Block.AbstractToConcreteIdMaps
instance GHC.Generics.Generic Test.Cardano.Chain.Elaboration.Block.AbstractToConcreteIdMaps
instance GHC.Show.Show Test.Cardano.Chain.Elaboration.Block.AbstractToConcreteIdMaps
instance GHC.Classes.Eq Test.Cardano.Chain.Elaboration.Block.AbstractToConcreteIdMaps

module Test.Cardano.Chain.Delegation.Model
tests :: Group
instance GHC.Show.Show (Test.Cardano.Chain.Delegation.Model.SignalSDELEG v)
instance Barbies.Internal.FunctorB.FunctorB Test.Cardano.Chain.Delegation.Model.SignalSDELEG
instance Barbies.Internal.TraversableB.TraversableB Test.Cardano.Chain.Delegation.Model.SignalSDELEG

module Test.Cardano.Chain.Delegation.CBOR
tests :: TSGroup

module Test.Cardano.Chain.Common.Lovelace
tests :: TSGroup

module Test.Cardano.Chain.Common.Compact
tests :: TSGroup

module Test.Cardano.Chain.Common.CBOR
tests :: TSGroup

module Test.Cardano.Chain.Common.Address
tests :: TSGroup

module Test.Cardano.Chain.Buildable
tests :: TSGroup

module Test.Cardano.Chain.Block.ValidationMode
tests :: TSGroup

module Test.Cardano.Chain.Block.Validation

-- | These tests perform chain validation over mainnet epoch files
tests :: ShouldAssertNF -> TSGroup
instance GHC.Show.Show Test.Cardano.Chain.Block.Validation.Error
instance GHC.Classes.Eq Test.Cardano.Chain.Block.Validation.Error


-- | Test module where we check that the block validation implementation
--   matches the formal specification. To this end, the strategy is:
--   
--   <ol>
--   <li>generate traces of abstract blocks, which conform to the formal
--   semantics of the blockchain layer</li>
--   <li>elaborate these abstract blocks into concrete blocks</li>
--   <li>feed the generated sequence of concrete blocks to the block
--   validation function, and check that it passes the validation.</li>
--   </ol>
module Test.Cardano.Chain.Block.Model
tests :: TSGroup

-- | Elaborate an abstract signal into a concrete one, and apply the
--   validators to the elaborated signal and given concrete state. If the
--   signal was validated, return the next state. Otherwise return an
--   error.
elaborateAndUpdate :: Config -> (ChainValidationState, AbstractToConcreteIdMaps) -> (State CHAIN, Block) -> Either ChainValidationError (ChainValidationState, AbstractToConcreteIdMaps)
passConcreteValidation :: MonadTest m => Trace CHAIN -> m ()
elaborateBlock :: Config -> ChainValidationState -> AbstractToConcreteIdMaps -> State CHAIN -> Block -> ABlock ByteString

module Test.Cardano.Chain.Byron.API
genApplyMempoolPayloadErr :: ProtocolMagicId -> Gen ApplyMempoolPayloadErr

-- | A transaction should validate in the mempool at a given slot when it
--   validates in a block issued for that same slot.
ts_mempoolValidation :: TSProperty
ts_roundTripApplyMempoolPayloadErrCompat :: TSProperty

-- | getDelegationMap . applyChainTick slot == previewDelegationMap slot
ts_scheduledDelegations :: TSProperty
tests :: TSGroup

module Test.Cardano.Chain.Block.CBOR
tests :: TSGroup
exampleBlockSignature :: BlockSignature
exampleBody :: Body
exampleHeader :: Header
exampleProof :: Proof
exampleToSign :: ToSign
