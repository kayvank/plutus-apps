-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | blockfrost.io common client definitions / instances
--   
--   HasClient for our auth
@package blockfrost-client-core
@version 0.4.0.2


-- | Blockfrost authentication scheme instance for HasClient
module Blockfrost.Client.Auth
data Project
instance (Servant.Client.Core.HasClient.HasClient m api, GHC.TypeLits.KnownSymbol sym) => Servant.Client.Core.HasClient.HasClient m (Blockfrost.Auth.ProjectAuth '[Blockfrost.Auth.APIKeyInHeader sym] a Servant.API.Sub.:> api)


-- | Pagination instance for HasClient
module Blockfrost.Client.Pagination

-- | Pagination parameters
data Paged
Paged :: Int -> Int -> Paged

-- | Count of results per page
[countPerPage] :: Paged -> Int

-- | Page number
[pageNumber] :: Paged -> Int

-- | Default <a>Paged</a> at specific page number
page :: Int -> Paged

-- | Construct <a>Paged</a> from page size and page number.
--   
--   Throws error on invalid values.
paged :: Int -> Int -> Paged

-- | Increment page number
nextPage :: Paged -> Paged

-- | Query all results, until we get less than maximum items per page.
allPages :: Monad m => (Paged -> m [a]) -> m [a]
instance Servant.Client.Core.HasClient.HasClient m subApi => Servant.Client.Core.HasClient.HasClient m (Blockfrost.Util.Pagination.Pagination Servant.API.Sub.:> subApi)


-- | Sorting instance for HasClient
module Blockfrost.Client.Sorting
data SortOrder
Ascending :: SortOrder
Descending :: SortOrder

-- | <tt>Ascending</tt> shortcut
asc :: SortOrder

-- | <tt>Descending</tt> shortcut
desc :: SortOrder
instance Servant.Client.Core.HasClient.HasClient m subApi => Servant.Client.Core.HasClient.HasClient m (Blockfrost.Util.Sorting.Sorting Servant.API.Sub.:> subApi)


-- | Tag instance for HasClient
module Blockfrost.Client.Tag
instance Servant.Client.Core.HasClient.HasClient m subApi => Servant.Client.Core.HasClient.HasClient m (Blockfrost.Util.Tag.Tag name Servant.API.Sub.:> subApi)


-- | Blockfrost client version via user agent header
module Blockfrost.Client.UserAgent
instance Servant.Client.Core.HasClient.HasClient m api => Servant.Client.Core.HasClient.HasClient m (Blockfrost.Util.UserAgent.UserAgent Servant.API.Sub.:> api)


-- | Core shared by clients
module Blockfrost.Client.Core
data BlockfrostError
BlockfrostError :: Text -> BlockfrostError
BlockfrostBadRequest :: Text -> BlockfrostError
BlockfrostTokenMissing :: Text -> BlockfrostError
BlockfrostNotFound :: BlockfrostError
BlockfrostIPBanned :: BlockfrostError
BlockfrostUsageLimitReached :: BlockfrostError
BlockfrostFatal :: Text -> BlockfrostError
ServantClientError :: ClientError -> BlockfrostError

-- | Pagination parameters
data Paged
Paged :: Int -> Int -> Paged

-- | Count of results per page
[countPerPage] :: Paged -> Int

-- | Page number
[pageNumber] :: Paged -> Int
data SortOrder
Ascending :: SortOrder
Descending :: SortOrder

-- | <tt>Ascending</tt> shortcut
asc :: SortOrder

-- | The default value for this type.
def :: Default a => a

-- | <tt>Descending</tt> shortcut
desc :: SortOrder
fromServantClientError :: ClientError -> BlockfrostError
newEnvByProject :: Project -> IO ClientEnv

-- | Default <a>Paged</a> at specific page number
page :: Int -> Paged

-- | Construct <a>Paged</a> from page size and page number.
--   
--   Throws error on invalid values.
paged :: Int -> Int -> Paged

-- | Query all results, until we get less than maximum items per page.
allPages :: Monad m => (Paged -> m [a]) -> m [a]

-- | Increment page number
nextPage :: Paged -> Paged

-- | Read file according to BLOCKFROST_TOKEN_PATH environment variable
--   name.
projectFromEnv :: IO Project

-- | Read file according to environment variable name.
projectFromEnv' :: String -> IO Project

-- | Read file with token and turn it into <tt>Project</tt> Expects tokens
--   prefixed with environment, e.g. <tt>testnetA3C2E...</tt>
projectFromFile :: FilePath -> IO Project
instance GHC.Show.Show Blockfrost.Client.Core.BlockfrostError
instance GHC.Classes.Eq Blockfrost.Client.Core.BlockfrostError
instance Servant.Multipart.API.ToMultipart Servant.Multipart.API.Tmp Blockfrost.API.IPFS.Form
