-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Test helpers from cardano-binary exposed to other packages
--   
--   Test helpers from cardano-binary exposed to other packages
@package cardano-binary-test
@version 1.3.0.1

module Test.Cardano.Binary.Drop
tests :: IO Bool

module Test.Cardano.Binary.Failure
tests :: IO Bool

module Test.Cardano.Binary.Helpers
data U

-- | Like <a>U</a>, but we expect to read back the Cbor Data Item when
--   decoding.
data U24

-- | Given a data type which can be extended, verify we can indeed do so
--   without breaking anything. This should work with every time which
--   adopted the schema of having at least one constructor of the form:
--   .... | Unknown Word8 ByteString
extensionProperty :: forall a. (Arbitrary a, Eq a, Show a, FromCBOR a, ToCBOR a) => Property

-- | Machinery to test we perform "flat" encoding.
cborFlatTermValid :: ToCBOR a => a -> Property

-- | Configuration for a single test case.
data SizeTestConfig a
SizeTestConfig :: (a -> String) -> Gen a -> Bool -> Map TypeRep SizeOverride -> (a -> Map TypeRep SizeOverride) -> SizeTestConfig a

-- | Pretty-print values
[debug] :: SizeTestConfig a -> a -> String

-- | Generator
[gen] :: SizeTestConfig a -> Gen a

-- | Must estimates be exact?
[precise] :: SizeTestConfig a -> Bool

-- | Additional size overrides
[addlCtx] :: SizeTestConfig a -> Map TypeRep SizeOverride

-- | Size overrides computed from a concrete instance.
[computedCtx] :: SizeTestConfig a -> a -> Map TypeRep SizeOverride

-- | Default configuration, for <tt>Buildable</tt> types.
cfg :: Buildable a => SizeTestConfig a

-- | Default configuration, for <tt>Show</tt>able types.
scfg :: Show a => SizeTestConfig a

-- | Create a test case from the given test configuration.
sizeTest :: forall a. ToCBOR a => SizeTestConfig a -> Property
instance GHC.Classes.Eq Test.Cardano.Binary.Helpers.U
instance GHC.Show.Show Test.Cardano.Binary.Helpers.U
instance GHC.Classes.Eq Test.Cardano.Binary.Helpers.U24
instance GHC.Show.Show Test.Cardano.Binary.Helpers.U24
instance Cardano.Binary.FromCBOR.FromCBOR Test.Cardano.Binary.Helpers.U24
instance Cardano.Binary.ToCBOR.ToCBOR Test.Cardano.Binary.Helpers.U24
instance Cardano.Binary.ToCBOR.ToCBOR Test.Cardano.Binary.Helpers.U
instance Cardano.Binary.FromCBOR.FromCBOR Test.Cardano.Binary.Helpers.U
instance Test.QuickCheck.Arbitrary.Arbitrary Test.Cardano.Binary.Helpers.U


-- | Golden and round-trip testing of <a>FromCBOR</a> and <a>ToCBOR</a>
--   instances
module Test.Cardano.Binary.Helpers.GoldenRoundTrip

-- | Check that the <tt>encode</tt> and <tt>decode</tt> function of the
--   <tt>Bi</tt> instances work as expected w.r.t. the give reference data,
--   this is, given a value <tt>x::a</tt>, and a file path <tt>fp</tt>:
--   
--   <ul>
--   <li>The encoded data should coincide with the contents of the
--   <tt>fp</tt>.</li>
--   <li>Decoding <tt>fp</tt> should give as a result <tt>x</tt></li>
--   </ul>
goldenTestCBOR :: forall a. (FromCBOR a, ToCBOR a, Eq a, Show a, HasCallStack) => a -> FilePath -> Property

-- | Variant of <tt>goldenTestBi</tt> using custom encode and decode
--   functions.
--   
--   This is required for the encode/decode golden-tests for types that do
--   no have a <tt>Bi</tt> instance.
goldenTestCBORExplicit :: forall a. (Eq a, Show a, HasCallStack) => Text -> (a -> Encoding) -> (forall s. Decoder s a) -> a -> FilePath -> Property
goldenTestExplicit :: forall a. (Eq a, Show a, HasCallStack) => (a -> ByteString) -> (ByteString -> Either DecoderError a) -> a -> FilePath -> Property

-- | Round trip test a value (any instance of <a>FromCBOR</a>,
--   <a>ToCBOR</a>, and <a>Show</a> classes) by serializing it to a
--   ByteString and back again and that also has a <a>Show</a> instance. If
--   the <tt>a</tt> type has both <a>Show</a> and <a>Buildable</a>
--   instances, it's best to use this version.
roundTripsCBORShow :: (FromCBOR a, ToCBOR a, Eq a, MonadTest m, Show a, HasCallStack) => a -> m ()

-- | Round trip (via ByteString) any instance of the <a>FromCBOR</a> and
--   <a>ToCBOR</a> class that also has a <a>Buildable</a> instance.
roundTripsCBORBuildable :: (FromCBOR a, ToCBOR a, Eq a, MonadTest m, Buildable a, HasCallStack) => a -> m ()

-- | A custom version of <a>(===)</a> for <a>HexDump</a>s to get prettier
--   diffs
compareHexDump :: (MonadTest m, HasCallStack) => HexDump -> HexDump -> m ()
deprecatedGoldenDecode :: HasCallStack => Text -> (forall s. Decoder s ()) -> FilePath -> Property

module Test.Cardano.Binary.Serialization
tests :: IO Bool
instance GHC.Classes.Eq Test.Cardano.Binary.Serialization.TestStruct
instance GHC.Show.Show Test.Cardano.Binary.Serialization.TestStruct
instance Cardano.Binary.ToCBOR.ToCBOR Test.Cardano.Binary.Serialization.TestStruct
instance Cardano.Binary.FromCBOR.FromCBOR Test.Cardano.Binary.Serialization.TestStruct
