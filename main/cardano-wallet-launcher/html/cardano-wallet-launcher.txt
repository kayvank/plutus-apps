-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Utilities for a building commands launcher
--   
--   Utilities for a building commands launcher
@package cardano-wallet-launcher
@version 2022.7.1


-- | This module contains functions relating to startup and shutdown of the
--   <tt>cardano-wallet serve</tt> program.
module Cardano.Startup

-- | Force the locale text encoding to UTF-8. This is needed because the
--   CLI prints UTF-8 characters regardless of the <tt>LANG</tt>
--   environment variable or any other settings.
--   
--   On Windows the current console code page is changed to UTF-8.
withUtf8Encoding :: IO a -> IO a
setUtf8EncodingHandles :: IO ()

-- | Runs the given action with a cross-platform clean shutdown handler.
--   
--   This is necessary when running cardano-wallet as a subprocess of
--   Daedalus. For more details, see
--   <a>https://github.com/input-output-hk/cardano-launcher/blob/master/docs/windows-clean-shutdown.md</a>
--   
--   It works simply by reading from <a>stdin</a>, which is otherwise
--   unused by the API server. Once end-of-file is reached, it cancels the
--   action, causing the program to shut down.
--   
--   So, when running <tt>cardano-wallet</tt> as a subprocess, the parent
--   process should pass a pipe for <a>stdin</a>, then close the pipe when
--   it wants <tt>cardano-wallet</tt> to shut down.
withShutdownHandler :: Tracer IO ShutdownHandlerLog -> IO a -> IO (Maybe a)

-- | A variant of <a>withShutdownHandler</a> where the handle to read can
--   be chosen.
withShutdownHandler' :: Tracer IO ShutdownHandlerLog -> Handle -> IO a -> IO (Maybe a)

-- | Convert any SIGTERM received to SIGINT, for which the runtime system
--   has handlers that will correctly clean up sub-processes.
installSignalHandlers :: IO () -> IO ()
installSignalHandlersNoLogging :: IO ()

-- | Kill a process with signal 9. This is used only after previous
--   attempts to terminate the process did not work.
killProcess :: Pid -> IO ()

-- | Restricts the process umask so that any files created are only
--   readable by their owner.
setDefaultFilePermissions :: IO ()

-- | Changes permissions of an existing file so that only the owner can
--   read them.
restrictFileMode :: FilePath -> IO ()
data ShutdownHandlerLog
MsgShutdownHandler :: Bool -> ShutdownHandlerLog
MsgShutdownEOF :: ShutdownHandlerLog
MsgShutdownError :: IOException -> ShutdownHandlerLog
instance GHC.Classes.Eq Cardano.Startup.ShutdownHandlerLog
instance GHC.Show.Show Cardano.Startup.ShutdownHandlerLog
instance Data.Text.Class.ToText Cardano.Startup.ShutdownHandlerLog
instance Cardano.BM.Data.Tracer.HasPrivacyAnnotation Cardano.Startup.ShutdownHandlerLog
instance Cardano.BM.Data.Tracer.HasSeverityAnnotation Cardano.Startup.ShutdownHandlerLog


-- | This module contains a mechanism for launching external processes,
--   ensuring that they are terminated on exceptions.
module Cardano.Launcher

-- | Represent a command to execute. Args are provided as a list where
--   options are expected to be prefixed with `--` or <a>-</a>. For
--   example:
--   
--   <pre>
--   Command "cardano-wallet"
--       [ "server"
--       , "--port", "8080"
--       , "--network", "mainnet"
--       ] (return ())
--       Inherit
--       Inherit
--   </pre>
data Command
Command :: String -> [String] -> IO () -> StdStream -> StdStream -> Command
[cmdName] :: Command -> String
[cmdArgs] :: Command -> [String]

-- | An extra action to run _before_ the command
[cmdSetup] :: Command -> IO ()

-- | Input to supply to command
[cmdInput] :: Command -> StdStream

-- | What to do with stdout &amp; stderr
[cmdOutput] :: Command -> StdStream
data StdStream

-- | Inherit Handle from parent
Inherit :: StdStream

-- | Use the supplied Handle
UseHandle :: Handle -> StdStream

-- | Create a new pipe. The returned <tt>Handle</tt> will use the default
--   encoding and newline translation mode (just like <tt>Handle</tt>s
--   created by <tt>openFile</tt>).
CreatePipe :: StdStream

-- | Close the stream's file descriptor without passing a Handle. On POSIX
--   systems this may lead to strange behavior in the child process because
--   attempting to read or write after the file has been closed throws an
--   error. This should only be used with child processes that don't use
--   the file descriptor at all. If you wish to ignore the child process's
--   output you should either create a pipe and drain it manually or pass a
--   <tt>Handle</tt> that writes to <tt>/dev/null</tt>.
NoStream :: StdStream

-- | ProcessHasExited is used by a monitoring thread to signal that the
--   process has exited.
data ProcessHasExited
ProcessDidNotStart :: String -> IOException -> ProcessHasExited
ProcessHasExited :: String -> ExitCode -> ProcessHasExited

-- | Starts a command in the background and then runs an action. If the
--   action finishes (through an exception or otherwise) then the process
--   is terminated (see <tt>withCreateProcess</tt>) for details. If the
--   process exits, the action is cancelled. The return type reflects those
--   two cases.
--   
--   The action receives the <a>ProcessHandle</a> and stdin <a>Handle</a>
--   as arguments.
withBackendProcess :: MonadUnliftIO m => Tracer m LauncherLog -> Command -> (Maybe Handle -> ProcessHandle -> m a) -> m (Either ProcessHasExited a)

-- | A variant of <a>withBackendProcess</a> which accepts a general
--   <a>CreateProcess</a> object. This version also has nicer async
--   properties than <a>withCreateProcess</a>.
--   
--   This function should ensure:
--   
--   <ol>
--   <li>If the action finishes or throws an exception, then the process is
--   also terminated.</li>
--   <li>After the process is sent the signal to terminate, this function
--   will block until the process has actually exited - unless that takes
--   longer than the 5 second timeout. After the timeout has lapsed, the
--   process will be sent a kill signal.</li>
--   <li>If the process exits, then the action is cancelled.</li>
--   </ol>
--   
--   fixme: This is more or less a reimplementation of
--   <a>withProcessWait</a> (except for wait timeout). The launcher code
--   should be converted to use <tt>typed-process</tt>.
withBackendCreateProcess :: forall m a. MonadUnliftIO m => Tracer m LauncherLog -> CreateProcess -> (Maybe Handle -> ProcessHandle -> m a) -> m (Either ProcessHasExited a)
data LauncherLog
MsgLauncherStart :: String -> [String] -> LauncherLog
WithProcessInfo :: String -> Text -> LaunchedProcessLog -> LauncherLog
MsgLauncherCleanup :: LauncherLog
MsgLauncherCleanupTimedOut :: Int -> LauncherLog
MsgLauncherCleanupFinished :: LauncherLog
MsgLauncherFinish :: Maybe ProcessHasExited -> LauncherLog
instance GHC.Generics.Generic Cardano.Launcher.Command
instance GHC.Classes.Eq Cardano.Launcher.ProcessHasExited
instance GHC.Show.Show Cardano.Launcher.ProcessHasExited
instance GHC.Generics.Generic Cardano.Launcher.WaitForProcessLog
instance GHC.Classes.Eq Cardano.Launcher.WaitForProcessLog
instance GHC.Show.Show Cardano.Launcher.WaitForProcessLog
instance GHC.Generics.Generic Cardano.Launcher.LaunchedProcessLog
instance GHC.Classes.Eq Cardano.Launcher.LaunchedProcessLog
instance GHC.Show.Show Cardano.Launcher.LaunchedProcessLog
instance GHC.Generics.Generic Cardano.Launcher.LauncherLog
instance GHC.Classes.Eq Cardano.Launcher.LauncherLog
instance GHC.Show.Show Cardano.Launcher.LauncherLog
instance Cardano.BM.Data.Tracer.HasPrivacyAnnotation Cardano.Launcher.LauncherLog
instance Cardano.BM.Data.Tracer.HasSeverityAnnotation Cardano.Launcher.LauncherLog
instance Data.Text.Class.ToText Cardano.Launcher.LauncherLog
instance Cardano.BM.Data.Tracer.HasPrivacyAnnotation Cardano.Launcher.LaunchedProcessLog
instance Cardano.BM.Data.Tracer.HasSeverityAnnotation Cardano.Launcher.LaunchedProcessLog
instance Data.Text.Class.ToText Cardano.Launcher.LaunchedProcessLog
instance Cardano.BM.Data.Tracer.HasPrivacyAnnotation Cardano.Launcher.WaitForProcessLog
instance Cardano.BM.Data.Tracer.HasSeverityAnnotation Cardano.Launcher.WaitForProcessLog
instance Data.Text.Class.ToText Cardano.Launcher.WaitForProcessLog
instance GHC.Exception.Type.Exception Cardano.Launcher.ProcessHasExited
instance Data.Text.Class.ToText Cardano.Launcher.ProcessHasExited
instance GHC.Show.Show Cardano.Launcher.Command
instance GHC.Classes.Eq Cardano.Launcher.Command
instance Formatting.Buildable.Buildable Cardano.Launcher.Command


-- | Provides a function to launch <tt>cardano-node</tt>.
module Cardano.Launcher.Node

-- | Spawns a <tt>cardano-node</tt> process.
--   
--   IMPORTANT: <tt>cardano-node</tt> must be available on the current
--   path.
withCardanoNode :: Tracer IO LauncherLog -> CardanoNodeConfig -> (CardanoNodeConn -> IO a) -> IO (Either ProcessHasExited a)

-- | A subset of the <tt>cardano-node</tt> CLI parameters, used for
--   starting the backend.
data CardanoNodeConfig
CardanoNodeConfig :: FilePath -> FilePath -> FilePath -> FilePath -> Maybe FilePath -> Maybe FilePath -> Maybe FilePath -> Maybe FilePath -> Maybe FilePath -> Maybe NodePort -> Maybe String -> CardanoNodeConfig
[nodeDir] :: CardanoNodeConfig -> FilePath
[nodeConfigFile] :: CardanoNodeConfig -> FilePath
[nodeTopologyFile] :: CardanoNodeConfig -> FilePath
[nodeDatabaseDir] :: CardanoNodeConfig -> FilePath
[nodeDlgCertFile] :: CardanoNodeConfig -> Maybe FilePath
[nodeSignKeyFile] :: CardanoNodeConfig -> Maybe FilePath
[nodeOpCertFile] :: CardanoNodeConfig -> Maybe FilePath
[nodeKesKeyFile] :: CardanoNodeConfig -> Maybe FilePath
[nodeVrfKeyFile] :: CardanoNodeConfig -> Maybe FilePath
[nodePort] :: CardanoNodeConfig -> Maybe NodePort
[nodeLoggingHostname] :: CardanoNodeConfig -> Maybe String
newtype NodePort
NodePort :: Int -> NodePort
[unNodePort] :: NodePort -> Int

-- | Parameters for connecting to the node.
data CardanoNodeConn

-- | Produces a <a>CardanoNodeConn</a> if the socket path or pipe name
--   (depending on <a>isWindows</a>) is valid.
cardanoNodeConn :: FilePath -> Either String CardanoNodeConn

-- | Gets the socket filename or pipe name from <a>CardanoNodeConn</a>.
--   Whether it's a unix socket or named pipe depends on the value of
--   <a>isWindows</a>.
nodeSocketFile :: CardanoNodeConn -> FilePath
isWindows :: Bool
instance GHC.Classes.Eq Cardano.Launcher.Node.CardanoNodeConn
instance GHC.Show.Show Cardano.Launcher.Node.CardanoNodeConn
instance GHC.Classes.Eq Cardano.Launcher.Node.NodePort
instance GHC.Show.Show Cardano.Launcher.Node.NodePort
instance GHC.Classes.Eq Cardano.Launcher.Node.CardanoNodeConfig
instance GHC.Show.Show Cardano.Launcher.Node.CardanoNodeConfig
instance Data.Text.Class.ToText Cardano.Launcher.Node.CardanoNodeConn
instance Data.Text.Class.FromText Cardano.Launcher.Node.CardanoNodeConn
