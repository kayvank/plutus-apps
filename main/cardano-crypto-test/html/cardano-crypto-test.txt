-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Test helpers from cardano-crypto exposed to other packages
--   
--   Test helpers from cardano-crypto exposed to other packages
@package cardano-crypto-test
@version 1.3.0


-- | Dummy values used in tests (replacing `configuration.yaml`)
module Test.Cardano.Crypto.Dummy
annotatedProtocolMagicId :: Annotated ProtocolMagicId ByteString
aProtocolMagic :: AProtocolMagic ByteString
protocolMagic :: ProtocolMagic
protocolMagicId :: ProtocolMagicId

module Test.Cardano.Crypto.Orphans
instance GHC.Classes.Eq Cardano.Crypto.Signing.SigningKey.SigningKey
instance GHC.Classes.Ord Crypto.PubKey.Ed25519.PublicKey
instance GHC.Classes.Ord Crypto.PubKey.Ed25519.SecretKey
instance GHC.Classes.Ord Crypto.PubKey.Ed25519.Signature

module Test.Cardano.Crypto.Gen
genProtocolMagic :: Gen ProtocolMagic

-- | Whilst <a>ProtocolMagicId</a> is represented as a <a>Word32</a> in
--   cardano-ledger, in <tt>cardano-sl</tt> it was an <a>Int32</a>. In
--   order to tolerate this, and since we don't care about testing
--   compatibility with negative values, we only generate values between
--   <tt>0</tt> and <tt>(maxBound :: Int32) - 1</tt>, inclusive.
genProtocolMagicId :: Gen ProtocolMagicId
genRequiresNetworkMagic :: Gen RequiresNetworkMagic
genSignTag :: Gen SignTag
genKeypair :: Gen (VerificationKey, SigningKey)
genVerificationKey :: Gen VerificationKey
genSigningKey :: Gen SigningKey
genRedeemKeypair :: Gen (RedeemVerificationKey, RedeemSigningKey)
genRedeemVerificationKey :: Gen RedeemVerificationKey
genCompactRedeemVerificationKey :: Gen CompactRedeemVerificationKey
genRedeemSigningKey :: Gen RedeemSigningKey
genSignature :: ToCBOR a => ProtocolMagicId -> Gen a -> Gen (Signature a)
genSignatureEncoded :: Gen ByteString -> Gen (Signature a)
genRedeemSignature :: ToCBOR a => ProtocolMagicId -> Gen a -> Gen (RedeemSignature a)
genAbstractHash :: (ToCBOR a, HashAlgorithm algo) => Gen a -> Gen (AbstractHash algo a)
genSafeSigner :: Gen SafeSigner
genPassPhrase :: Gen PassPhrase
genHashRaw :: Gen (Hash Raw)
genTextHash :: Gen (Hash Text)
feedPM :: (ProtocolMagicId -> Gen a) -> Gen a

module Test.Cardano.Crypto.CBOR

-- | Changing existing values in this string will break existing golden
--   tests, but it us OK to append more data to the end.
constantByteString :: ByteString
getBytes :: Int -> Int -> ByteString
tests :: IO Bool

module Test.Cardano.Crypto.Example
exampleProtocolMagic0 :: ProtocolMagic
exampleProtocolMagic1 :: ProtocolMagic
exampleProtocolMagic2 :: ProtocolMagic
exampleProtocolMagic3 :: ProtocolMagic
exampleProtocolMagic4 :: ProtocolMagic
exampleProtocolMagicId0 :: ProtocolMagicId
exampleVerificationKey :: VerificationKey
exampleVerificationKeys :: Int -> Int -> [VerificationKey]
exampleRedeemVerificationKey :: RedeemVerificationKey
exampleSigningKey :: SigningKey
exampleSigningKeys :: Int -> Int -> [SigningKey]
exampleSafeSigner :: Int -> SafeSigner
staticSafeSigners :: [SafeSigner]

module Test.Cardano.Crypto.Json
tests :: IO Bool
