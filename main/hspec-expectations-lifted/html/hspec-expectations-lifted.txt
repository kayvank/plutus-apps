-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A version of hspec-expectations generalized to MonadIO
--   
--   A version of hspec-expectations generalized to MonadIO
@package hspec-expectations-lifted
@version 0.10.0


-- | Introductory documentation:
--   <a>https://github.com/hspec/hspec-expectations#readme</a>
module Test.Hspec.Expectations.Lifted
expectationFailure :: (HasCallStack, MonadIO m) => String -> m ()

-- | <tt>actual `shouldBe` expected</tt> sets the expectation that
--   <tt>actual</tt> is equal to <tt>expected</tt>.
shouldBe :: (HasCallStack, MonadIO m, Show a, Eq a) => a -> a -> m ()
infix 1 `shouldBe`

-- | <tt>v `shouldSatisfy` p</tt> sets the expectation that <tt>p v</tt> is
--   <tt>True</tt>.
shouldSatisfy :: (HasCallStack, MonadIO m, Show a) => a -> (a -> Bool) -> m ()
infix 1 `shouldSatisfy`

-- | <tt>list `shouldStartWith` prefix</tt> sets the expectation that
--   <tt>list</tt> starts with <tt>prefix</tt>,
shouldStartWith :: (HasCallStack, MonadIO m, Show a, Eq a) => [a] -> [a] -> m ()
infix 1 `shouldStartWith`

-- | <tt>list `shouldEndWith` suffix</tt> sets the expectation that
--   <tt>list</tt> ends with <tt>suffix</tt>,
shouldEndWith :: (HasCallStack, MonadIO m, Show a, Eq a) => [a] -> [a] -> m ()
infix 1 `shouldEndWith`

-- | <tt>list `shouldContain` sublist</tt> sets the expectation that
--   <tt>sublist</tt> is contained, wholly and intact, anywhere in
--   <tt>list</tt>.
shouldContain :: (HasCallStack, MonadIO m, Show a, Eq a) => [a] -> [a] -> m ()
infix 1 `shouldContain`

-- | <tt>xs `shouldMatchList` ys</tt> sets the expectation that <tt>xs</tt>
--   has the same elements that <tt>ys</tt> has, possibly in another order
shouldMatchList :: (HasCallStack, MonadIO m, Show a, Eq a) => [a] -> [a] -> m ()
infix 1 `shouldMatchList`

-- | <tt>action `shouldReturn` expected</tt> sets the expectation that
--   <tt>action</tt> returns <tt>expected</tt>.
shouldReturn :: (HasCallStack, MonadIO m, Show a, Eq a) => m a -> a -> m ()
infix 1 `shouldReturn`

-- | <tt>actual `shouldNotBe` notExpected</tt> sets the expectation that
--   <tt>actual</tt> is not equal to <tt>notExpected</tt>
shouldNotBe :: (HasCallStack, MonadIO m, Show a, Eq a) => a -> a -> m ()
infix 1 `shouldNotBe`

-- | <tt>v `shouldNotSatisfy` p</tt> sets the expectation that <tt>p v</tt>
--   is <tt>False</tt>.
shouldNotSatisfy :: (HasCallStack, MonadIO m, Show a) => a -> (a -> Bool) -> m ()
infix 1 `shouldNotSatisfy`

-- | <tt>list `shouldNotContain` sublist</tt> sets the expectation that
--   <tt>sublist</tt> is not contained anywhere in <tt>list</tt>.
shouldNotContain :: (HasCallStack, MonadIO m, Show a, Eq a) => [a] -> [a] -> m ()
infix 1 `shouldNotContain`

-- | <tt>action `shouldNotReturn` notExpected</tt> sets the expectation
--   that <tt>action</tt> does not return <tt>notExpected</tt>.
shouldNotReturn :: (HasCallStack, MonadIO m, Show a, Eq a) => m a -> a -> m ()
infix 1 `shouldNotReturn`

-- | Request a CallStack.
--   
--   NOTE: The implicit parameter <tt>?callStack :: CallStack</tt> is an
--   implementation detail and <b>should not</b> be considered part of the
--   <a>CallStack</a> API, we may decide to change the implementation in
--   the future.
type HasCallStack = ?callStack :: CallStack
