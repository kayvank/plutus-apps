-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Utilities for a building Command-Line Interfaces
--   
--   Utilities for a building Command-Line Interfaces
@package cardano-wallet-cli
@version 2022.7.1


-- | Shared types and helpers for CLI parsing
module Cardano.CLI

-- | Construct a CLI from a list of a commands
--   
--   <pre>
--   &gt;&gt;&gt; runCli $ cli $ cmdA &lt;&gt; cmdB &lt;&gt; cmdC
--   </pre>
cli :: Mod CommandFields a -> ParserInfo a

-- | Runs a specific command parser using appropriate preferences
runCli :: ParserInfo (IO ()) -> IO ()
cmdMnemonic :: Mod CommandFields (IO ())
cmdWallet :: (ToJSON wallet, CmdWalletUpdatePassphrase wallet) => CmdWalletCreate wallet -> WalletClient wallet -> Mod CommandFields (IO ())
cmdWalletCreate :: WalletClient ApiWallet -> Mod CommandFields (IO ())
cmdByronWalletCreate :: WalletClient ApiByronWallet -> Mod CommandFields (IO ())

-- | cardano-wallet transaction
cmdTransaction :: ToJSON wallet => TransactionClient -> WalletClient wallet -> Mod CommandFields (IO ())
cmdAddress :: AddressClient -> Mod CommandFields (IO ())
cmdStakePool :: ToJSON apiPool => StakePoolClient apiPool -> Mod CommandFields (IO ())
cmdNetwork :: NetworkClient -> Mod CommandFields (IO ())
cmdVersion :: Mod CommandFields (IO ())
cmdKey :: Mod CommandFields (IO ())

-- | Helper for writing an option <a>Parser</a> using a <a>FromText</a>
--   instance.
optionT :: FromText a => Mod OptionFields a -> Parser a

-- | Helper for writing an argument <a>Parser</a> using a <a>FromText</a>
--   instance.
argumentT :: FromText a => Mod ArgumentFields a -> Parser a

-- | <ul>
--   <li>-database=DIR</li>
--   </ul>
databaseOption :: Parser FilePath

-- | <ul>
--   <li><i>--listen-address=HOSTSPEC</i> , default: 127.0.0.1</li>
--   </ul>
hostPreferenceOption :: Parser HostPreference

-- | <ul>
--   <li><i>--random-port|--port=INT</i></li>
--   </ul>
listenOption :: Parser Listen

-- | <ul>
--   <li><i>--shutdown-handler</i></li>
--   </ul>
shutdownHandlerFlag :: Parser Bool

-- | <ul>
--   <li>-state-dir=DIR, default:
--   ~<i>.cardano-wallet</i>$backend/$network</li>
--   </ul>
stateDirOption :: FilePath -> Parser (Maybe FilePath)

-- | <ul>
--   <li>-sync-tolerance=DURATION, default: 300s</li>
--   </ul>
syncToleranceOption :: Parser SyncTolerance
tlsOption :: Parser TlsConfiguration
poolMetadataSourceOption :: Parser PoolMetadataSource

-- | <ul>
--   <li><i>--token-metadata-server=URL</i></li>
--   </ul>
tokenMetadataSourceOption :: Parser TokenMetadataServer

-- | <ul>
--   <li><i>--metadata=JSON</i></li>
--   </ul>
--   
--   Note: we decode the JSON just so that we can validate more
--   client-side.
metadataOption :: Parser (Maybe TxMetadataWithSchema)

-- | <ul>
--   <li><i>--ttl=DURATION</i></li>
--   </ul>
timeToLiveOption :: Parser (Maybe (Quantity "second" NominalDiffTime))
data LoggingOptions tracers
LoggingOptions :: Severity -> tracers -> Maybe Void -> LoggingOptions tracers
[$sel:loggingMinSeverity:LoggingOptions] :: LoggingOptions tracers -> Severity
[$sel:loggingTracers:LoggingOptions] :: LoggingOptions tracers -> tracers
[$sel:loggingTracersDoc:LoggingOptions] :: LoggingOptions tracers -> Maybe Void
data LogOutput

-- | Log to console, with the given minimum <a>Severity</a>.
--   
--   Logs of Warning or higher severity will be output to stderr. Notice or
--   lower severity logs will be output to stdout.
LogToStdStreams :: Severity -> LogOutput
LogToFile :: FilePath -> Severity -> LogOutput

-- | A hidden "helper" option which always fails, but shows info about the
--   logging options.
helperTracing :: [(String, String)] -> Parser (a -> a)
loggingOptions :: Parser tracers -> Parser (LoggingOptions tracers)

-- | The lower-case names of all <a>Severity</a> values.
loggingSeverities :: [(String, Severity)]
parseLoggingSeverity :: String -> Either String Severity
loggingSeverityOrOffReader :: ReadM (Maybe Severity)
loggingSeverityReader :: ReadM Severity

-- | Wrapper type around <a>Text</a> to make its semantic more explicit
data Service
data TxId

-- | Port number with a tag for describing what it is used for
newtype Port (tag :: Symbol)
Port :: Int -> Port (tag :: Symbol)
[$sel:getPort:Port] :: Port (tag :: Symbol) -> Int

-- | See <a>withLoggingNamed</a>
withLogging :: [LogOutput] -> ((Switchboard Text, (Configuration, Trace IO Text)) -> IO a) -> IO a

-- | Run an action with logging available and configured. When the action
--   is finished (normally or otherwise), log messages are flushed.
withLoggingNamed :: LoggerName -> [LogOutput] -> ((Switchboard Text, (Configuration, Trace IO Text)) -> IO a) -> IO a

-- | Like <a>hPutErrLn</a> but with provided default <a>Handle</a>
putErrLn :: Text -> IO ()

-- | Print an error message in red
hPutErrLn :: Handle -> Text -> IO ()

-- | The IOHK logging framework prints out ANSI colour codes with its
--   messages. On Windows 10 and above it's possible to enable processing
--   of these colour codes. The <a>hSupportsANSIWithoutEmulation</a>
--   function does this as a side effect. On older versions of Windows,
--   special treatment is required (see: <a>ANSI</a>). In this case, this
--   function will achieve nothing, and the ANSI control characters will be
--   printed in grey (too bad).
enableWindowsANSI :: IO ()

-- | Like <a>hGetLine</a> but with default handles
getLine :: Text -> (Text -> Either String a) -> IO (a, Text)

-- | Prompt user and parse the input. Re-prompt on invalid inputs.
hGetLine :: Buildable e => (Handle, Handle) -> Text -> (Text -> Either e a) -> IO (a, Text)

-- | Like <a>hGetSensitiveLine</a> but with default handles
getSensitiveLine :: Buildable e => Text -> (Text -> Either e a) -> IO (a, Text)

-- | Gather user inputs until a newline is met, hiding what's typed with a
--   placeholder character.
hGetSensitiveLine :: Buildable e => (Handle, Handle) -> Text -> (Text -> Either e a) -> IO (a, Text)

-- | Decode API error messages and extract the corresponding message.
decodeError :: ByteString -> Maybe Text

-- | Look whether a particular filepath is correctly resolved on the
--   filesystem. This makes for a better user experience when passing wrong
--   filepaths via options or arguments, especially when they get forwarded
--   to other services.
requireFilePath :: FilePath -> IO ()

-- | Find the user data directory for a given node network backend.
getDataDir :: String -> IO FilePath

-- | Initialize a directory to store data such as blocks or the wallet
--   databases
setupDirectory :: (Text -> IO ()) -> FilePath -> IO ()
getPrometheusURL :: IO (Maybe (String, Port "Prometheus"))
getEKGURL :: IO (Maybe (String, Port "EKG"))
ekgEnabled :: IO Bool
instance GHC.Classes.Eq Cardano.CLI.UpdatePassphraseCredential
instance GHC.Classes.Eq Cardano.CLI.TransactionFeatures
instance GHC.Show.Show Cardano.CLI.TransactionFeatures
instance GHC.Show.Show (Cardano.CLI.Port tag)
instance GHC.Classes.Ord (Cardano.CLI.Port tag)
instance GHC.Enum.Enum (Cardano.CLI.Port tag)
instance GHC.Generics.Generic (Cardano.CLI.Port tag)
instance GHC.Classes.Eq (Cardano.CLI.Port tag)
instance GHC.Classes.Eq Cardano.CLI.Service
instance GHC.Show.Show Cardano.CLI.Service
instance Data.String.IsString Cardano.CLI.Service
instance GHC.Show.Show Cardano.CLI.TxId
instance GHC.Classes.Eq Cardano.CLI.TxId
instance GHC.Show.Show Cardano.CLI.Verbosity
instance GHC.Classes.Eq Cardano.CLI.Verbosity
instance GHC.Show.Show Cardano.CLI.LogOutput
instance GHC.Classes.Eq Cardano.CLI.LogOutput
instance GHC.Classes.Eq tracers => GHC.Classes.Eq (Cardano.CLI.LoggingOptions tracers)
instance GHC.Show.Show tracers => GHC.Show.Show (Cardano.CLI.LoggingOptions tracers)
instance Data.Text.Class.FromText Cardano.CLI.TxId
instance Cardano.CLI.CmdWalletUpdatePassphrase Cardano.Wallet.Api.Types.ApiWallet
instance Cardano.CLI.CmdWalletUpdatePassphrase Cardano.Wallet.Api.Types.ApiByronWallet
instance GHC.Enum.Bounded (Cardano.CLI.Port tag)
instance Data.Text.Class.FromText (Cardano.CLI.Port tag)
instance Data.Text.Class.ToText (Cardano.CLI.Port tag)
