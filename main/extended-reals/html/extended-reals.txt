-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Extension of real numbers with positive/negative infinities
--   
--   Extension of real numbers with positive/negative infinities (±∞). It
--   is useful for describing various limiting behaviors in mathematics.
@package extended-reals
@version 0.2.4.0


-- | Extension of real numbers with positive/negative infinities (±∞). It
--   is useful for describing various limiting behaviors in mathematics.
--   
--   Remarks:
--   
--   <ul>
--   <li><tt>∞ - ∞</tt> is left undefined as usual, but we define <tt>0 × ∞
--   = 0 × -∞ = 0</tt> by following the convention of probability or
--   measure theory.</li>
--   </ul>
--   
--   References:
--   
--   <ul>
--   <li>Wikipedia contributors, "Extended real number line," Wikipedia,
--   The Free Encyclopedia,
--   <a>https://en.wikipedia.org/wiki/Extended_real_number_line</a>
--   (accessed September 1, 2014).</li>
--   </ul>
module Data.ExtendedReal

-- | <tt>Extended r</tt> is an extension of <i>r</i> with positive/negative
--   infinity (±∞).
data Extended r

-- | negative infinity (-∞)
NegInf :: Extended r

-- | finite value
Finite :: !r -> Extended r

-- | positive infinity (+∞)
PosInf :: Extended r

-- | Infinity (∞)
inf :: Extended r

-- | <tt>isFinite x = not (isInfinite x)</tt>.
isFinite :: Extended r -> Bool

-- | <tt>isInfinite x</tt> returns <tt>True</tt> iff <tt>x</tt> is
--   <tt>PosInf</tt> or <tt>NegInf</tt>.
isInfinite :: Extended r -> Bool
instance Data.Data.Data r => Data.Data.Data (Data.ExtendedReal.Extended r)
instance GHC.Read.Read r => GHC.Read.Read (Data.ExtendedReal.Extended r)
instance GHC.Show.Show r => GHC.Show.Show (Data.ExtendedReal.Extended r)
instance GHC.Classes.Eq r => GHC.Classes.Eq (Data.ExtendedReal.Extended r)
instance GHC.Classes.Ord r => GHC.Classes.Ord (Data.ExtendedReal.Extended r)
instance GHC.Enum.Bounded (Data.ExtendedReal.Extended r)
instance GHC.Base.Functor Data.ExtendedReal.Extended
instance Control.DeepSeq.NFData r => Control.DeepSeq.NFData (Data.ExtendedReal.Extended r)
instance Data.Hashable.Class.Hashable r => Data.Hashable.Class.Hashable (Data.ExtendedReal.Extended r)
instance (GHC.Num.Num r, GHC.Classes.Ord r) => GHC.Num.Num (Data.ExtendedReal.Extended r)
instance (GHC.Real.Fractional r, GHC.Classes.Ord r) => GHC.Real.Fractional (Data.ExtendedReal.Extended r)
