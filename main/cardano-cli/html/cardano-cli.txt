-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | The Cardano command-line interface.
@package cardano-cli
@version 1.35.4

module Cardano.CLI.Byron.Legacy

-- | LegacyDelegateKey is a subset of the UserSecret's from the legacy
--   codebase: 1. the VSS keypair must be present 2. the signing key must
--   be present 3. the rest must be absent (Nothing)
--   
--   Legacy reference:
--   <a>https://github.com/input-output-hk/cardano-sl/blob/release/3.0.1/lib/src/Pos/Util/UserSecret.hs#L189</a>
newtype LegacyDelegateKey
LegacyDelegateKey :: SigningKey -> LegacyDelegateKey
[lrkSigningKey] :: LegacyDelegateKey -> SigningKey

-- | Encoder for a Byron/Classic signing key. Lifted from cardano-sl legacy
--   codebase.
encodeLegacyDelegateKey :: LegacyDelegateKey -> Encoding

-- | Decoder for a Byron/Classic signing key. Lifted from cardano-sl legacy
--   codebase.
decodeLegacyDelegateKey :: Decoder s LegacyDelegateKey

module Cardano.CLI.Byron.Query
newtype ByronQueryError
ByronQueryEnvVarSocketErr :: EnvSocketError -> ByronQueryError
renderByronQueryError :: ByronQueryError -> Text
runGetLocalNodeTip :: NetworkId -> ExceptT ByronQueryError IO ()
instance GHC.Show.Show Cardano.CLI.Byron.Query.ByronQueryError

module Cardano.CLI.Render

-- | Convert a help text to <a>String</a>. When the CLI_HELP_TRACE
--   environment variable is set to '1', the output will be in HTML so that
--   it can be viewed in a browser where developer tools can be used to
--   inspect tracing that aids in describing the structure of the output
--   document.
customRenderHelp :: Int -> ParserHelp -> String


-- | User-friendly pretty-printing for textual user interfaces (TUI)
module Cardano.CLI.Run.Friendly
friendlyTxBS :: IsCardanoEra era => CardanoEra era -> Tx era -> ByteString
friendlyTxBodyBS :: IsCardanoEra era => CardanoEra era -> TxBody era -> ByteString

module Cardano.CLI.Shelley.Orphans
instance Data.Aeson.Types.ToJSON.ToJSON Ouroboros.Consensus.Byron.Ledger.Block.ByronHash
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Slotting.Block.BlockNo
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Slotting.Block.BlockNo
instance Cardano.Ledger.Crypto.Crypto crypto => Data.Aeson.Types.ToJSON.ToJSON (Cardano.Ledger.TxIn.TxId crypto)
instance Cardano.Ledger.Crypto.Crypto crypto => Data.Aeson.Types.ToJSON.ToJSON (Ouroboros.Consensus.Shelley.Protocol.Abstract.ShelleyHash crypto)
instance Cardano.Ledger.Crypto.Crypto crypto => Data.Aeson.Types.ToJSON.ToJSON (Cardano.Protocol.TPraos.BHeader.HashHeader crypto)
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Ledger.AuxiliaryData.AuxiliaryDataHash Cardano.Ledger.Crypto.StandardCrypto)
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Ledger.Shelley.PoolRank.LogWeight
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Ledger.PoolDistr.PoolDistr Cardano.Ledger.Crypto.StandardCrypto)
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Ledger.Shelley.EpochBoundary.Stake Cardano.Ledger.Crypto.StandardCrypto)
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Ledger.Credential.StakeReference Cardano.Ledger.Crypto.StandardCrypto)
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Protocol.TPraos.Rules.Prtcl.PrtclState Cardano.Ledger.Crypto.StandardCrypto)
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Protocol.TPraos.Rules.Tickn.TicknState
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Protocol.TPraos.API.ChainDepState Cardano.Ledger.Crypto.StandardCrypto)
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Ledger.Mary.Value.PolicyID Cardano.Ledger.Crypto.StandardCrypto)
instance Data.Aeson.Types.ToJSON.ToJSON (Ouroboros.Consensus.HardFork.Combinator.AcrossEras.OneEraHash xs)
instance Data.Aeson.Types.ToJSON.ToJSON (Ouroboros.Network.Block.HeaderHash blk) => Data.Aeson.Types.ToJSON.ToJSON (Ouroboros.Network.Block.Tip blk)
instance (Data.Aeson.Types.ToJSON.ToJSONKey k, Data.Aeson.Types.ToJSON.ToJSON v) => Data.Aeson.Types.ToJSON.ToJSON (Data.BiMap.BiMap v k v)
instance Data.Aeson.Types.ToJSON.ToJSON (Ouroboros.Consensus.Protocol.TPraos.TPraosState Cardano.Ledger.Crypto.StandardCrypto)
instance Data.Aeson.Types.ToJSON.ToJSON (Ouroboros.Consensus.Protocol.Praos.PraosState Cardano.Ledger.Crypto.StandardCrypto)
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Slotting.Slot.WithOrigin Cardano.Slotting.Slot.SlotNo)

module Cardano.CLI.Shelley.Script
data ScriptDecodeError
ScriptDecodeTextEnvelopeError :: TextEnvelopeError -> ScriptDecodeError
ScriptDecodeSimpleScriptError :: JsonDecodeError -> ScriptDecodeError
deserialiseScriptInAnyLang :: ByteString -> Either ScriptDecodeError ScriptInAnyLang

-- | Read a script file. The file can either be in the text envelope format
--   wrapping the binary representation of any of the supported script
--   languages, or alternatively it can be a JSON format file for one of
--   the simple script language versions.
readFileScriptInAnyLang :: FilePath -> ExceptT (FileError ScriptDecodeError) IO ScriptInAnyLang
instance GHC.Show.Show Cardano.CLI.Shelley.Script.ScriptDecodeError
instance Cardano.Api.Error.Error Cardano.CLI.Shelley.Script.ScriptDecodeError

module Cardano.CLI.TopHandler

-- | An exception handler to use for a program top level, as an alternative
--   to the default top level handler provided by GHC.
--   
--   Use like:
--   
--   <pre>
--   main :: IO ()
--   main = toplevelExceptionHandler $ do
--     ...
--   </pre>
toplevelExceptionHandler :: IO a -> IO a

module Cardano.CLI.Types

-- | A flag that differentiates between automatically and manually
--   balancing a tx.
data BalanceTxExecUnits
AutoBalance :: BalanceTxExecUnits
ManualBalance :: BalanceTxExecUnits

-- | Specify what the CBOR file is i.e a block, a tx, etc
data CBORObject
CBORBlockByron :: EpochSlots -> CBORObject
CBORDelegationCertificateByron :: CBORObject
CBORTxByron :: CBORObject
CBORUpdateProposalByron :: CBORObject
CBORVoteByron :: CBORObject
newtype CddlTx
CddlTx :: InAnyCardanoEra Tx -> CddlTx
[unCddlTx] :: CddlTx -> InAnyCardanoEra Tx
newtype CertificateFile
CertificateFile :: FilePath -> CertificateFile
[unCertificateFile] :: CertificateFile -> FilePath
newtype CurrentKesPeriod
CurrentKesPeriod :: Word64 -> CurrentKesPeriod
[unCurrentKesPeriod] :: CurrentKesPeriod -> Word64

-- | Which leadership schedule we are interested in. TODO: Implement
--   Previous and Next epochs
data EpochLeadershipSchedule
CurrentEpoch :: EpochLeadershipSchedule
NextEpoch :: EpochLeadershipSchedule
newtype GenesisFile
GenesisFile :: FilePath -> GenesisFile
[unGenesisFile] :: GenesisFile -> FilePath
newtype OpCertEndingKesPeriod
OpCertEndingKesPeriod :: Word64 -> OpCertEndingKesPeriod
[unOpCertEndingKesPeriod] :: OpCertEndingKesPeriod -> Word64
data OpCertIntervalInformation
OpCertWithinInterval :: OpCertStartingKesPeriod -> OpCertEndingKesPeriod -> CurrentKesPeriod -> SlotsTillKesKeyExpiry -> OpCertIntervalInformation
OpCertStartingKesPeriodIsInTheFuture :: OpCertStartingKesPeriod -> OpCertEndingKesPeriod -> CurrentKesPeriod -> OpCertIntervalInformation
OpCertExpired :: OpCertStartingKesPeriod -> OpCertEndingKesPeriod -> CurrentKesPeriod -> OpCertIntervalInformation

-- | Shouldn't be possible
OpCertSomeOtherError :: OpCertStartingKesPeriod -> OpCertEndingKesPeriod -> CurrentKesPeriod -> OpCertIntervalInformation
newtype OpCertOnDiskCounter
OpCertOnDiskCounter :: Word64 -> OpCertOnDiskCounter
[unOpCertOnDiskCounter] :: OpCertOnDiskCounter -> Word64
data OpCertNodeAndOnDiskCounterInformation

-- | The on disk operational certificate has a counter that is larger than
--   or equal to its corresponding counter in the node state. The on disk
--   operational certificate therefore has a valid counter.
OpCertOnDiskCounterMoreThanOrEqualToNodeState :: OpCertOnDiskCounter -> OpCertNodeStateCounter -> OpCertNodeAndOnDiskCounterInformation

-- | The on disk operational certificate has a counter that is less than
--   the counter in the node state. The on disk operational certificate is
--   invalid in this case.
OpCertOnDiskCounterBehindNodeState :: OpCertOnDiskCounter -> OpCertNodeStateCounter -> OpCertNodeAndOnDiskCounterInformation

-- | The corresponding counter for operational certificate was not found in
--   the node state. This means the relevant stake pool has not minted a
--   block yet. When the stake pool has minted a block the corresponding
--   operational certificate's counter will be present in the node state.
OpCertNoBlocksMintedYet :: OpCertOnDiskCounter -> OpCertNodeAndOnDiskCounterInformation
newtype OpCertNodeStateCounter
OpCertNodeStateCounter :: Word64 -> OpCertNodeStateCounter
[unOpCertNodeStateCounter] :: OpCertNodeStateCounter -> Word64
newtype OpCertStartingKesPeriod
OpCertStartingKesPeriod :: Word64 -> OpCertStartingKesPeriod
[unOpCertStartingKesPeriod] :: OpCertStartingKesPeriod -> Word64

-- | The desired output format.
data OutputFormat
OutputFormatHex :: OutputFormat
OutputFormatBech32 :: OutputFormat

-- | Specify whether to render the script cost as JSON in the cli's build
--   command.
data TxBuildOutputOptions
OutputScriptCostOnly :: FilePath -> TxBuildOutputOptions
OutputTxBodyOnly :: TxBodyFile -> TxBuildOutputOptions
data ReferenceScriptAnyEra
ReferenceScriptAnyEraNone :: ReferenceScriptAnyEra
ReferenceScriptAnyEra :: FilePath -> ReferenceScriptAnyEra
newtype SigningKeyFile
SigningKeyFile :: FilePath -> SigningKeyFile
[unSigningKeyFile] :: SigningKeyFile -> FilePath
newtype ScriptFile
ScriptFile :: FilePath -> ScriptFile
[unScriptFile] :: ScriptFile -> FilePath
data ScriptDataOrFile

-- | By reference to a CBOR file
ScriptDataCborFile :: FilePath -> ScriptDataOrFile

-- | By reference to a JSON file
ScriptDataJsonFile :: FilePath -> ScriptDataOrFile

-- | By value
ScriptDataValue :: ScriptData -> ScriptDataOrFile
type ScriptRedeemerOrFile = ScriptDataOrFile

-- | This type is like <tt>ScriptWitness</tt>, but the file paths from
--   which to load the script witness data representation.
--   
--   It is era-independent, but witness context-dependent.
data ScriptWitnessFiles witctx
[SimpleScriptWitnessFile] :: ScriptFile -> ScriptWitnessFiles witctx
[PlutusScriptWitnessFiles] :: ScriptFile -> ScriptDatumOrFile witctx -> ScriptRedeemerOrFile -> ExecutionUnits -> ScriptWitnessFiles witctx
[PlutusReferenceScriptWitnessFiles] :: TxIn -> AnyScriptLanguage -> ScriptDatumOrFile witctx -> ScriptRedeemerOrFile -> ExecutionUnits -> Maybe PolicyId -> ScriptWitnessFiles witctx
[SimpleReferenceScriptWitnessFiles] :: TxIn -> AnyScriptLanguage -> Maybe PolicyId -> ScriptWitnessFiles witctx
data ScriptDatumOrFile witctx
[ScriptDatumOrFileForTxIn] :: ScriptDataOrFile -> ScriptDatumOrFile WitCtxTxIn
[InlineDatumPresentAtTxIn] :: ScriptDatumOrFile WitCtxTxIn
[NoScriptDatumOrFileForMint] :: ScriptDatumOrFile WitCtxMint
[NoScriptDatumOrFileForStake] :: ScriptDatumOrFile WitCtxStake
newtype SlotsTillKesKeyExpiry
SlotsTillKesKeyExpiry :: SlotNo -> SlotsTillKesKeyExpiry
[unSlotsTillKesKeyExpiry] :: SlotsTillKesKeyExpiry -> SlotNo

-- | Determines the direction in which the MIR certificate will transfer
--   ADA.
data TransferDirection
TransferToReserves :: TransferDirection
TransferToTreasury :: TransferDirection
newtype TxBodyFile
TxBodyFile :: FilePath -> TxBodyFile

-- | A TxOut value that is the superset of possibilities for any era: any
--   address type and allowing multi-asset values. This is used as the type
--   for values passed on the command line. It can be converted into the
--   era-dependent <tt>TxOutValue</tt> type.
data TxOutAnyEra
TxOutAnyEra :: AddressAny -> Value -> TxOutDatumAnyEra -> ReferenceScriptAnyEra -> TxOutAnyEra

-- | A partially-specified transaction output indented to use as a change
--   output.
--   
--   It does not specify a value, since this will be worked out
--   automatically.
--   
--   It does not use any script data hash, since that's generally not used
--   for change outputs.
newtype TxOutChangeAddress
TxOutChangeAddress :: AddressAny -> TxOutChangeAddress
data TxOutDatumAnyEra
TxOutDatumByHashOnly :: Hash ScriptData -> TxOutDatumAnyEra
TxOutDatumByHashOf :: ScriptDataOrFile -> TxOutDatumAnyEra
TxOutDatumByValue :: ScriptDataOrFile -> TxOutDatumAnyEra
TxOutInlineDatumByValue :: ScriptDataOrFile -> TxOutDatumAnyEra
TxOutDatumByNone :: TxOutDatumAnyEra
newtype TxFile
TxFile :: FilePath -> TxFile
newtype UpdateProposalFile
UpdateProposalFile :: FilePath -> UpdateProposalFile
[unUpdateProposalFile] :: UpdateProposalFile -> FilePath
newtype VerificationKeyFile
VerificationKeyFile :: FilePath -> VerificationKeyFile
[unVerificationKeyFile] :: VerificationKeyFile -> FilePath

-- | This data structure is used to allow nicely formatted output within
--   the query stake-snapshot command.
--   
--   "markPool", "setPool", "goPool" are the three ledger state stake
--   snapshots (from most recent to least recent) go is the snapshot that
--   is used for the current epoch, set will be used in the next epoch,
--   mark for the epoch after that. "markTotal", "setTotal", "goTotal"
--   record the total active stake for each snapshot.
--   
--   This information can be used by community tools to calculate upcoming
--   leader schedules.
data Stakes
Stakes :: Integer -> Integer -> Integer -> Integer -> Integer -> Integer -> Stakes
[markPool] :: Stakes -> Integer
[setPool] :: Stakes -> Integer
[goPool] :: Stakes -> Integer
[markTotal] :: Stakes -> Integer
[setTotal] :: Stakes -> Integer
[goTotal] :: Stakes -> Integer

-- | This data structure is used to allow nicely formatted output in the
--   query pool-params command. params are the current pool parameter
--   settings, futureparams are new parameters, retiringEpoch is the epoch
--   that has been set for pool retirement. Any of these may be Nothing.
data Params crypto
Params :: Maybe (PoolParams crypto) -> Maybe (PoolParams crypto) -> Maybe EpochNo -> Params crypto
[poolParameters] :: Params crypto -> Maybe (PoolParams crypto)
[futurePoolParameters] :: Params crypto -> Maybe (PoolParams crypto)
[retiringEpoch] :: Params crypto -> Maybe EpochNo

-- | Plutus script required signers
data RequiredSigner
RequiredSignerSkeyFile :: SigningKeyFile -> RequiredSigner
RequiredSignerHash :: Hash PaymentKey -> RequiredSigner
instance GHC.Show.Show Cardano.CLI.Types.CBORObject
instance GHC.Classes.Eq Cardano.CLI.Types.CddlTx
instance GHC.Show.Show Cardano.CLI.Types.CddlTx
instance GHC.Show.Show Cardano.CLI.Types.CertificateFile
instance GHC.Classes.Eq Cardano.CLI.Types.CertificateFile
instance GHC.Show.Show Cardano.CLI.Types.CurrentKesPeriod
instance GHC.Classes.Eq Cardano.CLI.Types.CurrentKesPeriod
instance GHC.Show.Show Cardano.CLI.Types.GenesisFile
instance Data.String.IsString Cardano.CLI.Types.GenesisFile
instance GHC.Classes.Ord Cardano.CLI.Types.GenesisFile
instance GHC.Classes.Eq Cardano.CLI.Types.GenesisFile
instance GHC.Show.Show Cardano.CLI.Types.OpCertOnDiskCounter
instance GHC.Classes.Eq Cardano.CLI.Types.OpCertOnDiskCounter
instance GHC.Show.Show Cardano.CLI.Types.OpCertNodeStateCounter
instance GHC.Classes.Eq Cardano.CLI.Types.OpCertNodeStateCounter
instance GHC.Show.Show Cardano.CLI.Types.OpCertNodeAndOnDiskCounterInformation
instance GHC.Classes.Eq Cardano.CLI.Types.OpCertNodeAndOnDiskCounterInformation
instance GHC.Show.Show Cardano.CLI.Types.OpCertStartingKesPeriod
instance GHC.Classes.Eq Cardano.CLI.Types.OpCertStartingKesPeriod
instance GHC.Show.Show Cardano.CLI.Types.OpCertEndingKesPeriod
instance GHC.Classes.Eq Cardano.CLI.Types.OpCertEndingKesPeriod
instance GHC.Show.Show Cardano.CLI.Types.OutputFormat
instance GHC.Classes.Eq Cardano.CLI.Types.OutputFormat
instance GHC.Show.Show Cardano.CLI.Types.Stakes
instance GHC.Show.Show (Cardano.CLI.Types.Params crypto)
instance GHC.Show.Show Cardano.CLI.Types.SigningKeyFile
instance Data.String.IsString Cardano.CLI.Types.SigningKeyFile
instance GHC.Classes.Ord Cardano.CLI.Types.SigningKeyFile
instance GHC.Classes.Eq Cardano.CLI.Types.SigningKeyFile
instance GHC.Show.Show Cardano.CLI.Types.UpdateProposalFile
instance GHC.Classes.Eq Cardano.CLI.Types.UpdateProposalFile
instance GHC.Show.Show Cardano.CLI.Types.VerificationKeyFile
instance GHC.Classes.Eq Cardano.CLI.Types.VerificationKeyFile
instance GHC.Show.Show Cardano.CLI.Types.ScriptFile
instance GHC.Classes.Eq Cardano.CLI.Types.ScriptFile
instance GHC.Show.Show Cardano.CLI.Types.ScriptDataOrFile
instance GHC.Classes.Eq Cardano.CLI.Types.ScriptDataOrFile
instance GHC.Show.Show Cardano.CLI.Types.SlotsTillKesKeyExpiry
instance GHC.Classes.Eq Cardano.CLI.Types.SlotsTillKesKeyExpiry
instance GHC.Show.Show Cardano.CLI.Types.OpCertIntervalInformation
instance GHC.Classes.Eq Cardano.CLI.Types.OpCertIntervalInformation
instance GHC.Show.Show Cardano.CLI.Types.TransferDirection
instance GHC.Show.Show Cardano.CLI.Types.TxOutDatumAnyEra
instance GHC.Classes.Eq Cardano.CLI.Types.TxOutDatumAnyEra
instance GHC.Show.Show Cardano.CLI.Types.ReferenceScriptAnyEra
instance GHC.Classes.Eq Cardano.CLI.Types.ReferenceScriptAnyEra
instance GHC.Show.Show Cardano.CLI.Types.TxOutAnyEra
instance GHC.Classes.Eq Cardano.CLI.Types.TxOutAnyEra
instance GHC.Show.Show Cardano.CLI.Types.TxOutChangeAddress
instance GHC.Classes.Eq Cardano.CLI.Types.TxOutChangeAddress
instance GHC.Show.Show Cardano.CLI.Types.RequiredSigner
instance GHC.Show.Show Cardano.CLI.Types.EpochLeadershipSchedule
instance GHC.Show.Show Cardano.CLI.Types.TxBodyFile
instance GHC.Show.Show Cardano.CLI.Types.TxBuildOutputOptions
instance GHC.Show.Show Cardano.CLI.Types.TxFile
instance GHC.Show.Show (Cardano.CLI.Types.ScriptWitnessFiles witctx)
instance GHC.Show.Show (Cardano.CLI.Types.ScriptDatumOrFile witctx)
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.CLI.Types.SlotsTillKesKeyExpiry
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.CLI.Types.SlotsTillKesKeyExpiry
instance Cardano.Ledger.Crypto.Crypto crypto => Data.Aeson.Types.ToJSON.ToJSON (Cardano.CLI.Types.Params crypto)
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.CLI.Types.Stakes
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.CLI.Types.OpCertEndingKesPeriod
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.CLI.Types.OpCertEndingKesPeriod
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.CLI.Types.OpCertStartingKesPeriod
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.CLI.Types.OpCertStartingKesPeriod
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.CLI.Types.OpCertNodeStateCounter
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.CLI.Types.OpCertNodeStateCounter
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.CLI.Types.OpCertOnDiskCounter
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.CLI.Types.OpCertOnDiskCounter
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.CLI.Types.GenesisFile
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.CLI.Types.CurrentKesPeriod
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.CLI.Types.CurrentKesPeriod

module Cardano.CLI.Shelley.Output
data PlutusScriptCostError
data QueryKesPeriodInfoOutput
QueryKesPeriodInfoOutput :: OpCertIntervalInformation -> Maybe UTCTime -> Maybe OpCertNodeStateCounter -> OpCertOnDiskCounter -> Word64 -> Word64 -> QueryKesPeriodInfoOutput
[$sel:qKesOpCertIntervalInformation:QueryKesPeriodInfoOutput] :: QueryKesPeriodInfoOutput -> OpCertIntervalInformation

-- | Date of KES key expiry.
[$sel:qKesInfoKesKeyExpiry:QueryKesPeriodInfoOutput] :: QueryKesPeriodInfoOutput -> Maybe UTCTime

-- | The latest operational certificate number in the node's state i.e how
--   many times a new KES key has been generated.
[$sel:qKesInfoNodeStateOperationalCertNo:QueryKesPeriodInfoOutput] :: QueryKesPeriodInfoOutput -> Maybe OpCertNodeStateCounter

-- | The on disk operational certificate number.
[$sel:qKesInfoOnDiskOperationalCertNo:QueryKesPeriodInfoOutput] :: QueryKesPeriodInfoOutput -> OpCertOnDiskCounter

-- | The maximum number of KES key evolutions permitted per KES period.
[$sel:qKesInfoMaxKesKeyEvolutions:QueryKesPeriodInfoOutput] :: QueryKesPeriodInfoOutput -> Word64
[$sel:qKesInfoSlotsPerKesPeriod:QueryKesPeriodInfoOutput] :: QueryKesPeriodInfoOutput -> Word64
data QueryTipLocalState mode
QueryTipLocalState :: AnyCardanoEra -> EraHistory CardanoMode -> Maybe SystemStart -> Maybe ChainTip -> QueryTipLocalState mode
[$sel:era:QueryTipLocalState] :: QueryTipLocalState mode -> AnyCardanoEra
[$sel:eraHistory:QueryTipLocalState] :: QueryTipLocalState mode -> EraHistory CardanoMode
[$sel:mSystemStart:QueryTipLocalState] :: QueryTipLocalState mode -> Maybe SystemStart
[$sel:mChainTip:QueryTipLocalState] :: QueryTipLocalState mode -> Maybe ChainTip
data QueryTipLocalStateOutput
QueryTipLocalStateOutput :: ChainTip -> Maybe AnyCardanoEra -> Maybe EpochNo -> Maybe Text -> QueryTipLocalStateOutput
[$sel:localStateChainTip:QueryTipLocalStateOutput] :: QueryTipLocalStateOutput -> ChainTip
[$sel:mEra:QueryTipLocalStateOutput] :: QueryTipLocalStateOutput -> Maybe AnyCardanoEra
[$sel:mEpoch:QueryTipLocalStateOutput] :: QueryTipLocalStateOutput -> Maybe EpochNo
[$sel:mSyncProgress:QueryTipLocalStateOutput] :: QueryTipLocalStateOutput -> Maybe Text
data ScriptCostOutput
ScriptCostOutput :: ScriptHash -> ExecutionUnits -> Lovelace -> ScriptCostOutput
[$sel:scScriptHash:ScriptCostOutput] :: ScriptCostOutput -> ScriptHash
[$sel:scExecutionUnits:ScriptCostOutput] :: ScriptCostOutput -> ExecutionUnits
[$sel:scAda:ScriptCostOutput] :: ScriptCostOutput -> Lovelace
createOpCertIntervalInfo :: CurrentKesPeriod -> OpCertStartingKesPeriod -> OpCertEndingKesPeriod -> Maybe SlotsTillKesKeyExpiry -> OpCertIntervalInformation
renderScriptCosts :: UTxO era -> ExecutionUnitPrices -> [(ScriptWitnessIndex, AnyScriptWitness era)] -> Map ScriptWitnessIndex (Either ScriptExecutionError ExecutionUnits) -> Either PlutusScriptCostError [ScriptCostOutput]
instance GHC.Show.Show Cardano.CLI.Shelley.Output.QueryKesPeriodInfoOutput
instance GHC.Classes.Eq Cardano.CLI.Shelley.Output.QueryKesPeriodInfoOutput
instance GHC.Show.Show Cardano.CLI.Shelley.Output.QueryTipLocalStateOutput
instance GHC.Show.Show Cardano.CLI.Shelley.Output.PlutusScriptCostError
instance Cardano.Api.Error.Error Cardano.CLI.Shelley.Output.PlutusScriptCostError
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.CLI.Shelley.Output.ScriptCostOutput
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.CLI.Shelley.Output.QueryTipLocalStateOutput
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.CLI.Shelley.Output.QueryTipLocalStateOutput
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.CLI.Shelley.Output.QueryKesPeriodInfoOutput
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.CLI.Shelley.Output.QueryKesPeriodInfoOutput


-- | Shelley CLI option data types and functions for cryptographic keys.
module Cardano.CLI.Shelley.Key

-- | Input format/encoding.
data InputFormat a

-- | Bech32 encoding.
[InputFormatBech32] :: SerialiseAsBech32 a => InputFormat a

-- | Hex/Base16 encoding.
[InputFormatHex] :: SerialiseAsRawBytes a => InputFormat a

-- | Text envelope format.
[InputFormatTextEnvelope] :: HasTextEnvelope a => InputFormat a

-- | Input decoding error.
data InputDecodeError

-- | The provided data seems to be a valid text envelope, but some error
--   occurred in deserialising it.
InputTextEnvelopeError :: !TextEnvelopeError -> InputDecodeError

-- | The provided data is valid Bech32, but some error occurred in
--   deserialising it.
InputBech32DecodeError :: !Bech32DecodeError -> InputDecodeError

-- | The provided data does not represent a valid value of the provided
--   type.
InputInvalidError :: InputDecodeError

-- | Deserialise an input of some type that is formatted in some way.
deserialiseInput :: forall a. AsType a -> NonEmpty (InputFormat a) -> ByteString -> Either InputDecodeError a

-- | Deserialise an input of some type that is formatted in some way.
--   
--   The provided <a>ByteString</a> can either be Bech32-encoded or in the
--   text envelope format.
deserialiseInputAnyOf :: forall b. [FromSomeType SerialiseAsBech32 b] -> [FromSomeType HasTextEnvelope b] -> ByteString -> Either InputDecodeError b

-- | Render an error message for a <a>InputDecodeError</a>.
renderInputDecodeError :: InputDecodeError -> Text

-- | Read a cryptographic key from a file.
--   
--   The contents of the file can either be Bech32-encoded, hex-encoded, or
--   in the text envelope format.
readKeyFile :: AsType a -> NonEmpty (InputFormat a) -> FilePath -> IO (Either (FileError InputDecodeError) a)

-- | Read a cryptographic key from a file given that it is one of the
--   provided types.
--   
--   The contents of the file can either be Bech32-encoded or in the text
--   envelope format.
readKeyFileAnyOf :: forall b. [FromSomeType SerialiseAsBech32 b] -> [FromSomeType HasTextEnvelope b] -> FilePath -> IO (Either (FileError InputDecodeError) b)

-- | Read a cryptographic key from a file.
--   
--   The contents of the file must be in the text envelope format.
readKeyFileTextEnvelope :: HasTextEnvelope a => AsType a -> FilePath -> IO (Either (FileError InputDecodeError) a)

-- | Read a signing key from a file.
--   
--   The contents of the file can either be Bech32-encoded, hex-encoded, or
--   in the text envelope format.
readSigningKeyFile :: forall keyrole. (HasTextEnvelope (SigningKey keyrole), SerialiseAsBech32 (SigningKey keyrole)) => AsType keyrole -> SigningKeyFile -> IO (Either (FileError InputDecodeError) (SigningKey keyrole))

-- | Read a signing key from a file given that it is one of the provided
--   types of signing key.
--   
--   The contents of the file can either be Bech32-encoded or in the text
--   envelope format.
readSigningKeyFileAnyOf :: forall b. [FromSomeType SerialiseAsBech32 b] -> [FromSomeType HasTextEnvelope b] -> SigningKeyFile -> IO (Either (FileError InputDecodeError) b)

-- | Either a verification key or path to a verification key file.
data VerificationKeyOrFile keyrole

-- | A verification key.
VerificationKeyValue :: !VerificationKey keyrole -> VerificationKeyOrFile keyrole

-- | A path to a verification key file. Note that this file hasn't been
--   validated at all (whether it exists, contains a key of the correct
--   type, etc.)
VerificationKeyFilePath :: !VerificationKeyFile -> VerificationKeyOrFile keyrole

-- | Read a verification key or verification key file and return a
--   verification key.
--   
--   If a filepath is provided, the file can either be formatted as Bech32,
--   hex, or text envelope.
readVerificationKeyOrFile :: (HasTextEnvelope (VerificationKey keyrole), SerialiseAsBech32 (VerificationKey keyrole)) => AsType keyrole -> VerificationKeyOrFile keyrole -> IO (Either (FileError InputDecodeError) (VerificationKey keyrole))

-- | Read a verification key or verification key file and return a
--   verification key.
--   
--   If a filepath is provided, it will be interpreted as a text envelope
--   formatted file.
readVerificationKeyOrTextEnvFile :: HasTextEnvelope (VerificationKey keyrole) => AsType keyrole -> VerificationKeyOrFile keyrole -> IO (Either (FileError InputDecodeError) (VerificationKey keyrole))

-- | Either an unvalidated text representation of a verification key or a
--   path to a verification key file.
data VerificationKeyTextOrFile
VktofVerificationKeyText :: !Text -> VerificationKeyTextOrFile
VktofVerificationKeyFile :: !VerificationKeyFile -> VerificationKeyTextOrFile

-- | An error in deserialising a <a>VerificationKeyTextOrFile</a> to a
--   <a>VerificationKey</a>.
data VerificationKeyTextOrFileError
VerificationKeyTextError :: !InputDecodeError -> VerificationKeyTextOrFileError
VerificationKeyFileError :: !FileError InputDecodeError -> VerificationKeyTextOrFileError

-- | Deserialise a verification key from text or a verification key file
--   given that it is one of the provided types.
--   
--   If a filepath is provided, the file can either be formatted as Bech32,
--   hex, or text envelope.
readVerificationKeyTextOrFileAnyOf :: forall b. [FromSomeType SerialiseAsBech32 b] -> [FromSomeType HasTextEnvelope b] -> VerificationKeyTextOrFile -> IO (Either VerificationKeyTextOrFileError b)

-- | Render an error message for a <a>VerificationKeyTextOrFileError</a>.
renderVerificationKeyTextOrFileError :: VerificationKeyTextOrFileError -> Text

-- | Verification key, verification key hash, or path to a verification key
--   file.
data VerificationKeyOrHashOrFile keyrole

-- | Either a verification key or path to a verification key file.
VerificationKeyOrFile :: !VerificationKeyOrFile keyrole -> VerificationKeyOrHashOrFile keyrole

-- | A verification key hash.
VerificationKeyHash :: !Hash keyrole -> VerificationKeyOrHashOrFile keyrole

-- | Read a verification key or verification key hash or verification key
--   file and return a verification key hash.
--   
--   If a filepath is provided, the file can either be formatted as Bech32,
--   hex, or text envelope.
readVerificationKeyOrHashOrFile :: (Key keyrole, SerialiseAsBech32 (VerificationKey keyrole)) => AsType keyrole -> VerificationKeyOrHashOrFile keyrole -> IO (Either (FileError InputDecodeError) (Hash keyrole))

-- | Read a verification key or verification key hash or verification key
--   file and return a verification key hash.
--   
--   If a filepath is provided, it will be interpreted as a text envelope
--   formatted file.
readVerificationKeyOrHashOrTextEnvFile :: Key keyrole => AsType keyrole -> VerificationKeyOrHashOrFile keyrole -> IO (Either (FileError InputDecodeError) (Hash keyrole))
data PaymentVerifier
PaymentVerifierKey :: VerificationKeyTextOrFile -> PaymentVerifier
PaymentVerifierScriptFile :: ScriptFile -> PaymentVerifier
data StakeVerifier
StakeVerifierKey :: VerificationKeyOrFile StakeKey -> StakeVerifier
StakeVerifierScriptFile :: ScriptFile -> StakeVerifier
instance GHC.Show.Show Cardano.CLI.Shelley.Key.InputDecodeError
instance GHC.Classes.Eq Cardano.CLI.Shelley.Key.InputDecodeError
instance GHC.Show.Show Cardano.CLI.Shelley.Key.StakeVerifier
instance GHC.Classes.Eq Cardano.CLI.Shelley.Key.StakeVerifier
instance GHC.Show.Show Cardano.CLI.Shelley.Key.VerificationKeyTextOrFile
instance GHC.Classes.Eq Cardano.CLI.Shelley.Key.VerificationKeyTextOrFile
instance GHC.Show.Show Cardano.CLI.Shelley.Key.PaymentVerifier
instance GHC.Classes.Eq Cardano.CLI.Shelley.Key.PaymentVerifier
instance GHC.Show.Show Cardano.CLI.Shelley.Key.VerificationKeyTextOrFileError
instance GHC.Show.Show (Cardano.Api.Key.VerificationKey keyrole) => GHC.Show.Show (Cardano.CLI.Shelley.Key.VerificationKeyOrFile keyrole)
instance GHC.Classes.Eq (Cardano.Api.Key.VerificationKey keyrole) => GHC.Classes.Eq (Cardano.CLI.Shelley.Key.VerificationKeyOrFile keyrole)
instance (GHC.Show.Show (Cardano.CLI.Shelley.Key.VerificationKeyOrFile keyrole), GHC.Show.Show (Cardano.Api.Hash.Hash keyrole)) => GHC.Show.Show (Cardano.CLI.Shelley.Key.VerificationKeyOrHashOrFile keyrole)
instance (GHC.Classes.Eq (Cardano.CLI.Shelley.Key.VerificationKeyOrFile keyrole), GHC.Classes.Eq (Cardano.Api.Hash.Hash keyrole)) => GHC.Classes.Eq (Cardano.CLI.Shelley.Key.VerificationKeyOrHashOrFile keyrole)
instance Cardano.Api.Error.Error Cardano.CLI.Shelley.Key.InputDecodeError


-- | Shelley CLI command types
module Cardano.CLI.Shelley.Commands

-- | All the CLI subcommands under "shelley".
data ShelleyCommand
AddressCmd :: AddressCmd -> ShelleyCommand
StakeAddressCmd :: StakeAddressCmd -> ShelleyCommand
KeyCmd :: KeyCmd -> ShelleyCommand
TransactionCmd :: TransactionCmd -> ShelleyCommand
NodeCmd :: NodeCmd -> ShelleyCommand
PoolCmd :: PoolCmd -> ShelleyCommand
QueryCmd :: QueryCmd -> ShelleyCommand
GovernanceCmd :: GovernanceCmd -> ShelleyCommand
GenesisCmd :: GenesisCmd -> ShelleyCommand
TextViewCmd :: TextViewCmd -> ShelleyCommand
data AddressCmd
AddressKeyGen :: AddressKeyType -> VerificationKeyFile -> SigningKeyFile -> AddressCmd
AddressKeyHash :: VerificationKeyTextOrFile -> Maybe OutputFile -> AddressCmd
AddressBuild :: PaymentVerifier -> Maybe StakeVerifier -> NetworkId -> Maybe OutputFile -> AddressCmd
AddressBuildMultiSig :: ScriptFile -> NetworkId -> Maybe OutputFile -> AddressCmd
AddressInfo :: Text -> Maybe OutputFile -> AddressCmd
data StakeAddressCmd
StakeAddressKeyGen :: VerificationKeyFile -> SigningKeyFile -> StakeAddressCmd
StakeAddressKeyHash :: VerificationKeyOrFile StakeKey -> Maybe OutputFile -> StakeAddressCmd
StakeAddressBuild :: StakeVerifier -> NetworkId -> Maybe OutputFile -> StakeAddressCmd
StakeRegistrationCert :: StakeVerifier -> OutputFile -> StakeAddressCmd
StakeCredentialDelegationCert :: StakeVerifier -> VerificationKeyOrHashOrFile StakePoolKey -> OutputFile -> StakeAddressCmd
StakeCredentialDeRegistrationCert :: StakeVerifier -> OutputFile -> StakeAddressCmd
data KeyCmd
KeyGetVerificationKey :: SigningKeyFile -> VerificationKeyFile -> KeyCmd
KeyNonExtendedKey :: VerificationKeyFile -> VerificationKeyFile -> KeyCmd
KeyConvertByronKey :: Maybe Text -> ByronKeyType -> SomeKeyFile -> OutputFile -> KeyCmd
KeyConvertByronGenesisVKey :: VerificationKeyBase64 -> OutputFile -> KeyCmd
KeyConvertITNStakeKey :: SomeKeyFile -> OutputFile -> KeyCmd
KeyConvertITNExtendedToStakeKey :: SomeKeyFile -> OutputFile -> KeyCmd
KeyConvertITNBip32ToStakeKey :: SomeKeyFile -> OutputFile -> KeyCmd
KeyConvertCardanoAddressSigningKey :: CardanoAddressKeyType -> SigningKeyFile -> OutputFile -> KeyCmd
data TransactionCmd
TxBuildRaw :: AnyCardanoEra -> Maybe ScriptValidity -> [(TxIn, Maybe (ScriptWitnessFiles WitCtxTxIn))] -> [TxIn] -> [TxIn] -> Maybe TxOutAnyEra -> Maybe Lovelace -> [RequiredSigner] -> [TxOutAnyEra] -> Maybe (Value, [ScriptWitnessFiles WitCtxMint]) -> Maybe SlotNo -> Maybe SlotNo -> Maybe Lovelace -> [(CertificateFile, Maybe (ScriptWitnessFiles WitCtxStake))] -> [(StakeAddress, Lovelace, Maybe (ScriptWitnessFiles WitCtxStake))] -> TxMetadataJsonSchema -> [ScriptFile] -> [MetadataFile] -> Maybe ProtocolParamsSourceSpec -> Maybe UpdateProposalFile -> TxBodyFile -> TransactionCmd

-- | Like <a>TxBuildRaw</a> but without the fee, and with a change output.
TxBuild :: AnyCardanoEra -> AnyConsensusModeParams -> NetworkId -> Maybe ScriptValidity -> Maybe Word -> [(TxIn, Maybe (ScriptWitnessFiles WitCtxTxIn))] -> [TxIn] -> [RequiredSigner] -> [TxIn] -> Maybe TxOutAnyEra -> Maybe Lovelace -> [TxOutAnyEra] -> TxOutChangeAddress -> Maybe (Value, [ScriptWitnessFiles WitCtxMint]) -> Maybe SlotNo -> Maybe SlotNo -> [(CertificateFile, Maybe (ScriptWitnessFiles WitCtxStake))] -> [(StakeAddress, Lovelace, Maybe (ScriptWitnessFiles WitCtxStake))] -> TxMetadataJsonSchema -> [ScriptFile] -> [MetadataFile] -> Maybe ProtocolParamsSourceSpec -> Maybe UpdateProposalFile -> TxBuildOutputOptions -> TransactionCmd
TxSign :: InputTxBodyOrTxFile -> [WitnessSigningData] -> Maybe NetworkId -> TxFile -> TransactionCmd
TxCreateWitness :: TxBodyFile -> WitnessSigningData -> Maybe NetworkId -> OutputFile -> TransactionCmd
TxAssembleTxBodyWitness :: TxBodyFile -> [WitnessFile] -> OutputFile -> TransactionCmd
TxSubmit :: AnyConsensusModeParams -> NetworkId -> FilePath -> TransactionCmd
TxMintedPolicyId :: ScriptFile -> TransactionCmd
TxCalculateMinFee :: TxBodyFile -> Maybe NetworkId -> ProtocolParamsSourceSpec -> TxInCount -> TxOutCount -> TxShelleyWitnessCount -> TxByronWitnessCount -> TransactionCmd
TxCalculateMinRequiredUTxO :: AnyCardanoEra -> ProtocolParamsSourceSpec -> TxOutAnyEra -> TransactionCmd
TxHashScriptData :: ScriptDataOrFile -> TransactionCmd
TxGetTxId :: InputTxBodyOrTxFile -> TransactionCmd
TxView :: InputTxBodyOrTxFile -> TransactionCmd
data NodeCmd
NodeKeyGenCold :: VerificationKeyFile -> SigningKeyFile -> OpCertCounterFile -> NodeCmd
NodeKeyGenKES :: VerificationKeyFile -> SigningKeyFile -> NodeCmd
NodeKeyGenVRF :: VerificationKeyFile -> SigningKeyFile -> NodeCmd
NodeKeyHashVRF :: VerificationKeyOrFile VrfKey -> Maybe OutputFile -> NodeCmd
NodeNewCounter :: ColdVerificationKeyOrFile -> Word -> OpCertCounterFile -> NodeCmd
NodeIssueOpCert :: VerificationKeyOrFile KesKey -> SigningKeyFile -> OpCertCounterFile -> KESPeriod -> OutputFile -> NodeCmd
data PoolCmd
PoolRegistrationCert :: VerificationKeyOrFile StakePoolKey -> VerificationKeyOrFile VrfKey -> Lovelace -> Lovelace -> Rational -> VerificationKeyOrFile StakeKey -> [VerificationKeyOrFile StakeKey] -> [StakePoolRelay] -> Maybe StakePoolMetadataReference -> NetworkId -> OutputFile -> PoolCmd
PoolRetirementCert :: VerificationKeyOrFile StakePoolKey -> EpochNo -> OutputFile -> PoolCmd
PoolGetId :: VerificationKeyOrFile StakePoolKey -> OutputFormat -> PoolCmd
PoolMetadataHash :: PoolMetadataFile -> Maybe OutputFile -> PoolCmd
data QueryCmd
QueryLeadershipSchedule :: AnyConsensusModeParams -> NetworkId -> GenesisFile -> VerificationKeyOrHashOrFile StakePoolKey -> SigningKeyFile -> EpochLeadershipSchedule -> Maybe OutputFile -> QueryCmd
QueryProtocolParameters' :: AnyConsensusModeParams -> NetworkId -> Maybe OutputFile -> QueryCmd
QueryTip :: AnyConsensusModeParams -> NetworkId -> Maybe OutputFile -> QueryCmd
QueryStakePools' :: AnyConsensusModeParams -> NetworkId -> Maybe OutputFile -> QueryCmd
QueryStakeDistribution' :: AnyConsensusModeParams -> NetworkId -> Maybe OutputFile -> QueryCmd
QueryStakeAddressInfo :: AnyConsensusModeParams -> StakeAddress -> NetworkId -> Maybe OutputFile -> QueryCmd
QueryUTxO' :: AnyConsensusModeParams -> QueryUTxOFilter -> NetworkId -> Maybe OutputFile -> QueryCmd
QueryDebugLedgerState' :: AnyConsensusModeParams -> NetworkId -> Maybe OutputFile -> QueryCmd
QueryProtocolState' :: AnyConsensusModeParams -> NetworkId -> Maybe OutputFile -> QueryCmd
QueryStakeSnapshot' :: AnyConsensusModeParams -> NetworkId -> Hash StakePoolKey -> QueryCmd
QueryPoolParams' :: AnyConsensusModeParams -> NetworkId -> Hash StakePoolKey -> QueryCmd
QueryKesPeriodInfo :: AnyConsensusModeParams -> NetworkId -> FilePath -> Maybe OutputFile -> QueryCmd
data GovernanceCmd
GovernanceMIRPayStakeAddressesCertificate :: MIRPot -> [StakeAddress] -> [Lovelace] -> OutputFile -> GovernanceCmd
GovernanceMIRTransfer :: Lovelace -> OutputFile -> TransferDirection -> GovernanceCmd
GovernanceGenesisKeyDelegationCertificate :: VerificationKeyOrHashOrFile GenesisKey -> VerificationKeyOrHashOrFile GenesisDelegateKey -> VerificationKeyOrHashOrFile VrfKey -> OutputFile -> GovernanceCmd
GovernanceUpdateProposal :: OutputFile -> EpochNo -> [VerificationKeyFile] -> ProtocolParametersUpdate -> Maybe FilePath -> GovernanceCmd
data GenesisCmd
GenesisCreate :: GenesisDir -> Word -> Word -> Maybe SystemStart -> Maybe Lovelace -> NetworkId -> GenesisCmd
GenesisCreateCardano :: GenesisDir -> Word -> Word -> Maybe SystemStart -> Maybe Lovelace -> BlockCount -> Word -> Rational -> NetworkId -> FilePath -> FilePath -> FilePath -> Maybe FilePath -> GenesisCmd
GenesisCreateStaked :: GenesisDir -> Word -> Word -> Word -> Word -> Maybe SystemStart -> Maybe Lovelace -> Lovelace -> NetworkId -> Word -> Word -> Word -> GenesisCmd
GenesisKeyGenGenesis :: VerificationKeyFile -> SigningKeyFile -> GenesisCmd
GenesisKeyGenDelegate :: VerificationKeyFile -> SigningKeyFile -> OpCertCounterFile -> GenesisCmd
GenesisKeyGenUTxO :: VerificationKeyFile -> SigningKeyFile -> GenesisCmd
GenesisCmdKeyHash :: VerificationKeyFile -> GenesisCmd
GenesisVerKey :: VerificationKeyFile -> SigningKeyFile -> GenesisCmd
GenesisTxIn :: VerificationKeyFile -> NetworkId -> Maybe OutputFile -> GenesisCmd
GenesisAddr :: VerificationKeyFile -> NetworkId -> Maybe OutputFile -> GenesisCmd
GenesisHashFile :: GenesisFile -> GenesisCmd
data TextViewCmd
TextViewInfo :: !FilePath -> Maybe OutputFile -> TextViewCmd
renderShelleyCommand :: ShelleyCommand -> Text
data AddressKeyType
AddressKeyShelley :: AddressKeyType
AddressKeyShelleyExtended :: AddressKeyType
AddressKeyByron :: AddressKeyType
data ByronKeyType
ByronPaymentKey :: ByronKeyFormat -> ByronKeyType
ByronGenesisKey :: ByronKeyFormat -> ByronKeyType
ByronDelegateKey :: ByronKeyFormat -> ByronKeyType
data ByronKeyFormat
NonLegacyByronKeyFormat :: ByronKeyFormat
LegacyByronKeyFormat :: ByronKeyFormat

-- | The type of <tt>cardano-address</tt> key.
data CardanoAddressKeyType
CardanoAddressShelleyPaymentKey :: CardanoAddressKeyType
CardanoAddressShelleyStakeKey :: CardanoAddressKeyType
CardanoAddressIcarusPaymentKey :: CardanoAddressKeyType
CardanoAddressByronPaymentKey :: CardanoAddressKeyType
newtype GenesisDir
GenesisDir :: FilePath -> GenesisDir
newtype TxInCount
TxInCount :: Int -> TxInCount
newtype TxOutCount
TxOutCount :: Int -> TxOutCount
newtype TxShelleyWitnessCount
TxShelleyWitnessCount :: Int -> TxShelleyWitnessCount
newtype TxByronWitnessCount
TxByronWitnessCount :: Int -> TxByronWitnessCount

-- | Either a verification or signing key, used for conversions and other
--   commands that make sense for both.
data SomeKeyFile
AVerificationKeyFile :: VerificationKeyFile -> SomeKeyFile
ASigningKeyFile :: SigningKeyFile -> SomeKeyFile
newtype OpCertCounterFile
OpCertCounterFile :: FilePath -> OpCertCounterFile
newtype OutputFile
OutputFile :: FilePath -> OutputFile
newtype ProtocolParamsFile
ProtocolParamsFile :: FilePath -> ProtocolParamsFile
data ProtocolParamsSourceSpec

-- | We allow an appropriately forewarned user to obtain protocol params
--   directly from the genesis file, which allows them to avoid running the
--   node in case they would like to estimate the fee using the
--   blockchain's initial protocol parameters.
ParamsFromGenesis :: !GenesisFile -> ProtocolParamsSourceSpec

-- | Obtain protocol parameters from a file structured by the 'cardano-api'
--   <a>ProtocolParameters</a> data type.
ParamsFromFile :: !ProtocolParamsFile -> ProtocolParamsSourceSpec
newtype WitnessFile
WitnessFile :: FilePath -> WitnessFile
newtype TxFile
TxFile :: FilePath -> TxFile
data InputTxBodyOrTxFile
InputTxBodyFile :: TxBodyFile -> InputTxBodyOrTxFile
InputTxFile :: TxFile -> InputTxBodyOrTxFile

-- | A raw verification key given in Base64, and decoded into a ByteString.
newtype VerificationKeyBase64
VerificationKeyBase64 :: String -> VerificationKeyBase64
newtype GenesisKeyFile
GenesisKeyFile :: FilePath -> GenesisKeyFile
data MetadataFile
MetadataFileJSON :: FilePath -> MetadataFile
MetadataFileCBOR :: FilePath -> MetadataFile
newtype PoolMetadataFile
PoolMetadataFile :: FilePath -> PoolMetadataFile
[unPoolMetadataFile] :: PoolMetadataFile -> FilePath
newtype PrivKeyFile
PrivKeyFile :: FilePath -> PrivKeyFile
newtype BlockId
BlockId :: String -> BlockId

-- | Data required to construct a witness.
data WitnessSigningData
KeyWitnessSigningData :: !SigningKeyFile -> !Maybe (Address ByronAddr) -> WitnessSigningData

-- | Either a stake pool verification key, genesis delegate verification
--   key, or a path to a cold verification key file.
--   
--   Note that a "cold verification key" refers to either a stake pool or
--   genesis delegate verification key.
--   
--   TODO: A genesis delegate extended key should also be valid here.
data ColdVerificationKeyOrFile
ColdStakePoolVerificationKey :: !VerificationKey StakePoolKey -> ColdVerificationKeyOrFile
ColdGenesisDelegateVerificationKey :: !VerificationKey GenesisDelegateKey -> ColdVerificationKeyOrFile
ColdVerificationKeyFile :: !VerificationKeyFile -> ColdVerificationKeyOrFile
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.InputTxBodyOrTxFile
instance GHC.Classes.Eq Cardano.CLI.Shelley.Commands.ProtocolParamsFile
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.ProtocolParamsFile
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.ProtocolParamsSourceSpec
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.TxInCount
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.TxOutCount
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.TxShelleyWitnessCount
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.TxByronWitnessCount
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.BlockId
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.GenesisKeyFile
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.MetadataFile
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.OutputFile
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.TextViewCmd
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.GovernanceCmd
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.QueryCmd
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.StakeAddressCmd
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.PoolMetadataFile
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.PoolCmd
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.GenesisDir
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.SomeKeyFile
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.AddressKeyType
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.AddressCmd
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.ByronKeyFormat
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.ByronKeyType
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.CardanoAddressKeyType
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.OpCertCounterFile
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.GenesisCmd
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.PrivKeyFile
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.WitnessFile
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.VerificationKeyBase64
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.KeyCmd
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.WitnessSigningData
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.ColdVerificationKeyOrFile
instance GHC.Show.Show Cardano.CLI.Shelley.Commands.NodeCmd

module Cardano.CLI.Shelley.Run.Pool
data ShelleyPoolCmdError
ShelleyPoolCmdReadFileError :: !FileError TextEnvelopeError -> ShelleyPoolCmdError
renderShelleyPoolCmdError :: ShelleyPoolCmdError -> Text
runPoolCmd :: PoolCmd -> ExceptT ShelleyPoolCmdError IO ()
instance GHC.Show.Show Cardano.CLI.Shelley.Run.Pool.ShelleyPoolCmdError

module Cardano.CLI.Shelley.Run.Node
data ShelleyNodeCmdError
ShelleyNodeCmdReadFileError :: !FileError TextEnvelopeError -> ShelleyNodeCmdError
renderShelleyNodeCmdError :: ShelleyNodeCmdError -> Text
runNodeCmd :: NodeCmd -> ExceptT ShelleyNodeCmdError IO ()
runNodeIssueOpCert :: VerificationKeyOrFile KesKey -> SigningKeyFile -> OpCertCounterFile -> KESPeriod -> OutputFile -> ExceptT ShelleyNodeCmdError IO ()
runNodeKeyGenCold :: VerificationKeyFile -> SigningKeyFile -> OpCertCounterFile -> ExceptT ShelleyNodeCmdError IO ()
runNodeKeyGenKES :: VerificationKeyFile -> SigningKeyFile -> ExceptT ShelleyNodeCmdError IO ()
runNodeKeyGenVRF :: VerificationKeyFile -> SigningKeyFile -> ExceptT ShelleyNodeCmdError IO ()

-- | Read a cold verification key or file.
--   
--   If a filepath is provided, it will be interpreted as a text envelope
--   formatted file.
readColdVerificationKeyOrFile :: ColdVerificationKeyOrFile -> IO (Either (FileError TextEnvelopeError) (VerificationKey StakePoolKey))
instance GHC.Show.Show Cardano.CLI.Shelley.Run.Node.ShelleyNodeCmdError

module Cardano.CLI.Shelley.Parsers
parseShelleyCommands :: Parser ShelleyCommand
parseTxIn :: Parser TxIn
instance GHC.Show.Show Cardano.CLI.Shelley.Parsers.FileDirection
instance GHC.Classes.Eq Cardano.CLI.Shelley.Parsers.FileDirection

module Cardano.CLI.Shelley.Run.StakeAddress
data ShelleyStakeAddressCmdError
ShelleyStakeAddressCmdReadKeyFileError :: !FileError InputDecodeError -> ShelleyStakeAddressCmdError
renderShelleyStakeAddressCmdError :: ShelleyStakeAddressCmdError -> Text
runStakeAddressCmd :: StakeAddressCmd -> ExceptT ShelleyStakeAddressCmdError IO ()
runStakeAddressKeyGen :: VerificationKeyFile -> SigningKeyFile -> ExceptT ShelleyStakeAddressCmdError IO ()
instance GHC.Show.Show Cardano.CLI.Shelley.Run.StakeAddress.ShelleyStakeAddressCmdError

module Cardano.CLI.Shelley.Run.Governance
data ShelleyGovernanceCmdError
renderShelleyGovernanceError :: ShelleyGovernanceCmdError -> Text
runGovernanceCmd :: GovernanceCmd -> ExceptT ShelleyGovernanceCmdError IO ()
instance GHC.Show.Show Cardano.CLI.Shelley.Run.Governance.ShelleyGovernanceCmdError

module Cardano.CLI.Shelley.Run.Address.Info
runAddressInfo :: Text -> Maybe OutputFile -> ExceptT ShelleyAddressInfoError IO ()
newtype ShelleyAddressInfoError
ShelleyAddressInvalid :: Text -> ShelleyAddressInfoError
instance GHC.Show.Show Cardano.CLI.Shelley.Run.Address.Info.ShelleyAddressInfoError
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.CLI.Shelley.Run.Address.Info.AddressInfo
instance Cardano.Api.Error.Error Cardano.CLI.Shelley.Run.Address.Info.ShelleyAddressInfoError

module Cardano.CLI.Helpers
data HelpersError
CBORPrettyPrintError :: !DeserialiseFailure -> HelpersError
CBORDecodingError :: !DeserialiseFailure -> HelpersError
IOError' :: !FilePath -> !IOException -> HelpersError
OutputMustNotAlreadyExist :: FilePath -> HelpersError
ReadCBORFileFailure :: !FilePath -> !Text -> HelpersError
deprecationWarning :: String -> IO ()

-- | Checks if a path exists and throws and error if it does.
ensureNewFile :: (FilePath -> a -> IO ()) -> FilePath -> a -> ExceptT HelpersError IO ()
ensureNewFileLBS :: FilePath -> ByteString -> ExceptT HelpersError IO ()
pPrintCBOR :: LByteString -> ExceptT HelpersError IO ()
readCBOR :: FilePath -> ExceptT HelpersError IO LByteString
renderHelpersError :: HelpersError -> Text
validateCBOR :: CBORObject -> LByteString -> Either HelpersError Text

-- | Convert an Either to a Maybe and execute the supplied handler in the
--   Left case.
hushM :: forall e m a. Monad m => Either e a -> (e -> m ()) -> m (Maybe a)
instance GHC.Show.Show Cardano.CLI.Helpers.HelpersError

module Cardano.CLI.Shelley.Run.TextView
data ShelleyTextViewFileError
TextViewReadFileError :: FileError TextEnvelopeError -> ShelleyTextViewFileError
TextViewCBORPrettyPrintError :: !HelpersError -> ShelleyTextViewFileError
renderShelleyTextViewFileError :: ShelleyTextViewFileError -> Text
runTextViewCmd :: TextViewCmd -> ExceptT ShelleyTextViewFileError IO ()
instance GHC.Show.Show Cardano.CLI.Shelley.Run.TextView.ShelleyTextViewFileError

module Cardano.CLI.Shelley.Run.Address
data ShelleyAddressCmdError
ShelleyAddressCmdAddressInfoError :: !ShelleyAddressInfoError -> ShelleyAddressCmdError
ShelleyAddressCmdReadKeyFileError :: !FileError InputDecodeError -> ShelleyAddressCmdError
ShelleyAddressCmdReadScriptFileError :: !FileError ScriptDecodeError -> ShelleyAddressCmdError
ShelleyAddressCmdVerificationKeyTextOrFileError :: !VerificationKeyTextOrFileError -> ShelleyAddressCmdError
ShelleyAddressCmdWriteFileError :: !FileError () -> ShelleyAddressCmdError
data SomeAddressVerificationKey
AByronVerificationKey :: VerificationKey ByronKey -> SomeAddressVerificationKey
APaymentVerificationKey :: VerificationKey PaymentKey -> SomeAddressVerificationKey
APaymentExtendedVerificationKey :: VerificationKey PaymentExtendedKey -> SomeAddressVerificationKey
AGenesisUTxOVerificationKey :: VerificationKey GenesisUTxOKey -> SomeAddressVerificationKey
buildShelleyAddress :: VerificationKey PaymentKey -> Maybe StakeVerifier -> NetworkId -> ExceptT ShelleyAddressCmdError IO (Address ShelleyAddr)
renderShelleyAddressCmdError :: ShelleyAddressCmdError -> Text
runAddressCmd :: AddressCmd -> ExceptT ShelleyAddressCmdError IO ()
runAddressKeyGen :: AddressKeyType -> VerificationKeyFile -> SigningKeyFile -> ExceptT ShelleyAddressCmdError IO ()
readAddressVerificationKeyTextOrFile :: VerificationKeyTextOrFile -> ExceptT VerificationKeyTextOrFileError IO SomeAddressVerificationKey
instance GHC.Show.Show Cardano.CLI.Shelley.Run.Address.ShelleyAddressCmdError
instance GHC.Show.Show Cardano.CLI.Shelley.Run.Address.SomeAddressVerificationKey

module Cardano.CLI.Byron.Key
data ByronKeyFailure
ReadSigningKeyFailure :: !FilePath -> !Text -> ByronKeyFailure
ReadVerificationKeyFailure :: !FilePath -> !Text -> ByronKeyFailure
LegacySigningKeyDeserialisationFailed :: !FilePath -> ByronKeyFailure
SigningKeyDeserialisationFailed :: !FilePath -> ByronKeyFailure
VerificationKeyDeserialisationFailed :: !FilePath -> !Text -> ByronKeyFailure
CannotMigrateFromNonLegacySigningKey :: !FilePath -> ByronKeyFailure
newtype NewSigningKeyFile
NewSigningKeyFile :: FilePath -> NewSigningKeyFile
newtype NewVerificationKeyFile
NewVerificationKeyFile :: FilePath -> NewVerificationKeyFile
newtype VerificationKeyFile
VerificationKeyFile :: FilePath -> VerificationKeyFile
[unVerificationKeyFile] :: VerificationKeyFile -> FilePath

-- | Print some invariant properties of a public key: its hash and
--   formatted view.
prettyPublicKey :: VerificationKey ByronKey -> Text

-- | Read signing key from a file.
readByronSigningKey :: ByronKeyFormat -> SigningKeyFile -> ExceptT ByronKeyFailure IO SomeByronSigningKey

-- | Read verification key from a file. Throw an error if the file can't be
--   read or the key fails to deserialise.
readPaymentVerificationKey :: VerificationKeyFile -> ExceptT ByronKeyFailure IO VerificationKey
renderByronKeyFailure :: ByronKeyFailure -> Text
byronWitnessToVerKey :: SomeByronSigningKey -> VerificationKey ByronKey
instance GHC.Show.Show Cardano.CLI.Byron.Key.ByronKeyFailure
instance Data.String.IsString Cardano.CLI.Byron.Key.NewSigningKeyFile
instance GHC.Show.Show Cardano.CLI.Byron.Key.NewSigningKeyFile
instance GHC.Classes.Ord Cardano.CLI.Byron.Key.NewSigningKeyFile
instance GHC.Classes.Eq Cardano.CLI.Byron.Key.NewSigningKeyFile
instance Data.String.IsString Cardano.CLI.Byron.Key.NewVerificationKeyFile
instance GHC.Show.Show Cardano.CLI.Byron.Key.NewVerificationKeyFile
instance GHC.Classes.Ord Cardano.CLI.Byron.Key.NewVerificationKeyFile
instance GHC.Classes.Eq Cardano.CLI.Byron.Key.NewVerificationKeyFile

module Cardano.CLI.Shelley.Run.Key
data ShelleyKeyCmdError
data SomeSigningKey
AByronSigningKey :: SigningKey ByronKey -> SomeSigningKey
APaymentSigningKey :: SigningKey PaymentKey -> SomeSigningKey
APaymentExtendedSigningKey :: SigningKey PaymentExtendedKey -> SomeSigningKey
AStakeSigningKey :: SigningKey StakeKey -> SomeSigningKey
AStakeExtendedSigningKey :: SigningKey StakeExtendedKey -> SomeSigningKey
AStakePoolSigningKey :: SigningKey StakePoolKey -> SomeSigningKey
AGenesisSigningKey :: SigningKey GenesisKey -> SomeSigningKey
AGenesisExtendedSigningKey :: SigningKey GenesisExtendedKey -> SomeSigningKey
AGenesisDelegateSigningKey :: SigningKey GenesisDelegateKey -> SomeSigningKey
AGenesisDelegateExtendedSigningKey :: SigningKey GenesisDelegateExtendedKey -> SomeSigningKey
AGenesisUTxOSigningKey :: SigningKey GenesisUTxOKey -> SomeSigningKey
AVrfSigningKey :: SigningKey VrfKey -> SomeSigningKey
AKesSigningKey :: SigningKey KesKey -> SomeSigningKey
renderShelleyKeyCmdError :: ShelleyKeyCmdError -> Text
runKeyCmd :: KeyCmd -> ExceptT ShelleyKeyCmdError IO ()
data SomeExtendedVerificationKey
APaymentExtendedVerificationKey :: VerificationKey PaymentExtendedKey -> SomeExtendedVerificationKey
AStakeExtendedVerificationKey :: VerificationKey StakeExtendedKey -> SomeExtendedVerificationKey
AGenesisExtendedVerificationKey :: VerificationKey GenesisExtendedKey -> SomeExtendedVerificationKey
AGenesisDelegateExtendedVerificationKey :: VerificationKey GenesisDelegateExtendedKey -> SomeExtendedVerificationKey

-- | Decode a Bech32-encoded string.
decodeBech32 :: Text -> Either Bech32DecodeError (HumanReadablePart, DataPart, ByteString)
instance GHC.Show.Show Cardano.CLI.Shelley.Run.Key.ItnKeyConversionError
instance GHC.Classes.Eq Cardano.CLI.Shelley.Run.Key.CardanoAddressSigningKeyConversionError
instance GHC.Show.Show Cardano.CLI.Shelley.Run.Key.CardanoAddressSigningKeyConversionError
instance GHC.Show.Show Cardano.CLI.Shelley.Run.Key.ShelleyKeyCmdError
instance Cardano.Api.Error.Error Cardano.CLI.Shelley.Run.Key.CardanoAddressSigningKeyConversionError

module Cardano.CLI.Byron.Tx
data ByronTxError
TxDeserialisationFailed :: !FilePath -> !DecoderError -> ByronTxError
ByronTxSubmitError :: !Text -> ByronTxError
ByronTxSubmitErrorEraMismatch :: !EraMismatch -> ByronTxError
EnvSocketError :: !EnvSocketError -> ByronTxError
newtype TxFile
TxFile :: FilePath -> TxFile
newtype NewTxFile
NewTxFile :: FilePath -> NewTxFile

-- | Pretty-print an address in its Base58 form, and also its full
--   structure.
prettyAddress :: Address ByronAddr -> Text
readByronTx :: TxFile -> ExceptT ByronTxError IO (ATxAux ByteString)

-- | The <a>GenTx</a> is all the kinds of transactions that can be
--   submitted and "normal" Byron transactions are just one of the kinds.
normalByronTxToGenTx :: ATxAux ByteString -> GenTx ByronBlock

-- | Generate a transaction spending genesis UTxO at a given address, to
--   given outputs, signed by the given key.
txSpendGenesisUTxOByronPBFT :: Config -> NetworkId -> SomeByronSigningKey -> Address ByronAddr -> [TxOut CtxTx ByronEra] -> Tx ByronEra

-- | Generate a transaction from given Tx inputs to outputs, signed by the
--   given key.
txSpendUTxOByronPBFT :: NetworkId -> SomeByronSigningKey -> [TxIn] -> [TxOut CtxTx ByronEra] -> Tx ByronEra

-- | Submit a transaction to a node specified by topology info.
nodeSubmitTx :: NetworkId -> GenTx ByronBlock -> ExceptT ByronTxError IO ()
renderByronTxError :: ByronTxError -> Text
fromCborTxAux :: ByteString -> Either DecoderError (ATxAux ByteString)
toCborTxAux :: ATxAux ByteString -> ByteString

-- | Indicates whether a script is expected to fail or pass validation.
data ScriptValidity

-- | Script is expected to fail validation. Transactions marked as such can
--   include scripts that fail validation. Such transactions may be
--   submitted to the chain, in which case the collateral will be taken
--   upon on chain script validation failure.
ScriptInvalid :: ScriptValidity

-- | Script is expected to pass validation. Transactions marked as such
--   cannot include scripts that fail validation.
ScriptValid :: ScriptValidity
instance GHC.Show.Show Cardano.CLI.Byron.Tx.ByronTxError
instance Data.String.IsString Cardano.CLI.Byron.Tx.NewTxFile
instance GHC.Show.Show Cardano.CLI.Byron.Tx.NewTxFile
instance GHC.Classes.Ord Cardano.CLI.Byron.Tx.NewTxFile
instance GHC.Classes.Eq Cardano.CLI.Byron.Tx.NewTxFile

module Cardano.CLI.Byron.Delegation
data ByronDelegationError
CertificateValidationErrors :: !FilePath -> ![Text] -> ByronDelegationError
DlgCertificateDeserialisationFailed :: !FilePath -> !Text -> ByronDelegationError
ByronDelegationKeyError :: !ByronKeyFailure -> ByronDelegationError

-- | Verify that a certificate signifies genesis delegation by assumed
--   genesis key to a delegate key, for a given protocol magic. If
--   certificate fails validation, throw an error.
checkByronGenesisDelegation :: CertificateFile -> ProtocolMagicId -> VerificationKey -> VerificationKey -> ExceptT ByronDelegationError IO ()

-- | Issue a certificate for genesis delegation to a delegate key, signed
--   by the issuer key, for a given protocol magic and coming into effect
--   at given epoch.
issueByronGenesisDelegation :: ProtocolMagicId -> EpochNumber -> SigningKey -> VerificationKey -> Certificate
renderByronDelegationError :: ByronDelegationError -> Text
serialiseDelegationCert :: Certificate -> ByteString
serialiseByronWitness :: SomeByronSigningKey -> ByteString
instance GHC.Show.Show Cardano.CLI.Byron.Delegation.ByronDelegationError

module Cardano.CLI.Byron.Genesis
data ByronGenesisError
ByronDelegationCertSerializationError :: !ByronDelegationError -> ByronGenesisError
ByronDelegationKeySerializationError :: ByronDelegationError -> ByronGenesisError
GenesisGenerationError :: !GenesisDataGenerationError -> ByronGenesisError
GenesisOutputDirAlreadyExists :: FilePath -> ByronGenesisError
GenesisReadError :: !FilePath -> !GenesisDataError -> ByronGenesisError
GenesisSpecError :: !Text -> ByronGenesisError
MakeGenesisDelegationError :: !GenesisDelegationError -> ByronGenesisError
NoGenesisDelegationForKey :: !Text -> ByronGenesisError
ProtocolParametersParseFailed :: !FilePath -> !Text -> ByronGenesisError
PoorKeyFailure :: !ByronKeyFailure -> ByronGenesisError

-- | Parameters required for generation of new genesis.
data GenesisParameters
GenesisParameters :: !UTCTime -> !FilePath -> !BlockCount -> !ProtocolMagic -> !TestnetBalanceOptions -> !FakeAvvmOptions -> !LovelacePortion -> !Maybe Integer -> GenesisParameters
[gpStartTime] :: GenesisParameters -> !UTCTime
[gpProtocolParamsFile] :: GenesisParameters -> !FilePath
[gpK] :: GenesisParameters -> !BlockCount
[gpProtocolMagic] :: GenesisParameters -> !ProtocolMagic
[gpTestnetBalance] :: GenesisParameters -> !TestnetBalanceOptions
[gpFakeAvvmOptions] :: GenesisParameters -> !FakeAvvmOptions
[gpAvvmBalanceFactor] :: GenesisParameters -> !LovelacePortion
[gpSeed] :: GenesisParameters -> !Maybe Integer
newtype NewDirectory
NewDirectory :: FilePath -> NewDirectory

-- | Write out genesis into a directory that must not yet exist. An error
--   is thrown if the directory already exists, or the genesis has delegate
--   keys that are not delegated to.
dumpGenesis :: NewDirectory -> GenesisData -> GeneratedSecrets -> ExceptT ByronGenesisError IO ()

-- | Generate a genesis, for given blockchain start time, protocol
--   parameters, security parameter, protocol magic, testnet balance
--   options, fake AVVM options, AVVM balance factor and seed. Throw an
--   error in the following cases: if the protocol parameters file can't be
--   read or fails parse, if genesis delegation couldn't be generated, if
--   the parameter-derived genesis specification is wrong, or if the
--   genesis fails generation.
mkGenesis :: GenesisParameters -> ExceptT ByronGenesisError IO (GenesisData, GeneratedSecrets)

-- | Read genesis from a file.
readGenesis :: GenesisFile -> NetworkId -> ExceptT ByronGenesisError IO Config
renderByronGenesisError :: ByronGenesisError -> Text
instance GHC.Show.Show Cardano.CLI.Byron.Genesis.ByronGenesisError
instance Data.String.IsString Cardano.CLI.Byron.Genesis.NewDirectory
instance GHC.Show.Show Cardano.CLI.Byron.Genesis.NewDirectory
instance GHC.Classes.Ord Cardano.CLI.Byron.Genesis.NewDirectory
instance GHC.Classes.Eq Cardano.CLI.Byron.Genesis.NewDirectory
instance GHC.Show.Show Cardano.CLI.Byron.Genesis.GenesisParameters

module Cardano.CLI.Shelley.Run.Genesis
data ShelleyGenesisCmdError
ShelleyGenesisCmdAesonDecodeError :: !FilePath -> !Text -> ShelleyGenesisCmdError
ShelleyGenesisCmdGenesisFileReadError :: !FileError IOException -> ShelleyGenesisCmdError
ShelleyGenesisCmdGenesisFileDecodeError :: !FilePath -> !Text -> ShelleyGenesisCmdError
ShelleyGenesisCmdGenesisFileError :: !FileError () -> ShelleyGenesisCmdError
ShelleyGenesisCmdFileError :: !FileError () -> ShelleyGenesisCmdError
ShelleyGenesisCmdMismatchedGenesisKeyFiles :: [Int] -> [Int] -> [Int] -> ShelleyGenesisCmdError
ShelleyGenesisCmdFilesNoIndex :: [FilePath] -> ShelleyGenesisCmdError
ShelleyGenesisCmdFilesDupIndex :: [FilePath] -> ShelleyGenesisCmdError
ShelleyGenesisCmdTextEnvReadFileError :: !FileError TextEnvelopeError -> ShelleyGenesisCmdError
ShelleyGenesisCmdUnexpectedAddressVerificationKey :: !VerificationKeyFile -> !Text -> !SomeAddressVerificationKey -> ShelleyGenesisCmdError
ShelleyGenesisCmdTooFewPoolsForBulkCreds :: !Word -> !Word -> !Word -> ShelleyGenesisCmdError
ShelleyGenesisCmdAddressCmdError :: !ShelleyAddressCmdError -> ShelleyGenesisCmdError
ShelleyGenesisCmdNodeCmdError :: !ShelleyNodeCmdError -> ShelleyGenesisCmdError
ShelleyGenesisCmdPoolCmdError :: !ShelleyPoolCmdError -> ShelleyGenesisCmdError
ShelleyGenesisCmdStakeAddressCmdError :: !ShelleyStakeAddressCmdError -> ShelleyGenesisCmdError
ShelleyGenesisCmdCostModelsError :: !FilePath -> ShelleyGenesisCmdError
ShelleyGenesisCmdByronError :: !ByronGenesisError -> ShelleyGenesisCmdError

-- | Attempts to read Shelley genesis from disk and if not found creates a
--   default Shelley genesis.
readShelleyGenesisWithDefault :: FilePath -> (ShelleyGenesis StandardShelley -> ShelleyGenesis StandardShelley) -> ExceptT ShelleyGenesisCmdError IO (ShelleyGenesis StandardShelley)
readAndDecodeShelleyGenesis :: FilePath -> IO (Either ShelleyGenesisCmdError (ShelleyGenesis StandardShelley))
readAlonzoGenesis :: FilePath -> ExceptT ShelleyGenesisCmdError IO AlonzoGenesis
runGenesisCmd :: GenesisCmd -> ExceptT ShelleyGenesisCmdError IO ()
instance GHC.Show.Show Cardano.CLI.Shelley.Run.Genesis.ShelleyGenesisCmdError
instance Cardano.Api.Error.Error Cardano.CLI.Shelley.Run.Genesis.ShelleyGenesisCmdError

module Cardano.CLI.Shelley.Run.Transaction
data ShelleyTxCmdError
renderShelleyTxCmdError :: ShelleyTxCmdError -> Text
runTransactionCmd :: TransactionCmd -> ExceptT ShelleyTxCmdError IO ()
readCddlTx :: FilePath -> IO (Either (FileError TextEnvelopeCddlError) CddlTx)
readFileTx :: FilePath -> ExceptT ShelleyTxCmdError IO (InAnyCardanoEra Tx)
readProtocolParametersSourceSpec :: ProtocolParamsSourceSpec -> ExceptT ShelleyTxCmdError IO ProtocolParameters
toTxOutInAnyEra :: CardanoEra era -> TxOutAnyEra -> ExceptT ShelleyTxCmdError IO (TxOut CtxTx era)
instance GHC.Show.Show Cardano.CLI.Shelley.Run.Transaction.TxFeature
instance GHC.Show.Show Cardano.CLI.Shelley.Run.Transaction.ReadWitnessSigningDataError
instance GHC.Show.Show Cardano.CLI.Shelley.Run.Transaction.ShelleyBootstrapWitnessError

module Cardano.CLI.Shelley.Run.Query

-- | A mapping of Shelley reward accounts to both the stake pool that they
--   delegate to and their reward account balance. TODO: Move to
--   cardano-api
newtype DelegationsAndRewards
DelegationsAndRewards :: (Map StakeAddress Lovelace, Map StakeAddress PoolId) -> DelegationsAndRewards
data ShelleyQueryCmdError

-- | An error that can occur while querying a node's local state.
data ShelleyQueryCmdLocalStateQueryError
AcquireFailureError :: !AcquireFailure -> ShelleyQueryCmdLocalStateQueryError

-- | A query from a certain era was applied to a ledger from a different
--   era.
EraMismatchError :: !EraMismatch -> ShelleyQueryCmdLocalStateQueryError

-- | The query does not support the Byron protocol.
ByronProtocolNotSupportedError :: ShelleyQueryCmdLocalStateQueryError

-- | The Shelley protocol only supports the Shelley era.
ShelleyProtocolEraMismatch :: ShelleyQueryCmdLocalStateQueryError
renderOpCertIntervalInformation :: FilePath -> OpCertIntervalInformation -> String
renderShelleyQueryCmdError :: ShelleyQueryCmdError -> Text
renderLocalStateQueryError :: ShelleyQueryCmdLocalStateQueryError -> Text
runQueryCmd :: QueryCmd -> ExceptT ShelleyQueryCmdError IO ()
mergeDelegsAndRewards :: DelegationsAndRewards -> [(StakeAddress, Maybe Lovelace, Maybe PoolId)]

-- | Calculate the percentage sync rendered as text.
percentage :: RelativeTime -> RelativeTime -> RelativeTime -> Text
executeQuery :: forall result era mode. CardanoEra era -> ConsensusModeParams mode -> LocalNodeConnectInfo mode -> QueryInMode mode (Either EraMismatch result) -> ExceptT ShelleyQueryCmdError IO result
instance GHC.Show.Show Cardano.CLI.Shelley.Run.Query.ShelleyQueryCmdLocalStateQueryError
instance GHC.Classes.Eq Cardano.CLI.Shelley.Run.Query.ShelleyQueryCmdLocalStateQueryError
instance GHC.Show.Show Cardano.CLI.Shelley.Run.Query.ShelleyQueryCmdError
instance GHC.Show.Show Cardano.CLI.Shelley.Run.Query.DelegationsAndRewards
instance GHC.Classes.Eq Cardano.CLI.Shelley.Run.Query.DelegationsAndRewards
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.CLI.Shelley.Run.Query.DelegationsAndRewards
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.CLI.Shelley.Run.Query.DelegationsAndRewards

module Cardano.CLI.Shelley.Run
data ShelleyClientCmdError
renderShelleyClientCmdError :: ShelleyCommand -> ShelleyClientCmdError -> Text
runShelleyClientCommand :: ShelleyCommand -> ExceptT ShelleyClientCmdError IO ()

module Cardano.CLI.Byron.UpdateProposal
data ByronUpdateProposalError
ByronReadUpdateProposalFileFailure :: !FilePath -> !Text -> ByronUpdateProposalError
ByronUpdateProposalWriteError :: !HelpersError -> ByronUpdateProposalError
ByronUpdateProposalGenesisReadError :: !FilePath -> !ByronGenesisError -> ByronUpdateProposalError
ByronUpdateProposalTxError :: !ByronTxError -> ByronUpdateProposalError
ReadSigningKeyFailure :: !FilePath -> !ByronKeyFailure -> ByronUpdateProposalError
UpdateProposalDecodingError :: !FilePath -> ByronUpdateProposalError
runProposalCreation :: NetworkId -> SigningKeyFile -> ProtocolVersion -> SoftwareVersion -> SystemTag -> InstallerHash -> FilePath -> ByronProtocolParametersUpdate -> ExceptT ByronUpdateProposalError IO ()
readByronUpdateProposal :: FilePath -> ExceptT ByronUpdateProposalError IO ByronUpdateProposal
renderByronUpdateProposalError :: ByronUpdateProposalError -> Text
submitByronUpdateProposal :: NetworkId -> FilePath -> ExceptT ByronUpdateProposalError IO ()
instance GHC.Show.Show Cardano.CLI.Byron.UpdateProposal.ByronUpdateProposalError

module Cardano.CLI.Byron.Vote
data ByronVoteError
ByronVoteDecodingError :: !FilePath -> ByronVoteError
ByronVoteGenesisReadError :: !ByronGenesisError -> ByronVoteError
ByronVoteKeyReadFailure :: !ByronKeyFailure -> ByronVoteError
ByronVoteReadFileFailure :: !FilePath -> !Text -> ByronVoteError
ByronVoteTxSubmissionError :: !ByronTxError -> ByronVoteError
ByronVoteUpdateProposalFailure :: !ByronUpdateProposalError -> ByronVoteError
ByronVoteUpdateProposalDecodingError :: !DecoderError -> ByronVoteError
ByronVoteUpdateHelperError :: !HelpersError -> ByronVoteError
readByronVote :: FilePath -> ExceptT ByronVoteError IO ByronVote
renderByronVoteError :: ByronVoteError -> Text
runVoteCreation :: NetworkId -> SigningKeyFile -> FilePath -> Bool -> FilePath -> ExceptT ByronVoteError IO ()
submitByronVote :: NetworkId -> FilePath -> ExceptT ByronVoteError IO ()
instance GHC.Show.Show Cardano.CLI.Byron.Vote.ByronVoteError

module Cardano.CLI.Byron.Commands
data ByronCommand
NodeCmd :: NodeCmd -> ByronCommand
Genesis :: NewDirectory -> GenesisParameters -> ByronCommand
PrintGenesisHash :: GenesisFile -> ByronCommand
Keygen :: NewSigningKeyFile -> ByronCommand
ToVerification :: ByronKeyFormat -> SigningKeyFile -> NewVerificationKeyFile -> ByronCommand
PrettySigningKeyPublic :: ByronKeyFormat -> SigningKeyFile -> ByronCommand
MigrateDelegateKeyFrom :: SigningKeyFile -> NewSigningKeyFile -> ByronCommand
PrintSigningKeyAddress :: ByronKeyFormat -> NetworkId -> SigningKeyFile -> ByronCommand
GetLocalNodeTip :: NetworkId -> ByronCommand

-- | Filepath of transaction to submit.
SubmitTx :: NetworkId -> TxFile -> ByronCommand
SpendGenesisUTxO :: GenesisFile -> NetworkId -> ByronKeyFormat -> NewTxFile -> SigningKeyFile -> Address ByronAddr -> [TxOut CtxTx ByronEra] -> ByronCommand
SpendUTxO :: NetworkId -> ByronKeyFormat -> NewTxFile -> SigningKeyFile -> [TxIn] -> [TxOut CtxTx ByronEra] -> ByronCommand
GetTxId :: TxFile -> ByronCommand
ValidateCBOR :: CBORObject -> FilePath -> ByronCommand
PrettyPrintCBOR :: FilePath -> ByronCommand
data NodeCmd
CreateVote :: NetworkId -> SigningKeyFile -> FilePath -> Bool -> FilePath -> NodeCmd
UpdateProposal :: NetworkId -> SigningKeyFile -> ProtocolVersion -> SoftwareVersion -> SystemTag -> InstallerHash -> FilePath -> ByronProtocolParametersUpdate -> NodeCmd

-- | Update proposal filepath.
SubmitUpdateProposal :: NetworkId -> FilePath -> NodeCmd

-- | Vote filepath.
SubmitVote :: NetworkId -> FilePath -> NodeCmd
newtype VerificationKeyFile
VerificationKeyFile :: FilePath -> VerificationKeyFile
[unVerificationKeyFile] :: VerificationKeyFile -> FilePath
newtype NewVerificationKeyFile
NewVerificationKeyFile :: FilePath -> NewVerificationKeyFile
newtype CertificateFile
CertificateFile :: FilePath -> CertificateFile
[unCertificateFile] :: CertificateFile -> FilePath
newtype NewCertificateFile
NewCertificateFile :: FilePath -> NewCertificateFile
[nFp] :: NewCertificateFile -> FilePath
instance GHC.Show.Show Cardano.CLI.Byron.Commands.NodeCmd
instance GHC.Show.Show Cardano.CLI.Byron.Commands.ByronCommand
instance Data.String.IsString Cardano.CLI.Byron.Commands.NewCertificateFile
instance GHC.Show.Show Cardano.CLI.Byron.Commands.NewCertificateFile
instance GHC.Classes.Eq Cardano.CLI.Byron.Commands.NewCertificateFile

module Cardano.CLI.Byron.Run

-- | Data type that encompasses all the possible errors of the Byron
--   client.
data ByronClientCmdError
renderByronClientCmdError :: ByronClientCmdError -> Text
runByronClientCommand :: ByronCommand -> ExceptT ByronClientCmdError IO ()
instance GHC.Show.Show Cardano.CLI.Byron.Run.ByronClientCmdError


-- | Dispatch for running all the CLI commands
module Cardano.CLI.Run

-- | Sub-commands of 'cardano-cli'.
data ClientCommand

-- | Byron Related Commands
ByronCommand :: ByronCommand -> ClientCommand

-- | Shelley Related Commands
ShelleyCommand :: ShelleyCommand -> ClientCommand

-- | Shelley-related commands that have been parsed under the
--   now-deprecated "shelley" subcommand.
DeprecatedShelleySubcommand :: ShelleyCommand -> ClientCommand
Help :: ParserPrefs -> ParserInfo a -> ClientCommand
DisplayVersion :: ClientCommand
data ClientCommandErrors
renderClientCommandError :: ClientCommandErrors -> Text
runClientCommand :: ClientCommand -> ExceptT ClientCommandErrors IO ()

module Cardano.CLI.Byron.Parsers
data ByronCommand
NodeCmd :: NodeCmd -> ByronCommand
Genesis :: NewDirectory -> GenesisParameters -> ByronCommand
PrintGenesisHash :: GenesisFile -> ByronCommand
Keygen :: NewSigningKeyFile -> ByronCommand
ToVerification :: ByronKeyFormat -> SigningKeyFile -> NewVerificationKeyFile -> ByronCommand
PrettySigningKeyPublic :: ByronKeyFormat -> SigningKeyFile -> ByronCommand
MigrateDelegateKeyFrom :: SigningKeyFile -> NewSigningKeyFile -> ByronCommand
PrintSigningKeyAddress :: ByronKeyFormat -> NetworkId -> SigningKeyFile -> ByronCommand
GetLocalNodeTip :: NetworkId -> ByronCommand

-- | Filepath of transaction to submit.
SubmitTx :: NetworkId -> TxFile -> ByronCommand
SpendGenesisUTxO :: GenesisFile -> NetworkId -> ByronKeyFormat -> NewTxFile -> SigningKeyFile -> Address ByronAddr -> [TxOut CtxTx ByronEra] -> ByronCommand
SpendUTxO :: NetworkId -> ByronKeyFormat -> NewTxFile -> SigningKeyFile -> [TxIn] -> [TxOut CtxTx ByronEra] -> ByronCommand
GetTxId :: TxFile -> ByronCommand
ValidateCBOR :: CBORObject -> FilePath -> ByronCommand
PrettyPrintCBOR :: FilePath -> ByronCommand
data NodeCmd
CreateVote :: NetworkId -> SigningKeyFile -> FilePath -> Bool -> FilePath -> NodeCmd
UpdateProposal :: NetworkId -> SigningKeyFile -> ProtocolVersion -> SoftwareVersion -> SystemTag -> InstallerHash -> FilePath -> ByronProtocolParametersUpdate -> NodeCmd

-- | Update proposal filepath.
SubmitUpdateProposal :: NetworkId -> FilePath -> NodeCmd

-- | Vote filepath.
SubmitVote :: NetworkId -> FilePath -> NodeCmd
backwardsCompatibilityCommands :: Parser ClientCommand
parseByronCommands :: Parser ByronCommand
parseHeavyDelThd :: Parser LovelacePortion
parseInstallerHash :: Parser InstallerHash
parseMaxBlockSize :: Parser Natural
parseMaxHeaderSize :: Parser Natural
parseMaxTxSize :: Parser Natural
parseMaxProposalSize :: Parser Natural
parseMpcThd :: Parser LovelacePortion
parseScriptVersion :: Parser Word16
parseSlotDuration :: Parser Natural
parseSoftforkRule :: Parser SoftforkRule
parseSystemTag :: Parser SystemTag
parseTxFeePolicy :: Parser TxFeePolicy
parseUpdateProposalThd :: Parser LovelacePortion
parseUpdateProposalTTL :: Parser SlotNumber
parseUnlockStakeEpoch :: Parser EpochNumber
parseUpdateVoteThd :: Parser LovelacePortion

module Cardano.CLI.Parsers
opts :: ParserInfo ClientCommand
pref :: ParserPrefs
