-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package cardano-streaming
@version 1.2.0.0

module Cardano.Streaming.Helpers
data ChainSyncEvent a
RollForward :: a -> ChainTip -> ChainSyncEvent a
RollBackward :: ChainPoint -> ChainTip -> ChainSyncEvent a
data ChainSyncEventException
NoIntersectionFound :: ChainSyncEventException
data RollbackException
RollbackLocationNotFound :: ChainPoint -> ChainTip -> RollbackException
bimBlockNo :: BlockInMode CardanoMode -> BlockNo
bimSlotNo :: BlockInMode CardanoMode -> SlotNo
getEpochNo :: LedgerState -> Maybe EpochNo
fromChainTip :: ChainTip -> WithOrigin BlockNo
linkedAsync :: IO a -> IO ()
mkLocalNodeConnectInfo :: NetworkId -> FilePath -> LocalNodeConnectInfo CardanoMode

-- | Derive LocalNodeConnectInfo from Env.
mkConnectInfo :: Env -> FilePath -> LocalNodeConnectInfo CardanoMode

-- | Ignore rollback events in the chainsync event stream. Useful for
--   monitor which blocks has been seen by the node, regardless whether
--   they are permanent.
ignoreRollbacks :: Monad m => Stream (Of (ChainSyncEvent a)) m r -> Stream (Of a) m r
instance GHC.Generics.Generic (Cardano.Streaming.Helpers.ChainSyncEvent a)
instance GHC.Base.Functor Cardano.Streaming.Helpers.ChainSyncEvent
instance GHC.Show.Show a => GHC.Show.Show (Cardano.Streaming.Helpers.ChainSyncEvent a)
instance GHC.Show.Show Cardano.Streaming.Helpers.ChainSyncEventException
instance GHC.Show.Show Cardano.Streaming.Helpers.RollbackException
instance GHC.Classes.Eq Cardano.Streaming.Helpers.RollbackException
instance GHC.Show.Show Cardano.Api.LedgerState.FoldBlocksError
instance GHC.Show.Show Cardano.Api.LedgerState.InitialLedgerStateError
instance GHC.Show.Show Cardano.Api.LedgerState.GenesisConfigError
instance GHC.Exception.Type.Exception Cardano.Streaming.Helpers.RollbackException
instance GHC.Exception.Type.Exception Cardano.Streaming.Helpers.ChainSyncEventException
instance GHC.Exception.Type.Exception Cardano.Api.LedgerState.LedgerStateError
instance GHC.Exception.Type.Exception Cardano.Api.LedgerState.FoldBlocksError
instance GHC.Exception.Type.Exception Cardano.Api.LedgerState.InitialLedgerStateError

module Cardano.Streaming.Callbacks
blocksCallbackPipelined :: Word32 -> LocalNodeConnectInfo CardanoMode -> ChainPoint -> (ChainSyncEvent (BlockInMode CardanoMode) -> IO ()) -> IO ()
blocksCallback :: LocalNodeConnectInfo CardanoMode -> ChainPoint -> (ChainSyncEvent (BlockInMode CardanoMode) -> IO ()) -> IO ()

module Cardano.Streaming

-- | <a>withChainSyncEventStream</a> uses the chain-sync mini-protocol to
--   connect to a locally running node and fetch blocks from the given
--   starting point.
withChainSyncEventStream :: FilePath -> NetworkId -> [ChainPoint] -> (Stream (Of (ChainSyncEvent (BlockInMode CardanoMode))) IO r -> IO b) -> IO b
data ChainSyncEvent a
RollForward :: a -> ChainTip -> ChainSyncEvent a
RollBackward :: ChainPoint -> ChainTip -> ChainSyncEvent a
data ChainSyncEventException
NoIntersectionFound :: ChainSyncEventException

-- | Derive LocalNodeConnectInfo from Env.
mkConnectInfo :: Env -> FilePath -> LocalNodeConnectInfo CardanoMode
mkLocalNodeConnectInfo :: NetworkId -> FilePath -> LocalNodeConnectInfo CardanoMode

-- | Create stream of <tt>ChainSyncEvent (BlockInMode CardanoMode)</tt>
--   from a node at <tt>socketPath</tt> with <tt>networkId</tt> starting at
--   <tt>point</tt>.
blocks :: LocalNodeConnectInfo CardanoMode -> ChainPoint -> Stream (Of (ChainSyncEvent (BlockInMode CardanoMode))) IO r
blocksPipelined :: Word32 -> LocalNodeConnectInfo CardanoMode -> ChainPoint -> Stream (Of (ChainSyncEvent (BlockInMode CardanoMode))) IO r

-- | Get a stream of permanent ledger states
ledgerStates :: FilePath -> FilePath -> ValidationMode -> Stream (Of LedgerState) IO r

-- | Get a stream of ledger states over a pipelined chain sync
ledgerStatesPipelined :: Word32 -> FilePath -> FilePath -> ValidationMode -> Stream (Of LedgerState) IO r

-- | Fold a stream of blocks into a stream of ledger states. This is
--   implemented in a similar way as <tt>foldBlocks</tt> in
--   cardano-api:Cardano.Api.LedgerState, the difference being that this
--   keeps waiting for more blocks when chainsync server and client are
--   fully synchronized.
foldLedgerState :: Env -> LedgerStateHistory -> ValidationMode -> Stream (Of (ChainSyncEvent (BlockInMode CardanoMode))) IO r -> Stream (Of LedgerState) IO r

-- | Like <a>foldLedgerState</a>, but also produces blocks and
--   <a>LedgerEvent</a>s.
foldLedgerStateEvents :: Env -> LedgerStateHistory -> ValidationMode -> Stream (Of (ChainSyncEvent (BlockInMode CardanoMode))) IO r -> Stream (Of (BlockInMode CardanoMode, LedgerStateEvents)) IO r
getEnvAndInitialLedgerStateHistory :: FilePath -> IO (Env, LedgerStateHistory)

-- | Ignore rollback events in the chainsync event stream. Useful for
--   monitor which blocks has been seen by the node, regardless whether
--   they are permanent.
ignoreRollbacks :: Monad m => Stream (Of (ChainSyncEvent a)) m r -> Stream (Of a) m r
