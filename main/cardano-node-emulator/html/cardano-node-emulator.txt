-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package cardano-node-emulator
@version 1.2.0.0

module Cardano.Node.Emulator.TimeSlot

-- | Datatype to configure the length (ms) of one slot and the beginning of
--   the first slot.
data SlotConfig
SlotConfig :: !Integer -> !POSIXTime -> SlotConfig

-- | Length (number of milliseconds) of one slot
[scSlotLength] :: SlotConfig -> !Integer

-- | Beginning of slot 0 (in milliseconds)
[scSlotZeroTime] :: SlotConfig -> !POSIXTime
data SlotConversionError
SlotOutOfRange :: !Slot -> !(Slot, POSIXTime) -> SlotConversionError
[requestedSlot] :: SlotConversionError -> !Slot
[horizon] :: SlotConversionError -> !(Slot, POSIXTime)

-- | Convert a <a>SlotRange</a> to a <a>POSIXTimeRange</a> given a
--   <a>SlotConfig</a>. The resulting <a>POSIXTimeRange</a> refers to the
--   starting time of the lower bound of the <a>SlotRange</a> and the
--   ending time of the upper bound of the <a>SlotRange</a>.
slotRangeToPOSIXTimeRange :: SlotConfig -> SlotRange -> POSIXTimeRange

-- | Convert a <a>Slot</a> to a <a>POSIXTimeRange</a> given a
--   <a>SlotConfig</a>. Each <a>Slot</a> can be represented by an interval
--   of time.
slotToPOSIXTimeRange :: SlotConfig -> Slot -> POSIXTimeRange

-- | Get the starting <a>POSIXTime</a> of a <a>Slot</a> given a
--   <a>SlotConfig</a>.
slotToBeginPOSIXTime :: SlotConfig -> Slot -> POSIXTime

-- | Get the ending <a>POSIXTime</a> of a <a>Slot</a> given a
--   <a>SlotConfig</a>.
slotToEndPOSIXTime :: SlotConfig -> Slot -> POSIXTime

-- | Convert a <a>POSIXTimeRange</a> to <a>SlotRange</a> given a
--   <a>SlotConfig</a>. This gives the biggest slot range that is entirely
--   contained by the given time range.
posixTimeRangeToContainedSlotRange :: SlotConfig -> POSIXTimeRange -> SlotRange

-- | Convert a <a>POSIXTime</a> to <a>Slot</a> given a <a>SlotConfig</a>.
posixTimeToEnclosingSlot :: SlotConfig -> POSIXTime -> Slot

-- | Get the current slot number
currentSlot :: SlotConfig -> IO Slot
utcTimeToPOSIXTime :: UTCTime -> POSIXTime
posixTimeToUTCTime :: POSIXTime -> UTCTime
nominalDiffTimeToPOSIXTime :: NominalDiffTime -> POSIXTime
posixTimeToNominalDiffTime :: POSIXTime -> NominalDiffTime
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Node.Emulator.TimeSlot.SlotConversionError
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Node.Emulator.TimeSlot.SlotConversionError
instance GHC.Generics.Generic Cardano.Node.Emulator.TimeSlot.SlotConversionError
instance GHC.Show.Show Cardano.Node.Emulator.TimeSlot.SlotConversionError
instance GHC.Classes.Eq Cardano.Node.Emulator.TimeSlot.SlotConversionError
instance Prettyprinter.Internal.Pretty Cardano.Node.Emulator.TimeSlot.SlotConversionError
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Cardano.Node.Emulator.TimeSlot.SlotConfig
instance PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni Cardano.Node.Emulator.TimeSlot.SlotConfig
instance Data.Default.Class.Default Cardano.Node.Emulator.TimeSlot.SlotConfig
instance Prettyprinter.Internal.Pretty Cardano.Node.Emulator.TimeSlot.SlotConfig
instance Codec.Serialise.Class.Serialise Cardano.Node.Emulator.TimeSlot.SlotConfig
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Node.Emulator.TimeSlot.SlotConfig
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Node.Emulator.TimeSlot.SlotConfig
instance GHC.Generics.Generic Cardano.Node.Emulator.TimeSlot.SlotConfig
instance GHC.Show.Show Cardano.Node.Emulator.TimeSlot.SlotConfig
instance GHC.Classes.Eq Cardano.Node.Emulator.TimeSlot.SlotConfig


-- | The set of parameters, like protocol parameters and slot
--   configuration.
module Cardano.Node.Emulator.Params
data Params
Params :: !SlotConfig -> !PParams -> !NetworkId -> Params
[pSlotConfig] :: Params -> !SlotConfig

-- | Convert <a>Params</a> to cardano-ledger <a>PParams</a>
[emulatorPParams] :: Params -> !PParams
[pNetworkId] :: Params -> !NetworkId
paramsWithProtocolsParameters :: SlotConfig -> ProtocolParameters -> NetworkId -> Params
slotConfigL :: Lens' Params SlotConfig
emulatorPParamsL :: Lens' Params PParams
pParamsFromProtocolParams :: ProtocolParameters -> PParams
pProtocolParams :: Params -> ProtocolParameters
protocolParamsL :: Lens' Params ProtocolParameters
networkIdL :: Lens' Params NetworkId

-- | Set higher limits on transaction size and execution units. This can be
--   used to work around <tt>MaxTxSizeUTxO</tt> and
--   <tt>ExUnitsTooBigUTxO</tt> errors. Note that if you need this your
--   Plutus script will probably not validate on Mainnet.
increaseTransactionLimits :: Params -> Params
increaseTransactionLimits' :: Natural -> Natural -> Natural -> Params -> Params
genesisDefaultsFromParams :: Params -> ShelleyGenesis EmulatorEra

-- | The default era for the emulator
type EmulatorEra = BabbageEra StandardCrypto
type PParams = PParams EmulatorEra

-- | Calculate the cardano-ledger <a>SlotLength</a>
slotLength :: Params -> SlotLength

-- | The network id used by default by <tt>Param</tt>
testnet :: NetworkId

-- | A sensible default <a>EpochSize</a> value for the emulator
emulatorEpochSize :: EpochSize

-- | A sensible default <a>Globals</a> value for the emulator
emulatorGlobals :: Params -> Globals

-- | A sensible default <tt>EraHistory</tt> value for the emulator
emulatorEraHistory :: Params -> EraHistory CardanoMode
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Node.Emulator.Params.Params
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Node.Emulator.Params.Params
instance Prettyprinter.Internal.Pretty Cardano.Node.Emulator.Params.Params
instance Data.Default.Class.Default Cardano.Node.Emulator.Params.Params
instance Data.Default.Class.Default Cardano.Api.ProtocolParameters.ProtocolParameters
instance GHC.Generics.Generic Cardano.Node.Emulator.Params.Params
instance GHC.Show.Show Cardano.Node.Emulator.Params.Params
instance GHC.Classes.Eq Cardano.Node.Emulator.Params.Params
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Api.NetworkId.NetworkId
instance Data.Aeson.Types.ToJSON.ToJSON Ouroboros.Network.Magic.NetworkMagic
instance Data.Aeson.Types.FromJSON.FromJSON Ouroboros.Network.Magic.NetworkMagic
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Api.NetworkId.NetworkId


-- | Transaction validation using 'cardano-ledger-specs'
module Cardano.Node.Emulator.Validation
type EmulatorBlock = [Validated (Tx EmulatorEra)]

-- | State of the ledger with configuration, mempool, and the blockchain.
data EmulatedLedgerState
EmulatedLedgerState :: !MempoolEnv EmulatorEra -> !MempoolState EmulatorEra -> !EmulatorBlock -> ![EmulatorBlock] -> EmulatedLedgerState
[_ledgerEnv] :: EmulatedLedgerState -> !MempoolEnv EmulatorEra
[_memPoolState] :: EmulatedLedgerState -> !MempoolState EmulatorEra
[_currentBlock] :: EmulatedLedgerState -> !EmulatorBlock
[_previousBlocks] :: EmulatedLedgerState -> ![EmulatorBlock]

-- | The amount of value held by a transaction output.
newtype Coin
Coin :: Integer -> Coin
[unCoin] :: Coin -> Integer

-- | The 0-based index for the Ourboros time slot.
newtype SlotNo
SlotNo :: Word64 -> SlotNo
[unSlotNo] :: SlotNo -> Word64

-- | The default era for the emulator
type EmulatorEra = BabbageEra StandardCrypto
type CardanoLedgerError = Either ValidationErrorInPhase ToCardanoError

-- | Initial ledger state for a distribution
initialState :: Params -> EmulatedLedgerState
hasValidationErrors :: Params -> SlotNo -> UTxO EmulatorEra -> Tx BabbageEra -> Either ValidationErrorInPhase ValidationSuccess
makeTransactionBody :: Params -> UTxO EmulatorEra -> CardanoBuildTx -> Either CardanoLedgerError (TxBody BabbageEra)
validateCardanoTx :: Params -> Slot -> UTxO EmulatorEra -> CardanoTx -> Either ValidationErrorInPhase ValidationSuccess

-- | Make a block with all transactions that have been validated in the
--   current block, add the block to the blockchain, and empty the current
--   block.
makeBlock :: EmulatedLedgerState -> EmulatedLedgerState

-- | Set the slot number
setSlot :: SlotNo -> EmulatedLedgerState -> EmulatedLedgerState

-- | Increase the slot number by one
nextSlot :: EmulatedLedgerState -> EmulatedLedgerState

-- | The unspent transaction outputs.
newtype UTxO era
UTxO :: Map (TxIn (Crypto era)) (TxOut era) -> UTxO era
[unUTxO] :: UTxO era -> Map (TxIn (Crypto era)) (TxOut era)

-- | Set the utxo
setUtxo :: UTxO EmulatorEra -> EmulatedLedgerState -> EmulatedLedgerState
ledgerEnv :: Lens' EmulatedLedgerState (MempoolEnv EmulatorEra)
memPoolState :: Lens' EmulatedLedgerState (MempoolState EmulatorEra)
currentBlock :: Lens' EmulatedLedgerState EmulatorBlock
previousBlocks :: Lens' EmulatedLedgerState [EmulatorBlock]

-- | A sensible default <a>Globals</a> value for the emulator
emulatorGlobals :: Params -> Globals
instance GHC.Show.Show Cardano.Node.Emulator.Validation.EmulatedLedgerState


-- | Generators for constructing blockchains and transactions for use in
--   property-based testing.
module Cardano.Node.Emulator.Generators

-- | Blockchain for testing the emulator implementation and traces.
--   
--   To avoid having to rely on functions from the implementation of
--   plutus-ledger (in particular, <a>unspentOutputs</a>) we note the
--   unspent outputs of the chain when it is first created.
data Mockchain
Mockchain :: [CardanoTx] -> Map TxIn TxOut -> Params -> Mockchain
[mockchainInitialTxPool] :: Mockchain -> [CardanoTx]
[mockchainUtxo] :: Mockchain -> Map TxIn TxOut
[mockchainParams] :: Mockchain -> Params

-- | Generate a mockchain using the default <a>GeneratorModel</a>.
genMockchain :: Gen Mockchain

-- | Generate a mockchain.
--   
--   TODO: Generate more than 1 txn
genMockchain' :: GeneratorModel -> Gen Mockchain

-- | The empty mockchain.
emptyChain :: Mockchain

-- | The parameters for the generators in this module.
data GeneratorModel
GeneratorModel :: !Map PaymentPubKey Lovelace -> !Set PaymentPubKey -> !Maybe Natural -> GeneratorModel

-- | Value created at the beginning of the blockchain.
[gmInitialBalance] :: GeneratorModel -> !Map PaymentPubKey Lovelace

-- | Public keys that are to be used for generating transactions.
[gmPubKeys] :: GeneratorModel -> !Set PaymentPubKey
[gmMaxCollateralInputs] :: GeneratorModel -> !Maybe Natural

-- | A generator model with some sensible defaults.
generatorModel :: GeneratorModel

-- | Generate a valid transaction, using the unspent outputs provided.
--   Fails if the there are no unspent outputs, or if the total value of
--   the unspent outputs is smaller than the minimum fee.
genValidTransaction :: Mockchain -> Gen CardanoTx
genValidTransactionBody :: Mockchain -> Gen (TxBodyContent BuildTx BabbageEra)

-- | Generate a valid transaction, using the unspent outputs provided.
--   Fails if the there are no unspent outputs, or if the total value of
--   the unspent outputs is smaller than the estimated fee.
genValidTransaction' :: GeneratorModel -> Mockchain -> Gen CardanoTx
genValidTransactionSpending :: [TxIn] -> Value -> Gen CardanoTx
genValidTransactionSpending' :: GeneratorModel -> [TxIn] -> Value -> Gen CardanoTx

-- | A transaction with no inputs that mints some value (to be used at the
--   beginning of a blockchain).
genInitialTransaction :: GeneratorModel -> Gen (CardanoTx, [TxOut])
makeTx :: MonadFail m => TxBodyContent BuildTx BabbageEra -> m CardanoTx

-- | Assert that a transaction is valid in a chain.
assertValid :: (MonadTest m, HasCallStack) => CardanoTx -> Mockchain -> m ()

-- | Generate an 'Interval where the lower bound if less or equal than the
--   upper bound.
genInterval :: (MonadFail m, Ord a) => m a -> m (Interval a)

-- | Generate a <a>SlotRange</a> where the lower bound if less or equal
--   than the upper bound.
genSlotRange :: (MonadFail m, MonadGen m) => m SlotRange

-- | Generate a <a>POSIXTimeRange</a> where the lower bound if less or
--   equal than the upper bound.
genTimeRange :: (MonadFail m, MonadGen m) => SlotConfig -> m POSIXTimeRange

-- | Generate a <a>Slot</a> where the lowest slot number is 0.
genSlot :: MonadGen m => m Slot

-- | Generate a <a>POSIXTime</a> where the lowest value is
--   <tt>scSlotZeroTime</tt> given a <a>SlotConfig</a>.
genPOSIXTime :: MonadGen m => SlotConfig -> m POSIXTime

-- | Generate a <a>SlotConfig</a> where the slot length goes from 1 to
--   100000 ms and the time of Slot 0 is the default
--   <tt>scSlotZeroTime</tt>.
genSlotConfig :: MonadGen m => m SlotConfig

-- | Catch cardano error and fail wi it
failOnCardanoError :: MonadFail m => Either ToCardanoError a -> m a
genPolicyId :: Gen PolicyId
genAssetId :: Gen AssetId
genAssetName :: Gen AssetName
genSingleton :: Range Integer -> Gen Value

-- | Generate a <tt>Value</tt> with a value range of <tt>minBound ..
--   maxBound</tt>.
genValue :: Gen Value

-- | Generate a <tt>Value</tt> with a value range of <tt>0 ..
--   maxBound</tt>.
genValueNonNegative :: Gen Value

-- | Generate a 'ByteString s' of up to <tt>s</tt> bytes.
genSizedByteString :: forall m. MonadGen m => Int -> m ByteString

-- | Generate a 'ByteString s' of exactly <tt>s</tt> bytes.
genSizedByteStringExact :: forall m. MonadGen m => Int -> m ByteString

-- | Seed suitable for testing a seed but not for actual wallets as
--   ScrubbedBytes isn't used to ensure memory isn't inspectable
genSeed :: MonadGen m => m ByteString
genPassphrase :: MonadGen m => m Passphrase

-- | Split a value into max. n positive-valued parts such that the sum of
--   the parts equals the original value. Each part should contain the
--   required minimum amount of Ada.
--   
--   I noticed how for values of <tt>mx</tt> &gt; 1000 the resulting lists
--   are much smaller than one would expect. I think this may be caused by
--   the way we select the next value for the split. It looks like the
--   available funds get exhausted quite fast, which makes the function
--   return before generating anything close to <tt>mx</tt> values.
splitVal :: (MonadGen m, Integral n) => Int -> n -> m [n]

-- | Validate a transaction in a mockchain.
validateMockchain :: Mockchain -> CardanoTx -> Maybe ValidationErrorInPhase

-- | Attach signatures of all known private keys to a transaction.
signAll :: CardanoTx -> CardanoTx
knownAddresses :: [CardanoAddress]
knownPaymentPublicKeys :: [PaymentPubKey]
knownPaymentPrivateKeys :: [PaymentPrivateKey]
knownPaymentKeys :: Map PaymentPubKey PaymentPrivateKey
knownXPrvs :: [XPrv]
alwaysSucceedPolicy :: MintingPolicy
alwaysSucceedPolicyId :: PolicyId
someTokenValue :: AssetName -> Integer -> Value
emptyTxBodyContent :: TxBodyContent BuildTx BabbageEra
instance GHC.Show.Show Cardano.Node.Emulator.Generators.GeneratorModel
instance GHC.Show.Show Cardano.Node.Emulator.Generators.Mockchain


-- | Calculating transaction fees in the emulator.
module Cardano.Node.Emulator.Fee
estimateCardanoBuildTxFee :: Params -> UTxO EmulatorEra -> CardanoBuildTx -> Either CardanoLedgerError Lovelace

-- | Creates a balanced transaction by calculating the execution units, the
--   fees and the change, which is assigned to the given address. Only
--   balances Ada.
makeAutoBalancedTransaction :: Params -> UTxO EmulatorEra -> CardanoBuildTx -> CardanoAddress -> Either CardanoLedgerError (Tx BabbageEra)

-- | Creates a balanced transaction by calculating the execution units, the
--   fees and then the balance. If the balance is negative the utxo
--   provider is asked to pick extra inputs to make the balance is
--   positive, which is then assigned to the change address. The collateral
--   is similarly balanced. Unlike <a>makeAutoBalancedTransaction</a> this
--   function also balances non-Ada.
makeAutoBalancedTransactionWithUtxoProvider :: Monad m => Params -> UtxoIndex -> CardanoAddress -> UtxoProvider m -> (forall a. CardanoLedgerError -> m a) -> CardanoBuildTx -> m (Tx BabbageEra)
utxoProviderFromWalletOutputs :: UtxoIndex -> CardanoBuildTx -> UtxoProvider (Either BalancingError)
data BalancingError

-- | Not enough extra inputs available to balance a transaction.
InsufficientFunds :: Value -> Value -> BalancingError
[total] :: BalancingError -> Value
[expected] :: BalancingError -> Value
CardanoLedgerError :: CardanoLedgerError -> BalancingError

-- | Given a set of <tt>a</tt>s with coin values, and a target value,
--   select a number of <tt>a</tt> such that their total value is greater
--   than or equal to the target.
selectCoin :: Eq a => [(a, Value)] -> Value -> Either BalancingError ([a], Value)
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Node.Emulator.Fee.BalancingError
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Node.Emulator.Fee.BalancingError
instance GHC.Generics.Generic Cardano.Node.Emulator.Fee.BalancingError
instance GHC.Classes.Eq Cardano.Node.Emulator.Fee.BalancingError
instance GHC.Show.Show Cardano.Node.Emulator.Fee.BalancingError

module Cardano.Node.Emulator.Chain

-- | Events produced by the blockchain emulator.
data ChainEvent

-- | A transaction has been validated and added to the blockchain.
TxnValidate :: !TxId -> !CardanoTx -> ![Text] -> ChainEvent

-- | A transaction failed to validate. The <tt>Value</tt> indicates the
--   amount of collateral stored in the transaction.
TxnValidationFail :: !ValidationPhase -> !TxId -> !CardanoTx -> !ValidationError -> !Value -> ![Text] -> ChainEvent
SlotAdd :: !Slot -> ChainEvent
chainEventOnChainTx :: ChainEvent -> Maybe OnChainTx

-- | A pool of transactions which have yet to be validated.
type TxPool = [CardanoTx]
data ChainState
ChainState :: !Blockchain -> !TxPool -> !UtxoIndex -> !Slot -> ChainState

-- | The current chain, with the newest transactions first in the list.
[_chainNewestFirst] :: ChainState -> !Blockchain

-- | The pool of pending transactions.
[_txPool] :: ChainState -> !TxPool

-- | The UTxO index, used for validation.
[_index] :: ChainState -> !UtxoIndex

-- | The current slot number
[_chainCurrentSlot] :: ChainState -> !Slot
emptyChainState :: ChainState
txPool :: Lens' ChainState TxPool
index :: Lens' ChainState UtxoIndex
chainNewestFirst :: Lens' ChainState Blockchain
chainCurrentSlot :: Lens' ChainState Slot
data ChainControlEffect r
[ProcessBlock] :: ChainControlEffect Block
[ModifySlot] :: (Slot -> Slot) -> ChainControlEffect Slot
data ChainEffect r
[QueueTx] :: CardanoTx -> ChainEffect ()
[GetCurrentSlot] :: ChainEffect Slot
[GetParams] :: ChainEffect Params

-- | Make a new block
processBlock :: Member ChainControlEffect effs => Eff effs Block

-- | Adjust the current slot number, returning the new slot.
modifySlot :: Member ChainControlEffect effs => (Slot -> Slot) -> Eff effs Slot
queueTx :: Member ChainEffect effs => CardanoTx -> Eff effs ()
getParams :: Member ChainEffect effs => Eff effs Params
getCurrentSlot :: Member ChainEffect effs => Eff effs Slot
type ChainEffs = '[State ChainState, LogMsg ChainEvent]
handleControlChain :: Members ChainEffs effs => Params -> ChainControlEffect ~> Eff effs
logEvent :: Member (LogMsg ChainEvent) effs => ChainEvent -> Eff effs ()
handleChain :: Members ChainEffs effs => Params -> ChainEffect ~> Eff effs

-- | The result of validating a block.
data ValidatedBlock
ValidatedBlock :: !Block -> ![ChainEvent] -> !UtxoIndex -> ValidatedBlock

-- | The transactions that have been validated in this block.
[vlbValid] :: ValidatedBlock -> !Block

-- | Transaction validation events for the transactions in this block.
[vlbEvents] :: ValidatedBlock -> ![ChainEvent]

-- | The updated UTxO index after processing the block
[vlbIndex] :: ValidatedBlock -> !UtxoIndex
data ValidationCtx
ValidationCtx :: !UtxoIndex -> !Params -> ValidationCtx
[vctxIndex] :: ValidationCtx -> !UtxoIndex
[vctxParams] :: ValidationCtx -> !Params

-- | Validate a block given the current slot and UTxO index, returning the
--   valid transactions, success/failure events and the updated UTxO set.
validateBlock :: Params -> Slot -> UtxoIndex -> TxPool -> ValidatedBlock
getCollateral :: UtxoIndex -> CardanoTx -> Value

-- | Check whether the given transaction can be validated in the given
--   slot.
canValidateNow :: Slot -> CardanoTx -> Bool
mkValidationEvent :: UtxoIndex -> CardanoTx -> Either ValidationErrorInPhase ValidationSuccess -> ChainEvent

-- | Validate a transaction in the current emulator state.
validateEm :: MonadState ValidationCtx m => Slot -> CardanoTx -> m (Either ValidationErrorInPhase ValidationSuccess)

-- | Adds a block to ChainState, without validation.
addBlock :: Block -> ChainState -> ChainState
addTxToPool :: CardanoTx -> TxPool -> TxPool
_SlotAdd :: Prism' ChainEvent Slot
_TxnValidationFail :: Prism' ChainEvent (ValidationPhase, TxId, CardanoTx, ValidationError, Value, [Text])
_TxnValidate :: Prism' ChainEvent (TxId, CardanoTx, [Text])
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Node.Emulator.Chain.ChainEvent
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Node.Emulator.Chain.ChainEvent
instance GHC.Generics.Generic Cardano.Node.Emulator.Chain.ChainEvent
instance GHC.Show.Show Cardano.Node.Emulator.Chain.ChainEvent
instance GHC.Classes.Eq Cardano.Node.Emulator.Chain.ChainEvent
instance GHC.Generics.Generic Cardano.Node.Emulator.Chain.ChainState
instance GHC.Show.Show Cardano.Node.Emulator.Chain.ChainState
instance Prettyprinter.Internal.Pretty Cardano.Node.Emulator.Chain.ChainEvent

module Cardano.Node.Emulator.MTL.LogMessages
data EmulatorMsg
GenericMsg :: Value -> EmulatorMsg
TxBalanceMsg :: TxBalanceMsg -> EmulatorMsg
ChainEvent :: ChainEvent -> EmulatorMsg
data TxBalanceMsg
BalancingUnbalancedTx :: CardanoBuildTx -> UtxoIndex -> TxBalanceMsg
FinishedBalancing :: CardanoTx -> TxBalanceMsg
SigningTx :: CardanoTx -> TxBalanceMsg
SubmittingTx :: CardanoTx -> TxBalanceMsg
ValidationFailed :: ValidationPhase -> TxId -> CardanoTx -> ValidationError -> Value -> [Text] -> TxBalanceMsg
_ValidationFailed :: Prism' TxBalanceMsg (ValidationPhase, TxId, CardanoTx, ValidationError, Value, [Text])
_SubmittingTx :: Prism' TxBalanceMsg CardanoTx
_SigningTx :: Prism' TxBalanceMsg CardanoTx
_FinishedBalancing :: Prism' TxBalanceMsg CardanoTx
_BalancingUnbalancedTx :: Prism' TxBalanceMsg (CardanoBuildTx, UtxoIndex)
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Node.Emulator.MTL.LogMessages.TxBalanceMsg
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Node.Emulator.MTL.LogMessages.TxBalanceMsg
instance GHC.Generics.Generic Cardano.Node.Emulator.MTL.LogMessages.TxBalanceMsg
instance GHC.Show.Show Cardano.Node.Emulator.MTL.LogMessages.TxBalanceMsg
instance GHC.Classes.Eq Cardano.Node.Emulator.MTL.LogMessages.TxBalanceMsg
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Node.Emulator.MTL.LogMessages.EmulatorMsg
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Node.Emulator.MTL.LogMessages.EmulatorMsg
instance GHC.Generics.Generic Cardano.Node.Emulator.MTL.LogMessages.EmulatorMsg
instance GHC.Show.Show Cardano.Node.Emulator.MTL.LogMessages.EmulatorMsg
instance GHC.Classes.Eq Cardano.Node.Emulator.MTL.LogMessages.EmulatorMsg
instance Prettyprinter.Internal.Pretty Cardano.Node.Emulator.MTL.LogMessages.EmulatorMsg
instance Prettyprinter.Internal.Pretty Cardano.Node.Emulator.MTL.LogMessages.TxBalanceMsg

module Cardano.Node.Emulator


-- | If you want to run the node emulator without using the
--   <tt>Contract</tt> monad, this module provides a simple MTL-based
--   interface.
module Cardano.Node.Emulator.MTL

-- | Queue the transaction, it will be processed when <tt>nextSlot</tt> is
--   called.
queueTx :: MonadEmulator m => CardanoTx -> m ()

-- | Process the queued transactions and increase the slot number.
nextSlot :: MonadEmulator m => m ()

-- | Get the current slot number of the emulated node.
currentSlot :: MonadEmulator m => m Slot

-- | Call <a>nextSlot</a> until the current slot number equals or exceeds
--   the given slot number.
awaitSlot :: MonadEmulator m => Slot -> m ()

-- | Query the unspent transaction outputs at the given address.
utxosAt :: MonadEmulator m => CardanoAddress -> m (Map TxOutRef DecoratedTxOut)

-- | Query the total value of the unspent transaction outputs at the given
--   address.
fundsAt :: MonadEmulator m => CardanoAddress -> m Value

-- | Balance an unbalanced transaction, using funds from the given wallet
--   if needed, and returning any remaining value to the same wallet.
balanceTx :: MonadEmulator m => UtxoIndex -> CardanoAddress -> CardanoBuildTx -> m CardanoTx

-- | Sign a transaction with the given signatures.
signTx :: (MonadEmulator m, Foldable f) => f PaymentPrivateKey -> CardanoTx -> m CardanoTx

-- | Balance a transaction, sign it with the given signatures, and finally
--   queue it.
submitUnbalancedTx :: (MonadEmulator m, Foldable f) => UtxoIndex -> CardanoAddress -> f PaymentPrivateKey -> CardanoBuildTx -> m CardanoTx
submitTxConfirmed :: (MonadEmulator m, Foldable f) => UtxoIndex -> CardanoAddress -> f PaymentPrivateKey -> CardanoBuildTx -> m CardanoTx

-- | Create a transaction that transfers funds from one address to another,
--   and sign and submit it.
payToAddress :: MonadEmulator m => (CardanoAddress, PaymentPrivateKey) -> CardanoAddress -> Value -> m TxId

-- | Log a message at the <tt>Debug</tt> level
logDebug :: (ToJSON a, MonadEmulator m) => a -> m ()

-- | Log a message at the <tt>Info</tt> level
logInfo :: (ToJSON a, MonadEmulator m) => a -> m ()

-- | Log a message at the <tt>Warning</tt> level
logWarn :: (ToJSON a, MonadEmulator m) => a -> m ()

-- | Log a message at the <tt>Error</tt> level
logError :: (ToJSON a, MonadEmulator m) => a -> m ()
data EmulatorState
EmulatorState :: !ChainState -> !AddressMap -> EmulatorState
esChainState :: Lens' EmulatorState ChainState
esAddressMap :: Lens' EmulatorState AddressMap
data EmulatorError
BalancingError :: !BalancingError -> EmulatorError
ValidationError :: !ValidationErrorInPhase -> EmulatorError
ToCardanoError :: !ToCardanoError -> EmulatorError
type EmulatorLogs = Seq (LogMessage EmulatorMsg)
data EmulatorMsg
GenericMsg :: Value -> EmulatorMsg
TxBalanceMsg :: TxBalanceMsg -> EmulatorMsg
ChainEvent :: ChainEvent -> EmulatorMsg
data LogMessage a
LogMessage :: LogLevel -> a -> LogMessage a
[_logLevel] :: LogMessage a -> LogLevel
[_logMessageContent] :: LogMessage a -> a
type MonadEmulator m = (MonadRWS Params EmulatorLogs EmulatorState m, MonadError EmulatorError m)
type EmulatorT m = ExceptT EmulatorError (RWST Params EmulatorLogs EmulatorState m)
type EmulatorM = EmulatorT Identity
emptyEmulatorState :: EmulatorState
emptyEmulatorStateWithInitialDist :: Map CardanoAddress Value -> EmulatorState
getParams :: MonadEmulator m => m Params
handleChain :: MonadEmulator m => Eff [ChainControlEffect, ChainEffect] a -> m a
instance GHC.Show.Show Cardano.Node.Emulator.MTL.EmulatorError
instance GHC.Show.Show Cardano.Node.Emulator.MTL.EmulatorState

module Cardano.Node.Emulator.MTL.Test

-- | Test the number of validated transactions and the total number of
--   transactions. Returns a failure message if the numbers don't match up.
hasValidatedTransactionCountOfTotal :: Int -> Int -> EmulatorLogs -> Maybe String

-- | Render the logs in a format useful for debugging why a test failed.
renderLogs :: EmulatorLogs -> Text

-- | Sanity check a <a>ContractModel</a>. Ensures that wallet balances are
--   not always unchanged.
propSanityCheckModel :: forall state. ContractModel state => Property

-- | Sanity check a <a>ContractModel</a>. Ensures that all assertions in
--   the property generation succeed.
propSanityCheckAssertions :: forall state. ContractModel state => Actions state -> Property

-- | Run <a>Actions</a> in the emulator and check that the model and the
--   emulator agree on the final wallet balance changes. Starts with
--   100.000.000 Ada for each wallet and the default parameters.
propRunActions_ :: forall state. RunModel state EmulatorM => Actions state -> Property
propRunActions :: forall state. RunModel state EmulatorM => (ModelState state -> EmulatorLogs -> Maybe String) -> Actions state -> Property
propRunActionsWithOptions :: forall state. RunModel state EmulatorM => Map CardanoAddress Value -> Params -> (ModelState state -> EmulatorLogs -> Maybe String) -> Actions state -> Property
chainStateToChainIndex :: NetworkId -> ChainState -> ChainIndex
chainStateToContractModelChainState :: ChainState -> ChainState
instance Test.QuickCheck.ContractModel.Internal.IsRunnable Cardano.Node.Emulator.MTL.EmulatorM
instance Test.QuickCheck.ContractModel.Internal.ChainIndex.HasChainIndex Cardano.Node.Emulator.MTL.EmulatorM
