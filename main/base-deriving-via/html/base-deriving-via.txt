-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A general hook newtype for use with deriving via
--   
--   A general hook newtype for use with deriving via
@package base-deriving-via
@version 0.1.0.1


-- | <a>GHC.Generics</a> definition of <a>mempty</a>
module Data.DerivingVia.GHC.Generics.Monoid
class GMonoid rep
gmempty :: GMonoid rep => rep x
instance GHC.Base.Monoid c => Data.DerivingVia.GHC.Generics.Monoid.GMonoid (GHC.Generics.K1 i c)
instance Data.DerivingVia.GHC.Generics.Monoid.GMonoid f => Data.DerivingVia.GHC.Generics.Monoid.GMonoid (GHC.Generics.M1 i c f)
instance Data.DerivingVia.GHC.Generics.Monoid.GMonoid GHC.Generics.V1
instance Data.DerivingVia.GHC.Generics.Monoid.GMonoid GHC.Generics.U1
instance (Data.DerivingVia.GHC.Generics.Monoid.GMonoid l, Data.DerivingVia.GHC.Generics.Monoid.GMonoid r) => Data.DerivingVia.GHC.Generics.Monoid.GMonoid (l GHC.Generics.:*: r)
instance (TypeError ...) => Data.DerivingVia.GHC.Generics.Monoid.GMonoid (l GHC.Generics.:+: r)


-- | <a>GHC.Generics</a> definition of <a>&lt;&gt;</a>
module Data.DerivingVia.GHC.Generics.Semigroup
class GSemigroup rep
gsappend :: GSemigroup rep => rep x -> rep x -> rep x
instance GHC.Base.Monoid c => Data.DerivingVia.GHC.Generics.Semigroup.GSemigroup (GHC.Generics.K1 i c)
instance Data.DerivingVia.GHC.Generics.Semigroup.GSemigroup f => Data.DerivingVia.GHC.Generics.Semigroup.GSemigroup (GHC.Generics.M1 i c f)
instance Data.DerivingVia.GHC.Generics.Semigroup.GSemigroup GHC.Generics.V1
instance Data.DerivingVia.GHC.Generics.Semigroup.GSemigroup GHC.Generics.U1
instance (Data.DerivingVia.GHC.Generics.Semigroup.GSemigroup l, Data.DerivingVia.GHC.Generics.Semigroup.GSemigroup r) => Data.DerivingVia.GHC.Generics.Semigroup.GSemigroup (l GHC.Generics.:*: r)
instance (TypeError ...) => Data.DerivingVia.GHC.Generics.Semigroup.GSemigroup (l GHC.Generics.:+: r)


-- | Newtype wrappers for us in <tt>deriving via</tt> clauses that " should
--   " have been defined in <tt>base</tt> and other packages we depend on
--   but do not control
--   
--   We expected variations of these to eventually be defined upstream, but
--   we'd like to use these concepts before that happens.
module Data.DerivingVia

-- | A hook that represents a <tt>deriving via</tt> scheme via some class
--   constraint
--   
--   The most notable example is <a>Generic</a>.
--   
--   <pre>
--   data T = ...
--     deriving (Monoid, Semigroup)
--          via InstantiatedAt Generic T
--   </pre>
--   
--   This type's parameterization is useful because many such schemes are
--   similarly identified by a single type class, such as <a>Ord</a>.
newtype InstantiatedAt (c :: Type -> Constraint) a
InstantiatedAt :: a -> InstantiatedAt (c :: Type -> Constraint) a
infix 0 `InstantiatedAt`
infix 0 `InstantiatedAt`
instance GHC.Show.Show a => GHC.Show.Show (Data.DerivingVia.InstantiatedAt c a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Data.DerivingVia.InstantiatedAt c a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Data.DerivingVia.InstantiatedAt c a)
instance (GHC.Generics.Generic a, Data.DerivingVia.GHC.Generics.Semigroup.GSemigroup (GHC.Generics.Rep a)) => GHC.Base.Semigroup (Data.DerivingVia.InstantiatedAt GHC.Generics.Generic a)
instance (GHC.Generics.Generic a, Data.DerivingVia.GHC.Generics.Semigroup.GSemigroup (GHC.Generics.Rep a), Data.DerivingVia.GHC.Generics.Monoid.GMonoid (GHC.Generics.Rep a)) => GHC.Base.Monoid (Data.DerivingVia.InstantiatedAt GHC.Generics.Generic a)
